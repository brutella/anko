// Code generated by goyacc -o parser.go parser.go.y. DO NOT EDIT.

//line parser.go.y:2
package parser

import __yyfmt__ "fmt"

//line parser.go.y:2

import (
	"github.com/brutella/anko/ast"
)

//line parser.go.y:49
type yySymType struct {
	yys int
	tok ast.Token

	compstmt            ast.Stmt
	stmts               ast.Stmt
	stmt                ast.Stmt
	stmt_var_or_lets    ast.Stmt
	stmt_var            ast.Stmt
	stmt_lets           ast.Stmt
	stmt_if             ast.Stmt
	stmt_for            ast.Stmt
	stmt_switch         ast.Stmt
	stmt_switch_cases   ast.Stmt
	stmt_switch_case    ast.Stmt
	stmt_switch_default ast.Stmt
	stmt_select         ast.Stmt
	stmt_select_cases   ast.Stmt
	stmt_select_case    ast.Stmt
	stmt_select_default ast.Stmt

	exprs                []ast.Expr
	expr                 ast.Expr
	expr_idents          []string
	type_data            *ast.TypeStruct
	type_data_struct     *ast.TypeStruct
	slice_count          int
	expr_member_or_ident ast.Expr
	expr_member          *ast.MemberExpr
	expr_ident           *ast.IdentExpr
	expr_literals        ast.Expr
	expr_map             *ast.MapExpr
	expr_slice           ast.Expr
	expr_chan            ast.Expr
	expr_unary           ast.Expr
	expr_binary          ast.Expr
	expr_lets            ast.Expr

	op_binary     ast.Operator
	op_comparison ast.Operator
	op_add        ast.Operator
	op_multiply   ast.Operator
}

const IDENT = 57346
const NUMBER = 57347
const STRING = 57348
const ARRAY = 57349
const VARARG = 57350
const FUNC = 57351
const RETURN = 57352
const VAR = 57353
const THROW = 57354
const IF = 57355
const ELSE = 57356
const FOR = 57357
const IN = 57358
const EQEQ = 57359
const NEQ = 57360
const GE = 57361
const LE = 57362
const OROR = 57363
const ANDAND = 57364
const NEW = 57365
const TRUE = 57366
const FALSE = 57367
const NIL = 57368
const NILCOALESCE = 57369
const MODULE = 57370
const TRY = 57371
const CATCH = 57372
const FINALLY = 57373
const PLUSEQ = 57374
const MINUSEQ = 57375
const MULEQ = 57376
const DIVEQ = 57377
const ANDEQ = 57378
const OREQ = 57379
const BREAK = 57380
const CONTINUE = 57381
const PLUSPLUS = 57382
const MINUSMINUS = 57383
const SHIFTLEFT = 57384
const SHIFTRIGHT = 57385
const SWITCH = 57386
const SELECT = 57387
const CASE = 57388
const DEFAULT = 57389
const GO = 57390
const CHAN = 57391
const STRUCT = 57392
const MAKE = 57393
const OPCHAN = 57394
const EQOPCHAN = 57395
const TYPE = 57396
const LEN = 57397
const DELETE = 57398
const CLOSE = 57399
const MAP = 57400
const IMPORT = 57401
const UNARY = 57402

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"NUMBER",
	"STRING",
	"ARRAY",
	"VARARG",
	"FUNC",
	"RETURN",
	"VAR",
	"THROW",
	"IF",
	"ELSE",
	"FOR",
	"IN",
	"EQEQ",
	"NEQ",
	"GE",
	"LE",
	"OROR",
	"ANDAND",
	"NEW",
	"TRUE",
	"FALSE",
	"NIL",
	"NILCOALESCE",
	"MODULE",
	"TRY",
	"CATCH",
	"FINALLY",
	"PLUSEQ",
	"MINUSEQ",
	"MULEQ",
	"DIVEQ",
	"ANDEQ",
	"OREQ",
	"BREAK",
	"CONTINUE",
	"PLUSPLUS",
	"MINUSMINUS",
	"SHIFTLEFT",
	"SHIFTRIGHT",
	"SWITCH",
	"SELECT",
	"CASE",
	"DEFAULT",
	"GO",
	"CHAN",
	"STRUCT",
	"MAKE",
	"OPCHAN",
	"EQOPCHAN",
	"TYPE",
	"LEN",
	"DELETE",
	"CLOSE",
	"MAP",
	"IMPORT",
	"'='",
	"':'",
	"'?'",
	"'<'",
	"'>'",
	"'+'",
	"'-'",
	"'|'",
	"'^'",
	"'*'",
	"'/'",
	"'%'",
	"'&'",
	"UNARY",
	"'{'",
	"'}'",
	"'('",
	"')'",
	"','",
	"';'",
	"'['",
	"']'",
	"'.'",
	"'!'",
	"'\\n'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.go.y:1157

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 2,
	53, 67,
	60, 67,
	78, 67,
	79, 5,
	-2, 1,
	-1, 24,
	78, 68,
	-2, 27,
	-1, 28,
	16, 105,
	-2, 67,
	-1, 69,
	53, 67,
	60, 67,
	78, 67,
	-2, 5,
	-1, 122,
	16, 106,
	78, 106,
	-2, 122,
	-1, 127,
	4, 117,
	49, 117,
	50, 117,
	58, 117,
	-2, 79,
	-1, 272,
	61, 5,
	-2, 67,
	-1, 276,
	75, 191,
	81, 191,
	-2, 183,
	-1, 297,
	75, 191,
	-2, 183,
	-1, 301,
	1, 70,
	8, 70,
	46, 70,
	47, 70,
	53, 70,
	60, 70,
	61, 70,
	75, 70,
	77, 70,
	78, 70,
	79, 70,
	81, 70,
	84, 70,
	-2, 120,
	-1, 305,
	1, 17,
	46, 17,
	47, 17,
	61, 17,
	75, 17,
	79, 17,
	84, 17,
	-2, 84,
	-1, 307,
	1, 19,
	46, 19,
	47, 19,
	61, 19,
	75, 19,
	79, 19,
	84, 19,
	-2, 86,
	-1, 336,
	46, 57,
	47, 57,
	75, 57,
	-2, 178,
	-1, 342,
	75, 189,
	81, 189,
	-2, 184,
	-1, 362,
	1, 16,
	46, 16,
	47, 16,
	61, 16,
	75, 16,
	79, 16,
	84, 16,
	-2, 83,
	-1, 363,
	1, 18,
	46, 18,
	47, 18,
	61, 18,
	75, 18,
	79, 18,
	84, 18,
	-2, 85,
}

const yyPrivate = 57344

const yyLast = 4030

var yyAct = [...]int{
	73, 277, 236, 24, 9, 329, 51, 147, 330, 269,
	270, 5, 38, 332, 331, 74, 8, 297, 78, 394,
	72, 118, 8, 8, 218, 8, 403, 276, 116, 119,
	123, 272, 271, 8, 218, 127, 343, 138, 8, 35,
	224, 1, 128, 345, 218, 291, 292, 145, 7, 217,
	218, 8, 86, 146, 154, 71, 87, 218, 89, 140,
	155, 156, 157, 158, 159, 295, 218, 341, 290, 8,
	24, 210, 148, 218, 160, 133, 137, 221, 152, 130,
	165, 166, 205, 169, 170, 171, 172, 354, 174, 176,
	390, 178, 363, 173, 179, 180, 181, 182, 183, 184,
	185, 186, 187, 188, 189, 190, 191, 192, 193, 194,
	195, 196, 197, 198, 199, 200, 201, 421, 162, 71,
	362, 209, 238, 348, 339, 312, 306, 214, 139, 163,
	144, 304, 212, 126, 152, 216, 340, 206, 88, 143,
	206, 227, 229, 230, 206, 6, 226, 213, 237, 151,
	142, 70, 240, 234, 141, 80, 150, 239, 283, 203,
	241, 79, 91, 92, 102, 103, 466, 215, 249, 465,
	244, 245, 133, 133, 152, 133, 256, 274, 71, 461,
	129, 252, 456, 133, 133, 455, 133, 105, 106, 107,
	129, 99, 100, 101, 104, 307, 152, 360, 86, 453,
	305, 152, 87, 242, 89, 125, 259, 446, 88, 263,
	250, 266, 219, 220, 260, 222, 445, 441, 440, 267,
	439, 437, 428, 231, 232, 279, 235, 284, 152, 287,
	427, 282, 91, 92, 423, 237, 275, 294, 296, 418,
	414, 412, 300, 131, 257, 299, 273, 206, 308, 261,
	253, 152, 311, 71, 301, 411, 313, 410, 407, 402,
	384, 133, 370, 204, 215, 324, 326, 361, 86, 357,
	129, 320, 87, 24, 89, 317, 333, 337, 335, 334,
	310, 302, 258, 243, 241, 462, 344, 349, 135, 136,
	460, 129, 426, 353, 405, 167, 355, 134, 129, 359,
	389, 281, 388, 338, 321, 358, 223, 161, 132, 124,
	76, 386, 381, 336, 332, 331, 459, 368, 454, 137,
	272, 271, 303, 81, 448, 347, 319, 71, 377, 10,
	293, 280, 149, 382, 380, 133, 378, 379, 177, 383,
	75, 4, 64, 2, 65, 69, 391, 68, 66, 67,
	49, 365, 129, 398, 393, 401, 168, 129, 121, 404,
	369, 48, 278, 129, 371, 372, 47, 374, 408, 129,
	46, 45, 32, 52, 31, 356, 346, 268, 385, 23,
	387, 328, 278, 22, 21, 133, 20, 133, 26, 25,
	3, 71, 0, 0, 0, 0, 131, 0, 430, 0,
	0, 432, 429, 406, 0, 0, 0, 0, 204, 0,
	0, 434, 0, 0, 129, 413, 0, 415, 416, 0,
	0, 0, 342, 419, 0, 392, 0, 395, 422, 0,
	424, 425, 0, 0, 0, 237, 452, 451, 0, 0,
	278, 135, 136, 342, 0, 0, 233, 436, 0, 0,
	134, 0, 0, 458, 0, 0, 0, 0, 0, 442,
	0, 132, 443, 444, 0, 0, 0, 0, 447, 204,
	0, 204, 137, 0, 129, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 133, 0,
	278, 0, 129, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 463, 0, 464, 0, 0, 0, 0, 0,
	37, 54, 55, 0, 0, 33, 13, 50, 14, 27,
	0, 28, 204, 0, 0, 0, 0, 0, 457, 41,
	56, 57, 58, 0, 15, 16, 0, 0, 0, 0,
	129, 0, 0, 0, 11, 12, 0, 0, 0, 129,
	29, 30, 0, 0, 17, 0, 0, 42, 59, 0,
	0, 39, 18, 19, 43, 40, 0, 0, 0, 0,
	0, 0, 53, 0, 61, 63, 0, 0, 62, 0,
	44, 0, 36, 0, 0, 0, 34, 0, 0, 60,
	88, 108, 109, 113, 111, 115, 114, 278, 0, 0,
	0, 85, 0, 0, 0, 0, 93, 94, 96, 97,
	98, 95, 0, 0, 91, 92, 102, 103, 0, 0,
	0, 0, 0, 0, 0, 0, 90, 83, 0, 0,
	0, 0, 0, 0, 82, 0, 84, 110, 112, 105,
	106, 107, 0, 99, 100, 101, 104, 0, 207, 0,
	86, 0, 0, 0, 87, 0, 89, 88, 108, 109,
	113, 111, 115, 114, 0, 0, 0, 0, 85, 0,
	0, 0, 0, 93, 94, 96, 97, 98, 95, 0,
	0, 91, 92, 102, 103, 0, 0, 0, 0, 0,
	0, 0, 0, 90, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 110, 112, 105, 106, 107, 0,
	99, 100, 101, 104, 0, 0, 0, 86, 399, 400,
	0, 87, 0, 89, 88, 108, 109, 113, 111, 115,
	114, 0, 0, 0, 0, 85, 0, 0, 0, 0,
	93, 94, 96, 97, 98, 95, 0, 0, 91, 92,
	102, 103, 0, 0, 0, 0, 0, 0, 0, 0,
	90, 0, 0, 0, 0, 0, 0, 0, 0, 397,
	84, 110, 112, 105, 106, 107, 0, 99, 100, 101,
	104, 0, 0, 0, 86, 0, 0, 0, 87, 396,
	89, 88, 108, 109, 113, 111, 115, 114, 0, 0,
	0, 0, 85, 0, 0, 0, 0, 93, 94, 96,
	97, 98, 95, 0, 0, 91, 92, 102, 103, 0,
	0, 0, 0, 0, 0, 0, 0, 90, 0, 0,
	0, 0, 0, 0, 0, 0, 367, 84, 110, 112,
	105, 106, 107, 0, 99, 100, 101, 104, 0, 0,
	0, 86, 0, 0, 0, 87, 366, 89, 88, 108,
	109, 113, 111, 115, 114, 0, 0, 0, 0, 85,
	0, 0, 0, 0, 93, 94, 96, 97, 98, 95,
	0, 0, 91, 92, 102, 103, 0, 0, 0, 0,
	0, 0, 0, 0, 90, 0, 0, 0, 0, 0,
	0, 0, 0, 352, 84, 110, 112, 105, 106, 107,
	0, 99, 100, 101, 104, 0, 0, 0, 86, 0,
	0, 0, 87, 351, 89, 88, 108, 109, 113, 111,
	115, 114, 0, 0, 0, 0, 85, 0, 0, 0,
	0, 93, 94, 96, 97, 98, 95, 0, 0, 91,
	92, 102, 103, 0, 0, 0, 0, 0, 0, 0,
	0, 90, 0, 0, 0, 0, 0, 0, 0, 0,
	316, 84, 110, 112, 105, 106, 107, 0, 99, 100,
	101, 104, 0, 0, 0, 86, 0, 0, 0, 87,
	315, 89, 88, 108, 109, 113, 111, 115, 114, 0,
	0, 0, 0, 85, 0, 0, 0, 0, 93, 94,
	96, 97, 98, 95, 0, 0, 91, 92, 102, 103,
	0, 0, 0, 0, 0, 0, 0, 0, 90, 0,
	0, 0, 0, 0, 0, 0, 0, 286, 84, 110,
	112, 105, 106, 107, 0, 99, 100, 101, 104, 0,
	0, 0, 86, 0, 0, 0, 87, 285, 89, 88,
	108, 109, 113, 111, 115, 114, 0, 0, 0, 0,
	85, 0, 0, 0, 0, 93, 94, 96, 97, 98,
	95, 0, 0, 91, 92, 102, 103, 0, 0, 0,
	0, 0, 0, 0, 0, 90, 0, 0, 0, 0,
	0, 0, 0, 0, 255, 84, 110, 112, 105, 106,
	107, 0, 99, 100, 101, 104, 0, 0, 0, 86,
	0, 0, 0, 87, 254, 89, 88, 108, 109, 113,
	111, 115, 114, 0, 0, 0, 0, 85, 0, 0,
	0, 0, 93, 94, 96, 97, 98, 95, 0, 0,
	91, 92, 102, 103, 0, 0, 0, 0, 0, 0,
	0, 0, 90, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 110, 112, 105, 106, 107, 0, 99,
	100, 101, 104, 0, 0, 0, 86, 246, 247, 0,
	87, 0, 89, 88, 108, 109, 113, 111, 115, 114,
	0, 0, 0, 0, 85, 0, 0, 0, 0, 93,
	94, 96, 97, 98, 95, 0, 0, 91, 92, 102,
	103, 0, 0, 0, 0, 0, 0, 0, 0, 90,
	83, 0, 0, 0, 0, 0, 0, 82, 0, 84,
	110, 112, 105, 106, 107, 0, 99, 100, 101, 104,
	0, 0, 0, 86, 0, 0, 0, 87, 0, 89,
	88, 108, 109, 113, 111, 115, 114, 0, 0, 0,
	0, 85, 0, 0, 0, 0, 93, 94, 96, 97,
	98, 95, 0, 0, 91, 92, 102, 103, 0, 0,
	0, 0, 0, 0, 0, 0, 90, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 110, 112, 105,
	106, 107, 0, 99, 100, 101, 104, 0, 0, 0,
	86, 450, 0, 0, 87, 0, 89, 88, 108, 109,
	113, 111, 115, 114, 0, 0, 0, 0, 85, 0,
	0, 0, 0, 93, 94, 96, 97, 98, 95, 0,
	0, 91, 92, 102, 103, 0, 0, 0, 0, 0,
	0, 0, 0, 90, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 110, 112, 105, 106, 107, 0,
	99, 100, 101, 104, 0, 0, 0, 86, 0, 0,
	0, 87, 449, 89, 88, 108, 109, 113, 111, 115,
	114, 0, 0, 0, 0, 85, 0, 0, 0, 0,
	93, 94, 96, 97, 98, 95, 0, 0, 91, 92,
	102, 103, 0, 0, 0, 0, 0, 0, 0, 0,
	90, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 110, 112, 105, 106, 107, 0, 99, 100, 101,
	104, 0, 0, 0, 86, 0, 0, 0, 87, 438,
	89, 88, 108, 109, 113, 111, 115, 114, 0, 0,
	0, 0, 85, 0, 0, 0, 0, 93, 94, 96,
	97, 98, 95, 0, 0, 91, 92, 102, 103, 0,
	0, 0, 0, 0, 0, 0, 0, 90, 0, 0,
	0, 0, 0, 0, 0, 0, 435, 84, 110, 112,
	105, 106, 107, 0, 99, 100, 101, 104, 0, 0,
	0, 86, 0, 0, 0, 87, 0, 89, 88, 108,
	109, 113, 111, 115, 114, 0, 0, 0, 0, 85,
	0, 0, 0, 0, 93, 94, 96, 97, 98, 95,
	0, 0, 91, 92, 102, 103, 0, 0, 0, 0,
	0, 0, 0, 0, 90, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 110, 112, 105, 106, 107,
	0, 99, 100, 101, 104, 0, 0, 0, 86, 433,
	0, 0, 87, 0, 89, 88, 108, 109, 113, 111,
	115, 114, 0, 0, 0, 0, 85, 0, 0, 0,
	0, 93, 94, 96, 97, 98, 95, 0, 0, 91,
	92, 102, 103, 0, 0, 0, 0, 0, 0, 0,
	0, 90, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 110, 112, 105, 106, 107, 0, 99, 100,
	101, 104, 0, 0, 0, 86, 0, 0, 0, 87,
	431, 89, 88, 108, 109, 113, 111, 115, 114, 0,
	0, 0, 0, 85, 0, 0, 0, 0, 93, 94,
	96, 97, 98, 95, 0, 0, 91, 92, 102, 103,
	0, 0, 0, 0, 0, 0, 0, 0, 90, 0,
	0, 0, 0, 0, 0, 0, 0, 420, 84, 110,
	112, 105, 106, 107, 0, 99, 100, 101, 104, 0,
	0, 0, 86, 0, 0, 0, 87, 0, 89, 88,
	108, 109, 113, 111, 115, 114, 0, 0, 0, 0,
	85, 0, 0, 0, 0, 93, 94, 96, 97, 98,
	95, 0, 0, 91, 92, 102, 103, 0, 0, 0,
	0, 0, 0, 0, 0, 90, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 110, 112, 105, 106,
	107, 0, 99, 100, 101, 104, 0, 417, 0, 86,
	0, 0, 0, 87, 0, 89, 88, 108, 109, 113,
	111, 115, 114, 0, 0, 0, 0, 85, 0, 0,
	0, 0, 93, 94, 96, 97, 98, 95, 0, 0,
	91, 92, 102, 103, 0, 0, 0, 0, 0, 0,
	0, 0, 90, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 110, 112, 105, 106, 107, 0, 99,
	100, 101, 104, 0, 0, 0, 86, 0, 0, 0,
	87, 409, 89, 88, 108, 109, 113, 111, 115, 114,
	0, 0, 0, 0, 85, 0, 0, 0, 0, 93,
	94, 96, 97, 98, 95, 0, 0, 91, 92, 102,
	103, 0, 0, 0, 0, 0, 0, 0, 0, 90,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	110, 112, 105, 106, 107, 0, 99, 100, 101, 104,
	0, 375, 0, 86, 0, 0, 0, 87, 0, 89,
	88, 108, 109, 113, 111, 115, 114, 0, 0, 0,
	0, 85, 0, 0, 0, 0, 93, 94, 96, 97,
	98, 95, 0, 0, 91, 92, 102, 103, 0, 0,
	0, 0, 0, 0, 0, 0, 90, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 110, 112, 105,
	106, 107, 0, 99, 100, 101, 104, 0, 373, 0,
	86, 0, 0, 0, 87, 0, 89, 88, 108, 109,
	113, 111, 115, 114, 0, 0, 0, 0, 85, 0,
	0, 0, 0, 93, 94, 96, 97, 98, 95, 0,
	0, 91, 92, 102, 103, 0, 0, 0, 0, 0,
	0, 0, 0, 90, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 110, 112, 105, 106, 107, 0,
	99, 100, 101, 104, 0, 0, 0, 86, 364, 0,
	0, 87, 0, 89, 88, 108, 109, 113, 111, 115,
	114, 0, 0, 0, 0, 85, 0, 0, 0, 0,
	93, 94, 96, 97, 98, 95, 0, 0, 91, 92,
	102, 103, 0, 0, 0, 0, 0, 0, 0, 0,
	90, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 110, 112, 105, 106, 107, 0, 99, 100, 101,
	104, 0, 0, 0, 86, 0, 0, 327, 87, 0,
	89, 88, 108, 109, 113, 111, 115, 114, 0, 0,
	0, 0, 85, 0, 0, 0, 0, 93, 94, 96,
	97, 98, 95, 0, 0, 91, 92, 102, 103, 0,
	0, 0, 0, 0, 0, 0, 0, 90, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 84, 110, 112,
	105, 106, 107, 0, 99, 100, 101, 104, 0, 322,
	0, 86, 0, 0, 0, 87, 0, 89, 88, 108,
	109, 113, 111, 115, 114, 0, 0, 0, 0, 85,
	0, 0, 0, 0, 93, 94, 96, 97, 98, 95,
	0, 0, 91, 92, 102, 103, 0, 0, 0, 0,
	0, 0, 0, 0, 90, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 110, 112, 105, 106, 107,
	0, 99, 100, 101, 104, 0, 318, 0, 86, 0,
	0, 0, 87, 0, 89, 88, 108, 109, 113, 111,
	115, 114, 0, 0, 0, 0, 85, 0, 0, 0,
	0, 93, 94, 96, 97, 98, 95, 0, 0, 91,
	92, 102, 103, 0, 0, 0, 0, 0, 0, 0,
	0, 90, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 110, 112, 105, 106, 107, 0, 99, 100,
	101, 104, 0, 309, 0, 86, 0, 0, 0, 87,
	0, 89, 88, 108, 109, 113, 111, 115, 114, 0,
	0, 0, 0, 85, 0, 0, 0, 0, 93, 94,
	96, 97, 98, 95, 0, 0, 91, 92, 102, 103,
	0, 0, 0, 0, 0, 0, 0, 0, 90, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 84, 110,
	112, 105, 106, 107, 0, 99, 100, 101, 104, 0,
	0, 0, 86, 0, 0, 0, 87, 0, 89, 88,
	108, 109, 113, 111, 115, 114, 0, 0, 0, 0,
	85, 0, 0, 0, 0, 93, 94, 96, 97, 98,
	95, 0, 0, 91, 92, 102, 103, 0, 0, 0,
	0, 0, 0, 0, 0, 90, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 110, 112, 105, 106,
	107, 0, 99, 100, 101, 104, 0, 0, 0, 86,
	289, 0, 0, 87, 0, 89, 88, 108, 109, 113,
	111, 115, 114, 0, 0, 0, 0, 85, 0, 0,
	0, 0, 93, 94, 96, 97, 98, 95, 0, 0,
	91, 92, 102, 103, 0, 0, 0, 0, 0, 0,
	0, 0, 90, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 110, 112, 105, 106, 107, 0, 99,
	100, 101, 104, 0, 0, 0, 86, 288, 0, 0,
	87, 0, 89, 88, 108, 109, 113, 111, 115, 114,
	0, 0, 0, 0, 85, 0, 0, 0, 0, 93,
	94, 96, 97, 98, 95, 0, 0, 91, 92, 102,
	103, 0, 0, 0, 0, 0, 0, 0, 0, 90,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	110, 112, 105, 106, 107, 0, 99, 100, 101, 104,
	0, 0, 0, 86, 0, 0, 264, 87, 0, 89,
	88, 108, 109, 113, 111, 115, 114, 0, 0, 0,
	0, 85, 0, 0, 0, 0, 93, 94, 96, 97,
	98, 95, 0, 0, 91, 92, 102, 103, 0, 0,
	0, 0, 0, 0, 0, 0, 90, 0, 0, 0,
	0, 0, 0, 0, 0, 251, 84, 110, 112, 105,
	106, 107, 0, 99, 100, 101, 104, 0, 0, 0,
	86, 0, 0, 0, 87, 0, 89, 88, 108, 109,
	113, 111, 115, 114, 0, 0, 0, 0, 85, 0,
	0, 0, 0, 93, 94, 96, 97, 98, 95, 0,
	0, 91, 92, 102, 103, 0, 0, 0, 0, 0,
	0, 0, 0, 90, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 110, 112, 105, 106, 107, 0,
	99, 100, 101, 104, 0, 0, 0, 86, 248, 0,
	0, 87, 0, 89, 88, 108, 109, 113, 111, 115,
	114, 0, 0, 0, 0, 85, 0, 0, 0, 0,
	93, 94, 96, 97, 98, 95, 0, 0, 91, 92,
	102, 103, 0, 0, 0, 0, 0, 0, 0, 0,
	90, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 110, 112, 105, 106, 107, 0, 99, 100, 101,
	104, 0, 0, 0, 86, 225, 0, 0, 87, 0,
	89, 88, 108, 109, 113, 111, 115, 114, 0, 0,
	0, 0, 85, 0, 0, 0, 0, 93, 94, 96,
	97, 98, 95, 0, 0, 91, 92, 102, 103, 0,
	0, 0, 0, 0, 0, 0, 0, 90, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 84, 110, 112,
	105, 106, 107, 0, 99, 100, 101, 104, 0, 211,
	0, 86, 0, 0, 0, 87, 0, 89, 88, 108,
	109, 113, 111, 115, 114, 0, 0, 0, 0, 85,
	0, 0, 0, 0, 93, 94, 96, 97, 98, 95,
	0, 0, 91, 92, 102, 103, 0, 0, 0, 0,
	0, 0, 0, 0, 90, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 110, 112, 105, 106, 107,
	0, 99, 100, 101, 104, 0, 202, 0, 86, 0,
	0, 0, 87, 0, 89, 88, 108, 109, 113, 111,
	115, 114, 0, 0, 0, 0, 85, 0, 0, 0,
	0, 93, 94, 96, 97, 98, 95, 0, 0, 91,
	92, 102, 103, 0, 0, 0, 0, 0, 0, 0,
	0, 90, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 110, 112, 105, 106, 107, 0, 99, 100,
	101, 104, 0, 0, 0, 86, 0, 0, 0, 87,
	0, 89, 88, 108, 109, 113, 111, 115, 114, 0,
	0, 0, 0, 85, 0, 0, 0, 0, 93, 94,
	96, 97, 98, 95, 0, 0, 91, 92, 102, 103,
	0, 0, 0, 0, 0, 0, 0, 0, 90, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 110,
	112, 105, 106, 107, 0, 99, 100, 101, 104, 0,
	0, 0, 164, 0, 0, 0, 87, 0, 89, 88,
	108, 109, 113, 111, 115, 114, 0, 0, 0, 0,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 91, 92, 102, 103, 0, 0, 0,
	0, 0, 0, 0, 0, 90, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 110, 112, 105, 106,
	107, 0, 99, 100, 101, 104, 0, 0, 0, 86,
	0, 0, 0, 87, 0, 89, 88, 108, 109, 113,
	111, 115, 114, 0, 0, 0, 0, 85, 0, 0,
	122, 54, 55, 88, 0, 33, 0, 50, 0, 0,
	91, 92, 102, 103, 0, 0, 0, 0, 0, 41,
	56, 57, 58, 0, 0, 0, 0, 91, 92, 102,
	103, 0, 84, 110, 112, 105, 106, 107, 0, 99,
	100, 101, 104, 0, 0, 0, 86, 42, 59, 0,
	87, 39, 89, 0, 43, 40, 99, 100, 101, 104,
	0, 0, 53, 86, 61, 63, 0, 87, 62, 89,
	117, 0, 36, 0, 0, 120, 34, 0, 0, 60,
	37, 54, 55, 0, 0, 33, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 41,
	56, 57, 58, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 37, 54, 55,
	0, 0, 33, 0, 0, 0, 0, 42, 59, 0,
	0, 39, 0, 0, 43, 40, 41, 56, 57, 58,
	0, 0, 53, 0, 61, 63, 0, 0, 62, 0,
	44, 0, 36, 0, 0, 0, 34, 350, 0, 60,
	0, 0, 0, 0, 42, 59, 0, 0, 39, 0,
	0, 43, 40, 0, 0, 0, 0, 0, 0, 53,
	0, 61, 63, 0, 0, 62, 0, 44, 0, 36,
	37, 54, 55, 34, 314, 33, 60, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 41,
	56, 57, 58, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 37, 54, 55,
	0, 0, 33, 0, 0, 0, 0, 42, 59, 0,
	0, 39, 0, 0, 43, 40, 41, 56, 57, 58,
	0, 0, 53, 0, 61, 63, 0, 0, 62, 0,
	44, 0, 36, 0, 0, 265, 34, 0, 0, 60,
	0, 0, 0, 0, 42, 59, 0, 0, 39, 0,
	0, 43, 40, 0, 228, 0, 0, 0, 0, 53,
	0, 61, 63, 0, 0, 62, 0, 44, 0, 36,
	37, 54, 55, 34, 0, 33, 60, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 41,
	56, 57, 58, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 37, 54, 55,
	0, 0, 33, 0, 0, 0, 0, 42, 59, 0,
	0, 39, 0, 0, 43, 40, 41, 56, 57, 58,
	0, 0, 53, 0, 61, 63, 0, 0, 62, 0,
	44, 0, 36, 0, 0, 208, 34, 0, 0, 60,
	0, 0, 0, 0, 42, 59, 0, 0, 39, 0,
	0, 43, 40, 0, 175, 0, 0, 0, 0, 53,
	0, 61, 63, 0, 0, 62, 0, 44, 0, 36,
	37, 54, 55, 34, 0, 33, 60, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 41,
	56, 57, 58, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 37, 54, 55,
	0, 0, 33, 0, 0, 0, 0, 42, 59, 0,
	0, 39, 0, 0, 43, 40, 41, 56, 57, 58,
	0, 0, 53, 0, 61, 63, 0, 0, 62, 0,
	44, 0, 36, 0, 0, 0, 34, 0, 0, 60,
	0, 0, 0, 0, 42, 59, 0, 0, 39, 0,
	0, 43, 40, 0, 0, 0, 0, 0, 0, 53,
	0, 61, 63, 0, 0, 62, 0, 376, 0, 36,
	37, 54, 55, 34, 0, 33, 60, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 41,
	56, 57, 58, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 37, 54, 55,
	0, 0, 33, 0, 0, 0, 0, 42, 59, 0,
	0, 39, 0, 0, 43, 40, 41, 56, 57, 58,
	0, 0, 53, 0, 61, 63, 0, 0, 62, 0,
	325, 0, 36, 0, 0, 0, 34, 0, 0, 60,
	0, 0, 0, 0, 42, 59, 0, 0, 39, 0,
	0, 43, 40, 0, 0, 0, 0, 0, 0, 53,
	0, 61, 63, 0, 0, 62, 0, 323, 0, 36,
	37, 54, 55, 34, 0, 33, 60, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 41,
	56, 57, 58, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 88, 108, 109, 113, 111, 0, 114,
	0, 0, 0, 0, 0, 0, 0, 42, 59, 0,
	0, 39, 0, 0, 43, 40, 0, 91, 92, 102,
	103, 0, 53, 0, 61, 63, 0, 0, 62, 0,
	262, 0, 36, 0, 0, 0, 34, 0, 0, 60,
	110, 112, 105, 106, 107, 0, 99, 100, 101, 104,
	37, 153, 55, 86, 0, 33, 0, 87, 0, 89,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 41,
	56, 57, 58, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 77, 54, 55,
	0, 0, 33, 0, 0, 0, 0, 42, 59, 0,
	0, 39, 0, 0, 43, 40, 41, 56, 57, 58,
	0, 0, 53, 0, 61, 63, 0, 0, 62, 0,
	44, 0, 36, 0, 0, 0, 34, 0, 0, 60,
	0, 0, 0, 0, 42, 59, 0, 0, 39, 0,
	0, 43, 40, 88, 108, 109, 113, 111, 0, 53,
	0, 61, 63, 0, 0, 62, 0, 44, 0, 36,
	0, 0, 0, 34, 0, 0, 60, 91, 92, 102,
	103, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	110, 112, 105, 106, 107, 0, 99, 100, 101, 104,
	0, 0, 0, 86, 0, 0, 0, 87, 0, 89,
}

var yyPact = [...]int{
	-68, -1000, 506, -68, -1000, -62, -62, -1000, -1000, -1000,
	-1000, -1000, -1000, 3556, 3556, 336, 236, 3903, 85, 79,
	309, -1000, -1000, -1000, 1177, -1000, -1000, 3556, 3146, 3556,
	235, -1000, -1000, 129, -46, 239, 3556, 52, -21, 78,
	74, 63, 54, -27, -62, -1000, -1000, -1000, -1000, -1000,
	328, 96, -1000, 3866, -1000, -1000, -1000, -1000, -1000, 3556,
	3556, 3556, 3556, 3556, -1000, -1000, -1000, -1000, -1000, 506,
	-62, -1000, 0, 2919, 2919, 233, -68, 53, 2986, 3556,
	3556, 282, 3556, 3556, 3556, 3556, 3556, 3483, 3556, 334,
	3556, -1000, -1000, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
	3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3556,
	3556, 3556, 3556, 3556, 3556, 3556, 2852, -68, 66, 574,
	3446, -8, 52, 2785, -62, 328, 51, -4, 3556, -62,
	-25, -1000, 239, 239, -3, 239, 232, -41, 2718, 3556,
	3373, 3556, 3556, 239, 392, -62, 239, 3556, 62, -1000,
	3556, 3556, -62, -1000, -24, 3053, -24, -24, -24, -24,
	-1000, -68, 208, 3556, 3556, 1110, 2651, 3556, -68, 2919,
	2919, 2584, 3120, 173, 1043, 3556, 192, -1000, 3053, 2919,
	2919, 2919, 2919, 2919, 2919, 192, 192, 192, 192, 192,
	192, 3137, 3137, 3137, 122, 122, 122, 122, 122, 122,
	3947, 3797, -68, 207, -62, 3556, -62, -68, 3776, 2517,
	3336, -62, 274, 169, 328, -1000, -51, -62, 327, -58,
	-58, 239, -58, -62, -4, -1000, 150, 976, 3556, 2450,
	2383, -9, -32, 326, 3556, -16, -61, 2316, 3556, 0,
	2919, 3556, 206, 292, 123, 118, -1000, 3556, -1000, 2249,
	205, 3556, 48, -1000, -1000, 3263, 909, 200, -1000, 2182,
	322, 196, -68, 2115, 3703, 3666, 2048, 268, -15, -1000,
	-1000, 252, 506, 229, 47, 59, -62, -45, -62, 3556,
	-1000, -38, 321, 46, -1000, -1000, 3226, 842, -1000, -1000,
	-1000, -1000, 3556, 9, -61, 239, 194, -62, 3556, 0,
	2919, -21, -1000, 193, 43, -1000, 15, -1000, 1981, -68,
	-1000, 3053, -1000, 775, -1000, -1000, 3556, -1000, -68, -1000,
	-1000, 187, -68, -68, 1914, -68, 1847, 3593, -33, -1000,
	-1000, 251, 3556, 185, -1000, -1000, -68, 250, -68, 228,
	226, 13, -62, -1000, -51, 239, -59, 239, -1000, 708,
	-1000, -1000, 3556, 641, 3556, 184, -48, -1000, 3556, 2919,
	220, -68, -1000, -1000, -1000, 183, -1000, 3556, 1780, 182,
	-1000, 180, 166, -68, 165, -68, -68, 1713, 164, -1000,
	-1000, -68, 1646, 56, -1000, -1000, -68, 159, -68, -68,
	218, 155, -58, 147, -62, -58, -1000, 3556, 1579, -1000,
	3556, 1512, -1000, -62, 1445, -68, 146, -1000, 1378, -1000,
	-1000, -1000, -1000, 145, -1000, 143, 142, -68, -1000, -1000,
	-68, -68, -1000, -1000, 141, 132, -68, -1000, -1000, 320,
	1311, -1000, 1244, -1000, 3556, 3556, 124, 287, -1000, -1000,
	-1000, -1000, 110, -1000, -1000, -1000, -1000, 107, 239, -1000,
	-1000, -61, 2919, 285, 216, -1000, -1000, -58, 104, 211,
	-68, -1000, -68, 94, 91, -1000, -1000,
}

var yyPgo = [...]int{
	0, 41, 390, 4, 329, 389, 388, 386, 384, 383,
	381, 8, 5, 379, 377, 10, 9, 6, 0, 21,
	79, 376, 39, 374, 373, 12, 372, 2, 371, 370,
	366, 361, 350, 349, 348, 344, 342, 343, 341, 7,
	1, 145, 48,
}

var yyR1 = [...]int{
	0, 1, 1, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 4,
	5, 6, 6, 6, 6, 7, 7, 7, 8, 8,
	8, 8, 8, 8, 8, 8, 8, 8, 8, 13,
	14, 14, 14, 14, 14, 15, 16, 16, 9, 10,
	10, 10, 10, 10, 11, 11, 12, 17, 17, 17,
	17, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 19, 19, 19, 20, 20,
	20, 20, 20, 20, 20, 21, 21, 22, 22, 23,
	23, 24, 25, 26, 26, 26, 26, 26, 26, 27,
	27, 27, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 29, 29, 30, 30, 30, 30, 30, 31,
	31, 31, 31, 32, 32, 32, 32, 32, 32, 32,
	32, 36, 36, 36, 36, 36, 36, 35, 35, 35,
	34, 34, 34, 34, 34, 34, 33, 33, 37, 37,
	38, 38, 38, 39, 39, 41, 41, 42, 40, 40,
	40, 40,
}

var yyR2 = [...]int{
	0, 1, 2, 2, 3, 0, 1, 1, 1, 2,
	2, 5, 13, 12, 9, 8, 6, 5, 6, 5,
	4, 6, 4, 1, 1, 1, 1, 1, 1, 1,
	4, 3, 3, 3, 3, 5, 7, 5, 4, 7,
	5, 6, 7, 7, 8, 7, 8, 8, 9, 6,
	0, 1, 1, 2, 2, 4, 3, 2, 7, 0,
	1, 1, 2, 2, 4, 4, 3, 0, 1, 4,
	4, 1, 1, 5, 3, 7, 8, 8, 9, 2,
	5, 7, 3, 5, 4, 5, 4, 4, 4, 4,
	4, 4, 4, 6, 8, 7, 3, 6, 10, 5,
	1, 1, 1, 1, 1, 0, 1, 4, 1, 3,
	2, 2, 5, 2, 6, 2, 5, 2, 3, 1,
	1, 3, 1, 2, 1, 1, 1, 1, 1, 0,
	3, 6, 6, 5, 5, 7, 8, 6, 5, 5,
	7, 8, 3, 2, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 0, 1,
	2, 1, 1, 0, 1, 1, 2, 1, 0, 2,
	1, 1,
}

var yyChk = [...]int{
	-1000, -1, -37, -2, -38, 79, -41, -42, 84, -3,
	-4, 38, 39, 10, 12, 28, 29, 48, 56, 57,
	-7, -8, -9, -13, -18, -5, -6, 13, 15, 44,
	45, -23, -26, 9, 80, -22, 76, 4, -25, 55,
	59, 23, 51, 58, 74, -28, -29, -30, -31, -32,
	11, -17, -24, 66, 5, 6, 24, 25, 26, 52,
	83, 68, 72, 69, -36, -35, -34, -33, -37, -38,
	-41, -42, -17, -18, -18, 4, 74, 4, -18, 76,
	76, 14, 60, 53, 62, 27, 76, 80, 16, 82,
	52, 40, 41, 32, 33, 37, 34, 35, 36, 69,
	70, 71, 42, 43, 72, 65, 66, 67, 17, 18,
	63, 20, 64, 19, 22, 21, -18, 74, -19, -18,
	79, -4, 4, -18, 74, 76, 4, 81, -39, -41,
	-20, 4, 69, -22, 58, 49, 50, 80, -18, 76,
	80, 76, 76, 76, 76, 74, 80, -39, -19, 4,
	60, 53, 78, 5, -18, -18, -18, -18, -18, -18,
	-3, 74, -1, 76, 76, -18, -18, 13, 74, -18,
	-18, -18, -18, -17, -18, 61, -18, 4, -18, -18,
	-18, -18, -18, -18, -18, -18, -18, -18, -18, -18,
	-18, -18, -18, -18, -18, -18, -18, -18, -18, -18,
	-18, -18, 74, -1, -41, 16, 78, 74, 79, -18,
	79, 74, -39, -19, 76, -22, -17, 74, 82, -20,
	-20, 80, -20, 74, 81, 77, -17, -18, 61, -18,
	-18, -20, -20, 54, -39, -20, -27, -18, 60, -17,
	-18, -39, -1, 75, -17, -17, 77, 78, 77, -18,
	-1, 61, 8, 77, 81, 61, -18, -1, 75, -18,
	-39, -1, 74, -18, 79, 79, -18, -39, -14, -16,
	-15, 47, 46, 77, 8, -19, 78, -40, -41, -39,
	4, -20, -39, 8, 77, 81, 61, -18, 77, 77,
	77, 77, 78, 4, -27, 81, -40, 78, 61, -17,
	-18, -25, 75, 30, 8, 77, 8, 77, -18, 74,
	75, -18, 77, -18, 81, 81, 61, 75, 74, 4,
	75, -1, 74, 74, -18, 74, -18, 79, -10, -12,
	-11, 47, 46, -39, -15, -16, 61, -3, 74, 77,
	77, 8, -41, 81, -17, 81, -21, 4, 77, -18,
	81, 81, 61, -18, 78, -40, -20, 75, -39, -18,
	4, 74, 77, 77, 77, -1, 81, 61, -18, -1,
	75, -1, -1, 74, -1, 74, 74, -18, -39, -11,
	-12, 61, -18, -17, 75, -1, 61, -1, 74, 74,
	77, -40, -20, -39, 78, -20, 81, 61, -18, 77,
	78, -18, 75, 74, -18, 74, -1, 75, -18, 81,
	75, 75, 75, -1, 75, -1, -1, 74, 75, -1,
	61, 61, -1, 75, -1, -1, 74, 75, 75, -39,
	-18, 81, -18, 77, -39, 61, -1, 75, 81, 75,
	75, 75, -1, -1, -1, 75, 75, -1, 4, 81,
	77, -27, -18, 75, 31, 75, 75, -20, -40, 31,
	74, 75, 74, -1, -1, 75, 75,
}

var yyDef = [...]int{
	178, -2, -2, 178, 179, 182, 181, 185, 187, 3,
	6, 7, 8, 67, 0, 0, 0, 0, 0, 0,
	23, 24, 25, 26, -2, 28, 29, 0, -2, 0,
	0, 71, 72, 0, 183, 0, 0, 122, 120, 0,
	0, 0, 0, 0, 183, 100, 101, 102, 103, 104,
	105, 0, 119, 0, 124, 125, 126, 127, 128, 0,
	0, 0, 0, 0, 149, 150, 151, 152, 2, -2,
	180, 186, 9, 68, 10, 0, 178, 122, 0, 0,
	0, 0, 0, 0, 0, 0, 67, 0, 0, 0,
	0, 153, 154, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 178, 0, 68,
	0, 0, -2, 0, 183, 105, 0, -2, 67, 184,
	0, 108, 0, 0, 0, 0, 0, 0, 0, 67,
	0, 0, 0, 0, 0, 183, 0, 129, 0, 106,
	67, 0, 183, 123, 144, 143, 145, 146, 147, 148,
	4, 178, 0, 67, 67, 0, 0, 0, 178, 31,
	33, 0, 74, 0, 0, 0, 96, 121, 142, 155,
	156, 157, 158, 159, 160, 161, 162, 163, 164, 165,
	166, 167, 168, 169, 170, 171, 172, 173, 174, 175,
	176, 177, 178, 0, 181, 0, 183, 178, 0, 0,
	0, 183, 50, 0, 105, 118, 188, 183, 0, 110,
	111, 0, 113, 183, 117, 82, 0, 0, 0, 0,
	0, 0, 0, 0, 129, 0, 188, 0, 67, 32,
	34, 0, 0, 0, 0, 0, 20, 0, 22, 0,
	0, 0, 0, 86, 88, 0, 0, 0, 38, 0,
	0, 0, 178, 0, 0, 0, 0, 59, 183, 51,
	52, 0, -2, 0, 0, 0, -2, 0, 190, 67,
	109, 0, 0, 0, 84, 87, 0, 0, 89, 90,
	91, 92, 0, 0, 188, 0, 0, -2, 0, 30,
	69, -2, 11, 0, 0, -2, 0, -2, 0, 178,
	37, 73, 85, 0, 138, 139, 0, 35, 178, 107,
	40, 0, 178, 178, 0, 178, 0, 0, 183, 60,
	61, 0, 67, 0, 53, 54, -2, 0, 178, 0,
	0, 0, -2, 80, 188, 0, 183, 0, 83, 0,
	133, 134, 0, 0, 0, 0, 0, 99, 0, 130,
	0, 178, -2, -2, 21, 0, 137, 0, 0, 0,
	41, 0, 0, 178, 0, 178, 178, 0, 0, 62,
	63, 178, 68, 0, 49, 56, 178, 0, 178, 178,
	0, 0, 112, 0, 183, 115, 132, 0, 0, 93,
	0, 0, 97, 183, 0, 178, 0, 36, 0, 140,
	39, 42, 43, 0, 45, 0, 0, 178, 58, 66,
	178, 178, 55, 75, 0, 0, 178, 81, 114, 0,
	0, 135, 0, 95, 129, 0, 0, 15, 141, 44,
	46, 47, 0, 64, 65, 76, 77, 0, 0, 136,
	94, 188, 131, 14, 0, 48, 78, 116, 0, 0,
	178, 98, 178, 0, 0, 13, 12,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	84, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 83, 3, 3, 3, 71, 72, 3,
	76, 77, 69, 65, 78, 66, 82, 70, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 61, 79,
	63, 60, 64, 62, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 80, 3, 81, 68, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 74, 67, 75,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 73,
}

var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:116
		{
			yyVAL.compstmt = nil
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:120
		{
			yyVAL.compstmt = yyDollar[1].stmts
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:126
		{
			if yyDollar[2].stmt != nil {
				yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyDollar[2].stmt}}
			}
			if l, ok := yylex.(*Lexer); ok {
				l.stmt = yyVAL.stmts
			}
		}
	case 4:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:135
		{
			if yyDollar[3].stmt != nil {
				if yyDollar[1].stmts == nil {
					yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyDollar[3].stmt}}
				} else {
					stmts := yyDollar[1].stmts.(*ast.StmtsStmt)
					stmts.Stmts = append(stmts.Stmts, yyDollar[3].stmt)
				}
				if l, ok := yylex.(*Lexer); ok {
					l.stmt = yyVAL.stmts
				}
			}
		}
	case 5:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:151
		{
			yyVAL.stmt = nil
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:155
		{
			yyVAL.stmt = yyDollar[1].stmt_var_or_lets
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:159
		{
			yyVAL.stmt = &ast.BreakStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:164
		{
			yyVAL.stmt = &ast.ContinueStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:169
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: yyDollar[2].exprs}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:174
		{
			yyVAL.stmt = &ast.ThrowStmt{Expr: yyDollar[2].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 11:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:179
		{
			yyVAL.stmt = &ast.ModuleStmt{Name: yyDollar[2].tok.Lit, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 12:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.go.y:184
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt, Finally: yyDollar[12].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 13:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.go.y:189
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt, Finally: yyDollar[11].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 14:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:194
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 15:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:199
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 16:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:204
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, VarArg: true, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 17:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:209
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 18:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:214
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, VarArg: true, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].expr.Position())
		}
	case 19:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:219
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 20:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:224
		{
			yyVAL.stmt = &ast.DeleteStmt{Item: yyDollar[3].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 21:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:229
		{
			yyVAL.stmt = &ast.DeleteStmt{Item: yyDollar[3].expr, Key: yyDollar[5].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:234
		{
			yyVAL.stmt = &ast.CloseStmt{Expr: yyDollar[3].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:239
		{
			yyVAL.stmt = yyDollar[1].stmt_if
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:243
		{
			yyVAL.stmt = yyDollar[1].stmt_for
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:247
		{
			yyVAL.stmt = yyDollar[1].stmt_switch
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:251
		{
			yyVAL.stmt = yyDollar[1].stmt_select
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:255
		{
			yyVAL.stmt = &ast.ExprStmt{Expr: yyDollar[1].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].expr.Position())
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:262
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_var
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:266
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_lets
		}
	case 30:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:272
		{
			yyVAL.stmt_var = &ast.VarStmt{Names: yyDollar[2].expr_idents, Exprs: yyDollar[4].exprs}
			yyVAL.stmt_var.SetPosition(yyDollar[1].tok.Position())
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:279
		{
			yyVAL.stmt_lets = &ast.LetsStmt{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{yyDollar[3].expr}}
			yyVAL.stmt_lets.SetPosition(yyDollar[1].expr.Position())
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:284
		{
			if len(yyDollar[1].exprs) == 2 && len(yyDollar[3].exprs) == 1 {
				if _, ok := yyDollar[3].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_lets = &ast.LetMapItemStmt{LHSS: yyDollar[1].exprs, RHS: yyDollar[3].exprs[0]}
				} else {
					yyVAL.stmt_lets = &ast.LetsStmt{LHSS: yyDollar[1].exprs, RHSS: yyDollar[3].exprs}
				}
			} else {
				yyVAL.stmt_lets = &ast.LetsStmt{LHSS: yyDollar[1].exprs, RHSS: yyDollar[3].exprs}
			}
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:296
		{
			yyVAL.stmt_lets = &ast.ChanStmt{LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
			yyVAL.stmt_lets.SetPosition(yyDollar[1].expr.Position())
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:301
		{
			if len(yyDollar[1].exprs) == 2 {
				chanStmt := &ast.ChanStmt{LHS: yyDollar[1].exprs[0].(ast.Expr), OkExpr: yyDollar[1].exprs[1].(ast.Expr), RHS: yyDollar[3].expr}
				yyVAL.stmt_lets = chanStmt
				yyVAL.stmt_lets.SetPosition(chanStmt.LHS.Position())
			} else if len(yyDollar[1].exprs) < 2 {
				yylex.Error("missing expressions on left side of channel operator")
				yyVAL.stmt_lets = &ast.ChanStmt{RHS: yyDollar[3].expr}
				yyVAL.stmt_lets.SetPosition(yyDollar[2].tok.Position())
			}
		}
	case 35:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:315
		{
			yyVAL.stmt_if = &ast.IfStmt{If: yyDollar[2].expr, Then: yyDollar[4].compstmt, Else: nil}
			yyVAL.stmt_if.SetPosition(yyDollar[1].tok.Position())
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:320
		{
			ifStmt := yyDollar[1].stmt_if.(*ast.IfStmt)
			ifStmt.ElseIf = append(ifStmt.ElseIf, &ast.IfStmt{If: yyDollar[4].expr, Then: yyDollar[6].compstmt})
		}
	case 37:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:325
		{
			ifStmt := yyDollar[1].stmt_if.(*ast.IfStmt)
			if ifStmt.Else != nil {
				yylex.Error("multiple else statement")
			}
			ifStmt.Else = yyDollar[4].compstmt
		}
	case 38:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:335
		{
			yyVAL.stmt_for = &ast.LoopStmt{Stmt: yyDollar[3].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 39:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:340
		{
			if len(yyDollar[2].expr_idents) < 1 {
				yylex.Error("missing identifier")
			} else if len(yyDollar[2].expr_idents) > 2 {
				yylex.Error("too many identifiers")
			} else {
				yyVAL.stmt_for = &ast.ForStmt{Vars: yyDollar[2].expr_idents, Value: yyDollar[4].expr, Stmt: yyDollar[6].compstmt}
				yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
			}
		}
	case 40:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:351
		{
			yyVAL.stmt_for = &ast.LoopStmt{Expr: yyDollar[2].expr, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 41:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:356
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt: yyDollar[5].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 42:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:361
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr3: yyDollar[4].expr, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 43:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:366
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyDollar[3].expr, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 44:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:371
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyDollar[3].expr, Expr3: yyDollar[5].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 45:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:376
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 46:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:381
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr3: yyDollar[5].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 47:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:386
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr2: yyDollar[4].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 48:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:391
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr2: yyDollar[4].expr, Expr3: yyDollar[6].expr, Stmt: yyDollar[8].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 49:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:398
		{
			yyVAL.stmt_select = &ast.SelectStmt{Body: yyDollar[4].stmt_select_cases}
			yyVAL.stmt_select.SetPosition(yyDollar[1].tok.Position())
		}
	case 50:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:405
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:409
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{Default: yyDollar[1].stmt_select_default}
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:413
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{Cases: []ast.Stmt{yyDollar[1].stmt_select_case}}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:417
		{
			selectStmt := yyDollar[1].stmt_select_cases.(*ast.SelectBodyStmt)
			selectStmt.Cases = append(selectStmt.Cases, yyDollar[2].stmt_select_case)
			yyVAL.stmt_select_cases = selectStmt
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:423
		{
			selectStmt := yyVAL.stmt_select_cases.(*ast.SelectBodyStmt)
			if selectStmt.Default != nil {
				yylex.Error("multiple default statement")
			}
			selectStmt.Default = yyDollar[2].stmt_select_default
			yyVAL.stmt_select_cases = selectStmt
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:434
		{
			if yyDollar[2].stmt == nil {
				yylex.Error("syntax error: unexpected ':'")
			}
			yyVAL.stmt_select_case = &ast.SelectCaseStmt{Expr: yyDollar[2].stmt, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_select_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:444
		{
			yyVAL.stmt_select_default = yyDollar[3].compstmt
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:448
		{
			yyVAL.stmt_select_default = &ast.SelectCaseStmt{}
		}
	case 58:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:454
		{
			switchStmt := yyDollar[5].stmt_switch_cases.(*ast.SwitchStmt)
			switchStmt.Expr = yyDollar[2].expr
			yyVAL.stmt_switch = switchStmt
			yyVAL.stmt_switch.SetPosition(yyDollar[1].tok.Position())
		}
	case 59:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:463
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:467
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{Default: yyDollar[1].stmt_switch_default}
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:471
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{Cases: []ast.Stmt{yyDollar[1].stmt_switch_case}}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:475
		{
			switchStmt := yyDollar[1].stmt_switch_cases.(*ast.SwitchStmt)
			switchStmt.Cases = append(switchStmt.Cases, yyDollar[2].stmt_switch_case)
			yyVAL.stmt_switch_cases = switchStmt
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:481
		{
			switchStmt := yyDollar[1].stmt_switch_cases.(*ast.SwitchStmt)
			if switchStmt.Default != nil {
				yylex.Error("multiple default statement")
			}
			switchStmt.Default = yyDollar[2].stmt_switch_default
		}
	case 64:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:491
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: []ast.Expr{yyDollar[2].expr}, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 65:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:496
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: yyDollar[2].exprs, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:503
		{
			yyVAL.stmt_switch_default = yyDollar[3].compstmt
		}
	case 67:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:510
		{
			yyVAL.exprs = nil
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:514
		{
			yyVAL.exprs = []ast.Expr{yyDollar[1].expr}
		}
	case 69:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:518
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr)
		}
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:525
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr_ident)
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:534
		{
			yyVAL.expr = yyDollar[1].expr_member_or_ident
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:538
		{
			yyVAL.expr = yyDollar[1].expr_literals
		}
	case 73:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:542
		{
			yyVAL.expr = &ast.TernaryOpExpr{Expr: yyDollar[1].expr, LHS: yyDollar[3].expr, RHS: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:547
		{
			yyVAL.expr = &ast.NilCoalescingOpExpr{LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 75:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:552
		{
			yyVAL.expr = &ast.FuncExpr{Params: yyDollar[3].expr_idents, Stmt: yyDollar[6].compstmt}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 76:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:557
		{
			yyVAL.expr = &ast.FuncExpr{Params: yyDollar[3].expr_idents, Stmt: yyDollar[7].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 77:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:562
		{
			yyVAL.expr = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].expr_idents, Stmt: yyDollar[7].compstmt}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 78:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:567
		{
			yyVAL.expr = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].expr_idents, Stmt: yyDollar[8].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:572
		{
			yyVAL.expr = &ast.ArrayExpr{}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 80:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:577
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyDollar[3].exprs}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 81:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:582
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyDollar[5].exprs, TypeData: &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyDollar[2].type_data, Dimensions: yyDollar[1].slice_count}}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:587
		{
			yyVAL.expr = &ast.ParenExpr{SubExpr: yyDollar[2].expr}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 83:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:592
		{
			yyVAL.expr = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 84:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:597
		{
			yyVAL.expr = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 85:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:602
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 86:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:607
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 87:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:612
		{
			yyVAL.expr = &ast.ItemExpr{Item: yyDollar[1].expr_ident, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr_ident.Position())
		}
	case 88:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:617
		{
			yyVAL.expr = &ast.ItemExpr{Item: yyDollar[1].expr, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 89:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:622
		{
			yyVAL.expr = &ast.LenExpr{Expr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 90:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:627
		{
			yyVAL.expr = &ast.ImportExpr{Name: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 91:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:632
		{
			if yyDollar[3].type_data.Kind == ast.TypeDefault {
				yyDollar[3].type_data.Kind = ast.TypePtr
				yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data}
			} else {
				yyVAL.expr = &ast.MakeExpr{TypeData: &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyDollar[3].type_data}}
			}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 92:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:642
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 93:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:647
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data, LenExpr: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 94:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:652
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data, LenExpr: yyDollar[5].expr, CapExpr: yyDollar[7].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 95:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:657
		{
			yyVAL.expr = &ast.MakeTypeExpr{Name: yyDollar[4].tok.Lit, Type: yyDollar[6].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:662
		{
			yyVAL.expr = &ast.IncludeExpr{ItemExpr: yyDollar[1].expr, ListExpr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 97:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:667
		{
			yyDollar[4].expr_map.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: &ast.TypeStruct{Name: "interface"}, SubType: &ast.TypeStruct{Name: "interface"}}
			yyVAL.expr = yyDollar[4].expr_map
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 98:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.go.y:673
		{
			yyDollar[8].expr_map.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyDollar[3].type_data, SubType: yyDollar[5].type_data}
			yyVAL.expr = yyDollar[8].expr_map
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 99:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:679
		{
			yyVAL.expr = yyDollar[3].expr_map
			yyVAL.expr.SetPosition(yyDollar[3].expr_map.Position())
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:684
		{
			yyVAL.expr = yyDollar[1].expr_slice
			yyVAL.expr.SetPosition(yyDollar[1].expr_slice.Position())
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:689
		{
			yyVAL.expr = yyDollar[1].expr_chan
			yyVAL.expr.SetPosition(yyDollar[1].expr_chan.Position())
		}
	case 105:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:698
		{
			yyVAL.expr_idents = []string{}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:702
		{
			yyVAL.expr_idents = []string{yyDollar[1].tok.Lit}
		}
	case 107:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:706
		{
			if len(yyDollar[1].expr_idents) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.expr_idents = append(yyDollar[1].expr_idents, yyDollar[4].tok.Lit)
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:715
		{
			yyVAL.type_data = &ast.TypeStruct{Name: yyDollar[1].tok.Lit}
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:719
		{
			if yyDollar[1].type_data.Kind != ast.TypeDefault {
				yylex.Error("not type default")
			} else {
				yyDollar[1].type_data.Env = append(yyDollar[1].type_data.Env, yyDollar[1].type_data.Name)
				yyDollar[1].type_data.Name = yyDollar[3].tok.Lit
			}
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:728
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypePtr
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyDollar[2].type_data}
			}
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:737
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypeSlice
				yyDollar[2].type_data.Dimensions = yyDollar[1].slice_count
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyDollar[2].type_data, Dimensions: yyDollar[1].slice_count}
			}
		}
	case 112:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:747
		{
			yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyDollar[3].type_data, SubType: yyDollar[5].type_data}
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:751
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypeChan
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeChan, SubType: yyDollar[2].type_data}
			}
		}
	case 114:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:760
		{
			yyVAL.type_data = yyDollar[4].type_data_struct
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:766
		{
			yyVAL.type_data_struct = &ast.TypeStruct{Kind: ast.TypeStructType, StructNames: []string{yyDollar[1].tok.Lit}, StructTypes: []*ast.TypeStruct{yyDollar[2].type_data}}
		}
	case 116:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:770
		{
			if yyDollar[1].type_data_struct == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.type_data_struct.StructNames = append(yyVAL.type_data_struct.StructNames, yyDollar[4].tok.Lit)
			yyVAL.type_data_struct.StructTypes = append(yyVAL.type_data_struct.StructTypes, yyDollar[5].type_data)
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:780
		{
			yyVAL.slice_count = 1
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:784
		{
			yyVAL.slice_count = yyDollar[3].slice_count + 1
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:790
		{
			yyVAL.expr_member_or_ident = yyDollar[1].expr_member
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:794
		{
			yyVAL.expr_member_or_ident = yyDollar[1].expr_ident
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:800
		{
			yyVAL.expr_member = &ast.MemberExpr{Expr: yyDollar[1].expr, Name: yyDollar[3].tok.Lit}
			yyVAL.expr_member.SetPosition(yyDollar[1].expr.Position())
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:807
		{
			yyVAL.expr_ident = &ast.IdentExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr_ident.SetPosition(yyDollar[1].tok.Position())
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:814
		{
			num, err := toNumber("-" + yyDollar[2].tok.Lit)
			if err != nil {
				yylex.Error("invalid number: -" + yyDollar[2].tok.Lit)
			}
			yyVAL.expr_literals = &ast.LiteralExpr{Literal: num}
			yyVAL.expr_literals.SetPosition(yyDollar[2].tok.Position())
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:823
		{
			num, err := toNumber(yyDollar[1].tok.Lit)
			if err != nil {
				yylex.Error("invalid number: " + yyDollar[1].tok.Lit)
			}
			yyVAL.expr_literals = &ast.LiteralExpr{Literal: num}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:832
		{
			yyVAL.expr_literals = &ast.LiteralExpr{Literal: stringToValue(yyDollar[1].tok.Lit)}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:837
		{
			yyVAL.expr_literals = &ast.LiteralExpr{Literal: trueValue}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:842
		{
			yyVAL.expr_literals = &ast.LiteralExpr{Literal: falseValue}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:847
		{
			yyVAL.expr_literals = &ast.LiteralExpr{Literal: nilValue}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 129:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:854
		{
			yyVAL.expr_map = &ast.MapExpr{}
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:858
		{
			yyVAL.expr_map = &ast.MapExpr{Keys: []ast.Expr{yyDollar[1].expr}, Values: []ast.Expr{yyDollar[3].expr}}
		}
	case 131:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:862
		{
			if yyDollar[1].expr_map.Keys == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.expr_map.Keys = append(yyVAL.expr_map.Keys, yyDollar[4].expr)
			yyVAL.expr_map.Values = append(yyVAL.expr_map.Values, yyDollar[6].expr)
		}
	case 132:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:872
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 133:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:876
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: nil}
		}
	case 134:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:880
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr_ident, Begin: nil, End: yyDollar[4].expr}
		}
	case 135:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:884
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr_ident, End: yyDollar[4].expr, Cap: yyDollar[6].expr}
		}
	case 136:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:888
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: yyDollar[5].expr, Cap: yyDollar[7].expr}
		}
	case 137:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:892
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 138:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:896
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr, Begin: yyDollar[3].expr, End: nil}
		}
	case 139:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:900
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr, Begin: nil, End: yyDollar[4].expr}
		}
	case 140:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:904
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr, End: yyDollar[4].expr, Cap: yyDollar[6].expr}
		}
	case 141:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:908
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr, Begin: yyDollar[3].expr, End: yyDollar[5].expr, Cap: yyDollar[7].expr}
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:914
		{
			yyVAL.expr_chan = &ast.ChanExpr{LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
		}
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:918
		{
			yyVAL.expr_chan = &ast.ChanExpr{RHS: yyDollar[2].expr}
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:924
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "-", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:929
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "!", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:934
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "^", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:939
		{
			yyVAL.expr = &ast.AddrExpr{Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:944
		{
			yyVAL.expr = &ast.DerefExpr{Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:951
		{
			yyVAL.expr = &ast.OpExpr{Op: yyDollar[1].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:956
		{
			yyVAL.expr = &ast.OpExpr{Op: yyDollar[1].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:961
		{
			yyVAL.expr = &ast.OpExpr{Op: yyDollar[1].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:966
		{
			yyVAL.expr = &ast.OpExpr{Op: yyDollar[1].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:973
		{
			rhs := &ast.OpExpr{Op: &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "+", RHS: oneLiteral}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:981
		{
			rhs := &ast.OpExpr{Op: &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "-", RHS: oneLiteral}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:989
		{
			rhs := &ast.OpExpr{Op: &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "+", RHS: yyDollar[3].expr}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:997
		{
			rhs := &ast.OpExpr{Op: &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "-", RHS: yyDollar[3].expr}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1005
		{
			rhs := &ast.OpExpr{Op: &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "|", RHS: yyDollar[3].expr}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1013
		{
			rhs := &ast.OpExpr{Op: &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "*", RHS: yyDollar[3].expr}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1021
		{
			rhs := &ast.OpExpr{Op: &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "/", RHS: yyDollar[3].expr}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1029
		{
			rhs := &ast.OpExpr{Op: &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "&", RHS: yyDollar[3].expr}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1040
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "*", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1045
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "/", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1050
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "%", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1055
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "<<", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1060
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: ">>", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1065
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "&", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1072
		{
			yyVAL.expr = &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "+", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1077
		{
			yyVAL.expr = &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "-", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1082
		{
			yyVAL.expr = &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "|", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1089
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: "==", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1094
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: "!=", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1099
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: "<", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1104
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: "<=", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1109
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: ">", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1114
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: ">=", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1121
		{
			yyVAL.expr = &ast.BinaryOperator{LHS: yyDollar[1].expr, Operator: "&&", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1126
		{
			yyVAL.expr = &ast.BinaryOperator{LHS: yyDollar[1].expr, Operator: "||", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	}
	goto yystack /* stack new state and value */
}
