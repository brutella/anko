
0: shift/reduce conflict (shift 5(0), red'n 180(0)) on ';'
0: shift/reduce conflict (shift 8(0), red'n 180(0)) on '\n'
state 0
	$accept: .compstmt $end 
	opt_term: .    (180)

	';'  shift 5
	'\n'  shift 8
	.  reduce 180 (src line 1144)

	compstmt  goto 1
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	newlines  goto 6
	newline  goto 7

state 1
	$accept:  compstmt.$end 

	$end  accept
	.  error


 2: reduce/reduce conflict  (red'ns 1 and 5) on $end
 2: reduce/reduce conflict  (red'ns 1 and 5) on CASE
 2: reduce/reduce conflict  (red'ns 1 and 5) on DEFAULT
 2: reduce/reduce conflict  (red'ns 1 and 5) on '}'
 2: reduce/reduce conflict  (red'ns 1 and 5) on '\n'
state 2
	compstmt:  opt_term.    (1)
	stmts:  opt_term.stmt 
	stmt: .    (5)
	exprs: .    (69)

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	RETURN  shift 13
	VAR  shift 50
	THROW  shift 14
	IF  shift 27
	FOR  shift 28
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MODULE  shift 15
	TRY  shift 16
	BREAK  shift 11
	CONTINUE  shift 12
	SWITCH  shift 29
	SELECT  shift 30
	GO  shift 17
	MAKE  shift 42
	OPCHAN  shift 59
	EQOPCHAN  reduce 69 (src line 520)
	LEN  shift 39
	DELETE  shift 18
	CLOSE  shift 19
	MAP  shift 43
	IMPORT  shift 40
	COLASSIGN  reduce 69 (src line 520)
	ASSIGN  reduce 69 (src line 520)
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	','  reduce 69 (src line 520)
	';'  reduce 5 (src line 151)
	'['  shift 34
	'!'  shift 60
	.  reduce 1 (src line 116)

	stmt  goto 9
	stmt_var_or_lets  goto 10
	stmt_var  goto 25
	stmt_lets  goto 26
	stmt_if  goto 20
	stmt_for  goto 21
	stmt_switch  goto 22
	stmt_select  goto 23
	exprs  goto 51
	expr  goto 24
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

3: shift/reduce conflict (shift 8(0), red'n 180(0)) on '\n'
state 3
	compstmt:  stmts.opt_term 
	stmts:  stmts.term stmt 
	opt_term: .    (180)

	';'  shift 5
	'\n'  shift 8
	.  reduce 180 (src line 1144)

	opt_term  goto 68
	term  goto 69
	newlines  goto 6
	newline  goto 7

state 4
	opt_term:  term.    (181)

	.  reduce 181 (src line 1146)


5: shift/reduce conflict (shift 8(0), red'n 184(0)) on '\n'
state 5
	term:  ';'.newlines 
	term:  ';'.    (184)

	'\n'  shift 8
	.  reduce 184 (src line 1151)

	newlines  goto 70
	newline  goto 7

6: shift/reduce conflict (shift 8(0), red'n 183(0)) on '\n'
state 6
	term:  newlines.    (183)
	newlines:  newlines.newline 

	'\n'  shift 8
	.  reduce 183 (src line 1150)

	newline  goto 71

state 7
	newlines:  newline.    (187)

	.  reduce 187 (src line 1157)


state 8
	newline:  '\n'.    (189)

	.  reduce 189 (src line 1161)


state 9
	stmts:  opt_term stmt.    (3)

	.  reduce 3 (src line 126)


state 10
	stmt:  stmt_var_or_lets.    (6)

	.  reduce 6 (src line 156)


state 11
	stmt:  BREAK.    (7)

	.  reduce 7 (src line 160)


state 12
	stmt:  CONTINUE.    (8)

	.  reduce 8 (src line 165)


state 13
	stmt:  RETURN.exprs 
	exprs: .    (69)

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  reduce 69 (src line 520)

	exprs  goto 72
	expr  goto 73
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 14
	stmt:  THROW.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 74
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 15
	stmt:  MODULE.IDENT '{' compstmt '}' 

	IDENT  shift 75
	.  error


state 16
	stmt:  TRY.'{' compstmt '}' CATCH IDENT '{' compstmt '}' FINALLY '{' compstmt '}' 
	stmt:  TRY.'{' compstmt '}' CATCH '{' compstmt '}' FINALLY '{' compstmt '}' 
	stmt:  TRY.'{' compstmt '}' CATCH IDENT '{' compstmt '}' 
	stmt:  TRY.'{' compstmt '}' CATCH '{' compstmt '}' 

	'{'  shift 76
	.  error


state 17
	stmt:  GO.IDENT '(' exprs VARARG ')' 
	stmt:  GO.IDENT '(' exprs ')' 
	stmt:  GO.expr '(' exprs VARARG ')' 
	stmt:  GO.expr '(' exprs ')' 

	IDENT  shift 77
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 78
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 18
	stmt:  DELETE.'(' expr ')' 
	stmt:  DELETE.'(' expr ',' expr ')' 

	'('  shift 79
	.  error


state 19
	stmt:  CLOSE.'(' expr ')' 

	'('  shift 80
	.  error


state 20
	stmt:  stmt_if.    (23)
	stmt_if:  stmt_if.ELSE IF expr '{' compstmt '}' 
	stmt_if:  stmt_if.ELSE '{' compstmt '}' 

	ELSE  shift 81
	.  reduce 23 (src line 240)


state 21
	stmt:  stmt_for.    (24)

	.  reduce 24 (src line 244)


state 22
	stmt:  stmt_switch.    (25)

	.  reduce 25 (src line 248)


state 23
	stmt:  stmt_select.    (26)

	.  reduce 26 (src line 252)


24: shift/reduce conflict (shift 83(2), red'n 70(0)) on EQOPCHAN
24: shift/reduce conflict (shift 116(0), red'n 70(0)) on COLASSIGN
24: shift/reduce conflict (shift 117(0), red'n 70(0)) on ASSIGN
state 24
	stmt:  expr.    (27)
	stmt_lets:  expr.op_assign expr 
	stmt_lets:  expr.EQOPCHAN expr 
	exprs:  expr.    (70)
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	EQOPCHAN  shift 83
	COLASSIGN  shift 116
	ASSIGN  shift 117
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	','  reduce 70 (src line 525)
	'['  shift 87
	'.'  shift 89
	.  reduce 27 (src line 256)

	op_assign  goto 82

state 25
	stmt_var_or_lets:  stmt_var.    (28)

	.  reduce 28 (src line 262)


state 26
	stmt_var_or_lets:  stmt_lets.    (29)

	.  reduce 29 (src line 267)


state 27
	stmt_if:  IF.expr '{' compstmt '}' 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 118
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

 28: reduce/reduce conflict  (red'ns 107 and 69) on ','
state 28
	stmt_for:  FOR.'{' compstmt '}' 
	stmt_for:  FOR.expr_idents IN expr '{' compstmt '}' 
	stmt_for:  FOR.expr '{' compstmt '}' 
	stmt_for:  FOR.';' ';' '{' compstmt '}' 
	stmt_for:  FOR.';' ';' expr '{' compstmt '}' 
	stmt_for:  FOR.';' expr ';' '{' compstmt '}' 
	stmt_for:  FOR.';' expr ';' expr '{' compstmt '}' 
	stmt_for:  FOR.stmt_var_or_lets ';' ';' '{' compstmt '}' 
	stmt_for:  FOR.stmt_var_or_lets ';' ';' expr '{' compstmt '}' 
	stmt_for:  FOR.stmt_var_or_lets ';' expr ';' '{' compstmt '}' 
	stmt_for:  FOR.stmt_var_or_lets ';' expr ';' expr '{' compstmt '}' 
	expr_idents: .    (107)
	exprs: .    (69)

	IDENT  shift 124
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	VAR  shift 50
	IN  reduce 107 (src line 709)
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 119
	'('  shift 36
	';'  shift 122
	'['  shift 34
	'!'  shift 60
	.  reduce 69 (src line 520)

	stmt_var_or_lets  goto 123
	stmt_var  goto 25
	stmt_lets  goto 26
	exprs  goto 51
	expr  goto 121
	expr_idents  goto 120
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 29
	stmt_switch:  SWITCH.expr '{' opt_newlines stmt_switch_cases opt_newlines '}' 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 125
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 30
	stmt_select:  SELECT.'{' opt_newlines stmt_select_cases opt_newlines '}' 

	'{'  shift 126
	.  error


state 31
	expr:  expr_member_or_ident.    (73)

	.  reduce 73 (src line 544)


state 32
	expr:  expr_literals.    (74)

	.  reduce 74 (src line 549)


state 33
	expr:  FUNC.'(' expr_idents ')' '{' compstmt '}' 
	expr:  FUNC.'(' expr_idents VARARG ')' '{' compstmt '}' 
	expr:  FUNC.IDENT '(' expr_idents ')' '{' compstmt '}' 
	expr:  FUNC.IDENT '(' expr_idents VARARG ')' '{' compstmt '}' 

	IDENT  shift 128
	'('  shift 127
	.  error


34: shift/reduce conflict (shift 129(0), red'n 185(0)) on ']'
34: shift/reduce conflict (shift 8(0), red'n 185(0)) on '\n'
state 34
	expr:  '['.']' 
	expr:  '['.opt_newlines exprs opt_comma_newlines ']' 
	slice_count:  '['.']' 
	slice_count:  '['.']' slice_count 
	opt_newlines: .    (185)

	']'  shift 129
	'\n'  shift 8
	.  reduce 185 (src line 1153)

	opt_newlines  goto 130
	newlines  goto 131
	newline  goto 7

state 35
	expr:  slice_count.type_data '{' opt_newlines exprs opt_comma_newlines '}' 

	IDENT  shift 133
	CHAN  shift 137
	STRUCT  shift 138
	MAP  shift 136
	'*'  shift 134
	'['  shift 139
	.  error

	type_data  goto 132
	slice_count  goto 135

state 36
	expr:  '('.expr ')' 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 140
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

37: shift/reduce conflict (shift 141(0), red'n 124(0)) on '('
state 37
	expr:  IDENT.'(' exprs VARARG ')' 
	expr:  IDENT.'(' exprs ')' 
	expr_ident:  IDENT.    (124)

	'('  shift 141
	.  reduce 124 (src line 817)


38: shift/reduce conflict (shift 142(0), red'n 122(0)) on '['
state 38
	expr:  expr_ident.'[' expr ']' 
	expr_member_or_ident:  expr_ident.    (122)
	expr_slice:  expr_ident.'[' expr ':' expr ']' 
	expr_slice:  expr_ident.'[' expr ':' ']' 
	expr_slice:  expr_ident.'[' ':' expr ']' 
	expr_slice:  expr_ident.'[' ':' expr ':' expr ']' 
	expr_slice:  expr_ident.'[' expr ':' expr ':' expr ']' 

	'['  shift 142
	.  reduce 122 (src line 805)


state 39
	expr:  LEN.'(' expr ')' 

	'('  shift 143
	.  error


state 40
	expr:  IMPORT.'(' expr ')' 

	'('  shift 144
	.  error


state 41
	expr:  NEW.'(' type_data ')' 

	'('  shift 145
	.  error


state 42
	expr:  MAKE.'(' type_data ')' 
	expr:  MAKE.'(' type_data ',' expr ')' 
	expr:  MAKE.'(' type_data ',' expr ',' expr ')' 
	expr:  MAKE.'(' TYPE IDENT ',' expr ')' 

	'('  shift 146
	.  error


state 43
	expr:  MAP.'{' opt_newlines expr_map opt_comma_newlines '}' 
	expr:  MAP.'[' type_data ']' type_data '{' opt_newlines expr_map opt_comma_newlines '}' 

	'{'  shift 147
	'['  shift 148
	.  error


44: shift/reduce conflict (shift 8(0), red'n 185(0)) on '\n'
state 44
	expr:  '{'.opt_newlines expr_map opt_comma_newlines '}' 
	opt_newlines: .    (185)

	'\n'  shift 8
	.  reduce 185 (src line 1153)

	opt_newlines  goto 149
	newlines  goto 131
	newline  goto 7

state 45
	expr:  expr_slice.    (102)

	.  reduce 102 (src line 695)


state 46
	expr:  expr_chan.    (103)

	.  reduce 103 (src line 700)


state 47
	expr:  expr_unary.    (104)

	.  reduce 104 (src line 705)


state 48
	expr:  expr_binary.    (105)

	.  reduce 105 (src line 706)


state 49
	expr:  expr_lets.    (106)

	.  reduce 106 (src line 707)


state 50
	stmt_var:  VAR.expr_idents ASSIGN exprs 
	expr_idents: .    (107)

	IDENT  shift 151
	.  reduce 107 (src line 709)

	expr_idents  goto 150

state 51
	stmt_lets:  exprs.op_assign exprs 
	stmt_lets:  exprs.EQOPCHAN expr 
	exprs:  exprs.',' opt_newlines expr 
	exprs:  exprs.',' opt_newlines expr_ident 

	EQOPCHAN  shift 153
	COLASSIGN  shift 116
	ASSIGN  shift 117
	','  shift 154
	.  error

	op_assign  goto 152

state 52
	expr_member_or_ident:  expr_member.    (121)

	.  reduce 121 (src line 800)


state 53
	expr_literals:  '-'.NUMBER 
	expr_unary:  '-'.expr 

	IDENT  shift 37
	NUMBER  shift 155
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 156
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 54
	expr_literals:  NUMBER.    (126)

	.  reduce 126 (src line 834)


state 55
	expr_literals:  STRING.    (127)

	.  reduce 127 (src line 843)


state 56
	expr_literals:  TRUE.    (128)

	.  reduce 128 (src line 848)


state 57
	expr_literals:  FALSE.    (129)

	.  reduce 129 (src line 853)


state 58
	expr_literals:  NIL.    (130)

	.  reduce 130 (src line 858)


state 59
	expr_chan:  OPCHAN.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 157
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 60
	expr_unary:  '!'.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 158
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 61
	expr_unary:  '^'.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 159
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 62
	expr_unary:  '&'.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 160
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 63
	expr_unary:  '*'.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 161
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 64
	expr_binary:  op_multiply.    (151)

	.  reduce 151 (src line 961)


state 65
	expr_binary:  op_add.    (152)

	.  reduce 152 (src line 967)


state 66
	expr_binary:  op_comparison.    (153)

	.  reduce 153 (src line 972)


state 67
	expr_binary:  op_binary.    (154)

	.  reduce 154 (src line 977)


state 68
	compstmt:  stmts opt_term.    (2)

	.  reduce 2 (src line 121)


 69: reduce/reduce conflict  (red'ns 181 and 5) on $end
 69: reduce/reduce conflict  (red'ns 181 and 5) on CASE
 69: reduce/reduce conflict  (red'ns 181 and 5) on DEFAULT
 69: reduce/reduce conflict  (red'ns 181 and 5) on '}'
 69: reduce/reduce conflict  (red'ns 181 and 5) on '\n'
state 69
	stmts:  stmts term.stmt 
	opt_term:  term.    (181)
	stmt: .    (5)
	exprs: .    (69)

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	RETURN  shift 13
	VAR  shift 50
	THROW  shift 14
	IF  shift 27
	FOR  shift 28
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MODULE  shift 15
	TRY  shift 16
	BREAK  shift 11
	CONTINUE  shift 12
	SWITCH  shift 29
	SELECT  shift 30
	GO  shift 17
	MAKE  shift 42
	OPCHAN  shift 59
	EQOPCHAN  reduce 69 (src line 520)
	LEN  shift 39
	DELETE  shift 18
	CLOSE  shift 19
	MAP  shift 43
	IMPORT  shift 40
	COLASSIGN  reduce 69 (src line 520)
	ASSIGN  reduce 69 (src line 520)
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	','  reduce 69 (src line 520)
	'['  shift 34
	'!'  shift 60
	.  reduce 5 (src line 151)

	stmt  goto 162
	stmt_var_or_lets  goto 10
	stmt_var  goto 25
	stmt_lets  goto 26
	stmt_if  goto 20
	stmt_for  goto 21
	stmt_switch  goto 22
	stmt_select  goto 23
	exprs  goto 51
	expr  goto 24
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

70: shift/reduce conflict (shift 8(0), red'n 182(0)) on '\n'
state 70
	term:  ';' newlines.    (182)
	newlines:  newlines.newline 

	'\n'  shift 8
	.  reduce 182 (src line 1148)

	newline  goto 71

state 71
	newlines:  newlines newline.    (188)

	.  reduce 188 (src line 1159)


state 72
	stmt:  RETURN exprs.    (9)
	exprs:  exprs.',' opt_newlines expr 
	exprs:  exprs.',' opt_newlines expr_ident 

	','  shift 154
	.  reduce 9 (src line 170)


state 73
	exprs:  expr.    (70)
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 70 (src line 525)


state 74
	stmt:  THROW expr.    (10)
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 10 (src line 175)


state 75
	stmt:  MODULE IDENT.'{' compstmt '}' 

	'{'  shift 163
	.  error


76: shift/reduce conflict (shift 5(0), red'n 180(0)) on ';'
76: shift/reduce conflict (shift 8(0), red'n 180(0)) on '\n'
state 76
	stmt:  TRY '{'.compstmt '}' CATCH IDENT '{' compstmt '}' FINALLY '{' compstmt '}' 
	stmt:  TRY '{'.compstmt '}' CATCH '{' compstmt '}' FINALLY '{' compstmt '}' 
	stmt:  TRY '{'.compstmt '}' CATCH IDENT '{' compstmt '}' 
	stmt:  TRY '{'.compstmt '}' CATCH '{' compstmt '}' 
	opt_term: .    (180)

	';'  shift 5
	'\n'  shift 8
	.  reduce 180 (src line 1144)

	compstmt  goto 164
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	newlines  goto 6
	newline  goto 7

77: shift/reduce conflict (shift 165(0), red'n 124(0)) on '('
state 77
	stmt:  GO IDENT.'(' exprs VARARG ')' 
	stmt:  GO IDENT.'(' exprs ')' 
	expr:  IDENT.'(' exprs VARARG ')' 
	expr:  IDENT.'(' exprs ')' 
	expr_ident:  IDENT.    (124)

	'('  shift 165
	.  reduce 124 (src line 817)


state 78
	stmt:  GO expr.'(' exprs VARARG ')' 
	stmt:  GO expr.'(' exprs ')' 
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 166
	'['  shift 87
	'.'  shift 89
	.  error


state 79
	stmt:  DELETE '('.expr ')' 
	stmt:  DELETE '('.expr ',' expr ')' 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 167
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 80
	stmt:  CLOSE '('.expr ')' 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 168
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 81
	stmt_if:  stmt_if ELSE.IF expr '{' compstmt '}' 
	stmt_if:  stmt_if ELSE.'{' compstmt '}' 

	IF  shift 169
	'{'  shift 170
	.  error


state 82
	stmt_lets:  expr op_assign.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 171
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 83
	stmt_lets:  expr EQOPCHAN.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 172
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 84
	expr:  expr '?'.expr ':' expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 173
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 85
	expr:  expr NILCOALESCE.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 174
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 86
	expr:  expr '('.exprs VARARG ')' 
	expr:  expr '('.exprs ')' 
	exprs: .    (69)

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  reduce 69 (src line 520)

	exprs  goto 175
	expr  goto 73
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 87
	expr:  expr '['.expr ']' 
	expr_slice:  expr '['.expr ':' expr ']' 
	expr_slice:  expr '['.expr ':' ']' 
	expr_slice:  expr '['.':' expr ']' 
	expr_slice:  expr '['.':' expr ':' expr ']' 
	expr_slice:  expr '['.expr ':' expr ':' expr ']' 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	':'  shift 177
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 176
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 88
	expr:  expr IN.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 178
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 89
	expr_member:  expr '.'.IDENT 

	IDENT  shift 179
	.  error


state 90
	expr_chan:  expr OPCHAN.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 180
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 91
	expr_lets:  expr PLUSPLUS.    (155)

	.  reduce 155 (src line 983)


state 92
	expr_lets:  expr MINUSMINUS.    (156)

	.  reduce 156 (src line 992)


state 93
	expr_lets:  expr PLUSEQ.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 181
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 94
	expr_lets:  expr MINUSEQ.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 182
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 95
	expr_lets:  expr OREQ.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 183
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 96
	expr_lets:  expr MULEQ.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 184
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 97
	expr_lets:  expr DIVEQ.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 185
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 98
	expr_lets:  expr ANDEQ.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 186
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 99
	op_multiply:  expr '*'.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 187
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 100
	op_multiply:  expr '/'.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 188
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 101
	op_multiply:  expr '%'.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 189
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 102
	op_multiply:  expr SHIFTLEFT.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 190
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 103
	op_multiply:  expr SHIFTRIGHT.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 191
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 104
	op_multiply:  expr '&'.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 192
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 105
	op_add:  expr '+'.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 193
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 106
	op_add:  expr '-'.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 194
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 107
	op_add:  expr '|'.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 195
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 108
	op_comparison:  expr EQEQ.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 196
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 109
	op_comparison:  expr NEQ.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 197
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 110
	op_comparison:  expr '<'.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 198
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 111
	op_comparison:  expr LE.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 199
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 112
	op_comparison:  expr '>'.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 200
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 113
	op_comparison:  expr GE.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 201
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 114
	op_binary:  expr ANDAND.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 202
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 115
	op_binary:  expr OROR.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 203
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 116
	op_assign:  COLASSIGN.    (35)

	.  reduce 35 (src line 315)


state 117
	op_assign:  ASSIGN.    (36)

	.  reduce 36 (src line 320)


state 118
	stmt_if:  IF expr.'{' compstmt '}' 
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'{'  shift 204
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  error


119: shift/reduce conflict (shift 8(0), red'n 185(0)) on '\n'
 119: reduce/reduce conflict  (red'ns 185 and 180) on IDENT
 119: reduce/reduce conflict  (red'ns 185 and 180) on NUMBER
 119: reduce/reduce conflict  (red'ns 185 and 180) on STRING
 119: reduce/reduce conflict  (red'ns 185 and 180) on FUNC
 119: reduce/reduce conflict  (red'ns 185 and 180) on NEW
 119: reduce/reduce conflict  (red'ns 185 and 180) on TRUE
 119: reduce/reduce conflict  (red'ns 185 and 180) on FALSE
 119: reduce/reduce conflict  (red'ns 185 and 180) on NIL
 119: reduce/reduce conflict  (red'ns 185 and 180) on MAKE
 119: reduce/reduce conflict  (red'ns 185 and 180) on OPCHAN
 119: reduce/reduce conflict  (red'ns 185 and 180) on LEN
 119: reduce/reduce conflict  (red'ns 185 and 180) on MAP
 119: reduce/reduce conflict  (red'ns 185 and 180) on IMPORT
 119: reduce/reduce conflict  (red'ns 185 and 180) on '-'
 119: reduce/reduce conflict  (red'ns 185 and 180) on '^'
 119: reduce/reduce conflict  (red'ns 185 and 180) on '*'
 119: reduce/reduce conflict  (red'ns 185 and 180) on '&'
 119: reduce/reduce conflict  (red'ns 185 and 180) on '{'
 119: reduce/reduce conflict  (red'ns 185 and 180) on '}'
 119: reduce/reduce conflict  (red'ns 185 and 180) on '('
 119: reduce/reduce conflict  (red'ns 185 and 180) on ','
119: shift/reduce conflict (shift 5(0), red'n 180(0)) on ';'
 119: reduce/reduce conflict  (red'ns 185 and 180) on '['
 119: reduce/reduce conflict  (red'ns 185 and 180) on '!'
119: shift/reduce conflict (shift 8(0), red'n 180(0)) on '\n'
state 119
	stmt_for:  FOR '{'.compstmt '}' 
	expr:  '{'.opt_newlines expr_map opt_comma_newlines '}' 
	opt_newlines: .    (185)
	opt_term: .    (180)

	';'  shift 5
	'\n'  shift 8
	.  reduce 180 (src line 1144)

	compstmt  goto 205
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	opt_newlines  goto 149
	newlines  goto 206
	newline  goto 7

state 120
	stmt_for:  FOR expr_idents.IN expr '{' compstmt '}' 
	expr_idents:  expr_idents.',' opt_newlines IDENT 

	IN  shift 207
	','  shift 208
	.  error


121: shift/reduce conflict (shift 83(2), red'n 70(0)) on EQOPCHAN
121: shift/reduce conflict (shift 116(0), red'n 70(0)) on COLASSIGN
121: shift/reduce conflict (shift 117(0), red'n 70(0)) on ASSIGN
state 121
	stmt_lets:  expr.op_assign expr 
	stmt_lets:  expr.EQOPCHAN expr 
	stmt_for:  FOR expr.'{' compstmt '}' 
	exprs:  expr.    (70)
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	EQOPCHAN  shift 83
	COLASSIGN  shift 116
	ASSIGN  shift 117
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'{'  shift 209
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 70 (src line 525)

	op_assign  goto 82

state 122
	stmt_for:  FOR ';'.';' '{' compstmt '}' 
	stmt_for:  FOR ';'.';' expr '{' compstmt '}' 
	stmt_for:  FOR ';'.expr ';' '{' compstmt '}' 
	stmt_for:  FOR ';'.expr ';' expr '{' compstmt '}' 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	';'  shift 210
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 211
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 123
	stmt_for:  FOR stmt_var_or_lets.';' ';' '{' compstmt '}' 
	stmt_for:  FOR stmt_var_or_lets.';' ';' expr '{' compstmt '}' 
	stmt_for:  FOR stmt_var_or_lets.';' expr ';' '{' compstmt '}' 
	stmt_for:  FOR stmt_var_or_lets.';' expr ';' expr '{' compstmt '}' 

	';'  shift 212
	.  error


 124: reduce/reduce conflict  (red'ns 108 and 124) on IN
124: shift/reduce conflict (shift 141(0), red'n 124(0)) on '('
 124: reduce/reduce conflict  (red'ns 108 and 124) on ','
state 124
	expr:  IDENT.'(' exprs VARARG ')' 
	expr:  IDENT.'(' exprs ')' 
	expr_idents:  IDENT.    (108)
	expr_ident:  IDENT.    (124)

	IN  reduce 108 (src line 713)
	'('  shift 141
	','  reduce 108 (src line 713)
	.  reduce 124 (src line 817)


state 125
	stmt_switch:  SWITCH expr.'{' opt_newlines stmt_switch_cases opt_newlines '}' 
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'{'  shift 213
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  error


126: shift/reduce conflict (shift 8(0), red'n 185(0)) on '\n'
state 126
	stmt_select:  SELECT '{'.opt_newlines stmt_select_cases opt_newlines '}' 
	opt_newlines: .    (185)

	'\n'  shift 8
	.  reduce 185 (src line 1153)

	opt_newlines  goto 214
	newlines  goto 131
	newline  goto 7

state 127
	expr:  FUNC '('.expr_idents ')' '{' compstmt '}' 
	expr:  FUNC '('.expr_idents VARARG ')' '{' compstmt '}' 
	expr_idents: .    (107)

	IDENT  shift 151
	.  reduce 107 (src line 709)

	expr_idents  goto 215

state 128
	expr:  FUNC IDENT.'(' expr_idents ')' '{' compstmt '}' 
	expr:  FUNC IDENT.'(' expr_idents VARARG ')' '{' compstmt '}' 

	'('  shift 216
	.  error


129: shift/reduce conflict (shift 139(0), red'n 81(0)) on '['
 129: reduce/reduce conflict  (red'ns 81 and 119) on '*'
129: shift/reduce conflict (shift 139(0), red'n 119(0)) on '['
state 129
	expr:  '[' ']'.    (81)
	slice_count:  '[' ']'.    (119)
	slice_count:  '[' ']'.slice_count 

	IDENT  reduce 119 (src line 790)
	CHAN  reduce 119 (src line 790)
	STRUCT  reduce 119 (src line 790)
	MAP  reduce 119 (src line 790)
	'['  shift 139
	.  reduce 81 (src line 583)

	slice_count  goto 217

state 130
	expr:  '[' opt_newlines.exprs opt_comma_newlines ']' 
	exprs: .    (69)

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  reduce 69 (src line 520)

	exprs  goto 218
	expr  goto 73
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

131: shift/reduce conflict (shift 8(0), red'n 186(0)) on '\n'
state 131
	opt_newlines:  newlines.    (186)
	newlines:  newlines.newline 

	'\n'  shift 8
	.  reduce 186 (src line 1155)

	newline  goto 71

state 132
	expr:  slice_count type_data.'{' opt_newlines exprs opt_comma_newlines '}' 
	type_data:  type_data.'.' IDENT 

	'{'  shift 219
	'.'  shift 220
	.  error


state 133
	type_data:  IDENT.    (110)

	.  reduce 110 (src line 725)


state 134
	type_data:  '*'.type_data 

	IDENT  shift 133
	CHAN  shift 137
	STRUCT  shift 138
	MAP  shift 136
	'*'  shift 134
	'['  shift 139
	.  error

	type_data  goto 221
	slice_count  goto 135

state 135
	type_data:  slice_count.type_data 

	IDENT  shift 133
	CHAN  shift 137
	STRUCT  shift 138
	MAP  shift 136
	'*'  shift 134
	'['  shift 139
	.  error

	type_data  goto 222
	slice_count  goto 135

state 136
	type_data:  MAP.'[' type_data ']' type_data 

	'['  shift 223
	.  error


state 137
	type_data:  CHAN.type_data 

	IDENT  shift 133
	CHAN  shift 137
	STRUCT  shift 138
	MAP  shift 136
	'*'  shift 134
	'['  shift 139
	.  error

	type_data  goto 224
	slice_count  goto 135

state 138
	type_data:  STRUCT.'{' opt_newlines type_data_struct opt_newlines '}' 

	'{'  shift 225
	.  error


state 139
	slice_count:  '['.']' 
	slice_count:  '['.']' slice_count 

	']'  shift 226
	.  error


state 140
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  '(' expr.')' 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	')'  shift 227
	'['  shift 87
	'.'  shift 89
	.  error


state 141
	expr:  IDENT '('.exprs VARARG ')' 
	expr:  IDENT '('.exprs ')' 
	exprs: .    (69)

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  reduce 69 (src line 520)

	exprs  goto 228
	expr  goto 73
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 142
	expr:  expr_ident '['.expr ']' 
	expr_slice:  expr_ident '['.expr ':' expr ']' 
	expr_slice:  expr_ident '['.expr ':' ']' 
	expr_slice:  expr_ident '['.':' expr ']' 
	expr_slice:  expr_ident '['.':' expr ':' expr ']' 
	expr_slice:  expr_ident '['.expr ':' expr ':' expr ']' 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	':'  shift 230
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 229
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 143
	expr:  LEN '('.expr ')' 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 231
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 144
	expr:  IMPORT '('.expr ')' 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 232
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 145
	expr:  NEW '('.type_data ')' 

	IDENT  shift 133
	CHAN  shift 137
	STRUCT  shift 138
	MAP  shift 136
	'*'  shift 134
	'['  shift 139
	.  error

	type_data  goto 233
	slice_count  goto 135

state 146
	expr:  MAKE '('.type_data ')' 
	expr:  MAKE '('.type_data ',' expr ')' 
	expr:  MAKE '('.type_data ',' expr ',' expr ')' 
	expr:  MAKE '('.TYPE IDENT ',' expr ')' 

	IDENT  shift 133
	CHAN  shift 137
	STRUCT  shift 138
	TYPE  shift 235
	MAP  shift 136
	'*'  shift 134
	'['  shift 139
	.  error

	type_data  goto 234
	slice_count  goto 135

147: shift/reduce conflict (shift 8(0), red'n 185(0)) on '\n'
state 147
	expr:  MAP '{'.opt_newlines expr_map opt_comma_newlines '}' 
	opt_newlines: .    (185)

	'\n'  shift 8
	.  reduce 185 (src line 1153)

	opt_newlines  goto 236
	newlines  goto 131
	newline  goto 7

state 148
	expr:  MAP '['.type_data ']' type_data '{' opt_newlines expr_map opt_comma_newlines '}' 

	IDENT  shift 133
	CHAN  shift 137
	STRUCT  shift 138
	MAP  shift 136
	'*'  shift 134
	'['  shift 139
	.  error

	type_data  goto 237
	slice_count  goto 135

state 149
	expr:  '{' opt_newlines.expr_map opt_comma_newlines '}' 
	expr_map: .    (131)

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  reduce 131 (src line 864)

	expr  goto 239
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_map  goto 238
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 150
	stmt_var:  VAR expr_idents.ASSIGN exprs 
	expr_idents:  expr_idents.',' opt_newlines IDENT 

	ASSIGN  shift 240
	','  shift 208
	.  error


state 151
	expr_idents:  IDENT.    (108)

	.  reduce 108 (src line 713)


state 152
	stmt_lets:  exprs op_assign.exprs 
	exprs: .    (69)

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  reduce 69 (src line 520)

	exprs  goto 241
	expr  goto 73
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 153
	stmt_lets:  exprs EQOPCHAN.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 242
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 154
	exprs:  exprs ','.opt_newlines expr 
	exprs:  exprs ','.opt_newlines expr_ident 
	opt_newlines: .    (185)

	'\n'  shift 8
	.  reduce 185 (src line 1153)

	opt_newlines  goto 243
	newlines  goto 131
	newline  goto 7

 155: reduce/reduce conflict  (red'ns 125 and 126) on $end
 155: reduce/reduce conflict  (red'ns 125 and 126) on VARARG
 155: reduce/reduce conflict  (red'ns 125 and 126) on IN
 155: reduce/reduce conflict  (red'ns 125 and 126) on EQEQ
 155: reduce/reduce conflict  (red'ns 125 and 126) on NEQ
 155: reduce/reduce conflict  (red'ns 125 and 126) on GE
 155: reduce/reduce conflict  (red'ns 125 and 126) on LE
 155: reduce/reduce conflict  (red'ns 125 and 126) on OROR
 155: reduce/reduce conflict  (red'ns 125 and 126) on ANDAND
 155: reduce/reduce conflict  (red'ns 125 and 126) on NILCOALESCE
 155: reduce/reduce conflict  (red'ns 125 and 126) on PLUSEQ
 155: reduce/reduce conflict  (red'ns 125 and 126) on MINUSEQ
 155: reduce/reduce conflict  (red'ns 125 and 126) on MULEQ
 155: reduce/reduce conflict  (red'ns 125 and 126) on DIVEQ
 155: reduce/reduce conflict  (red'ns 125 and 126) on ANDEQ
 155: reduce/reduce conflict  (red'ns 125 and 126) on OREQ
 155: reduce/reduce conflict  (red'ns 125 and 126) on PLUSPLUS
 155: reduce/reduce conflict  (red'ns 125 and 126) on MINUSMINUS
 155: reduce/reduce conflict  (red'ns 125 and 126) on SHIFTLEFT
 155: reduce/reduce conflict  (red'ns 125 and 126) on SHIFTRIGHT
 155: reduce/reduce conflict  (red'ns 125 and 126) on CASE
 155: reduce/reduce conflict  (red'ns 125 and 126) on DEFAULT
 155: reduce/reduce conflict  (red'ns 125 and 126) on OPCHAN
 155: reduce/reduce conflict  (red'ns 125 and 126) on EQOPCHAN
 155: reduce/reduce conflict  (red'ns 125 and 126) on COLASSIGN
 155: reduce/reduce conflict  (red'ns 125 and 126) on ASSIGN
 155: reduce/reduce conflict  (red'ns 125 and 126) on ':'
 155: reduce/reduce conflict  (red'ns 125 and 126) on '?'
 155: reduce/reduce conflict  (red'ns 125 and 126) on '<'
 155: reduce/reduce conflict  (red'ns 125 and 126) on '>'
 155: reduce/reduce conflict  (red'ns 125 and 126) on '+'
 155: reduce/reduce conflict  (red'ns 125 and 126) on '-'
 155: reduce/reduce conflict  (red'ns 125 and 126) on '|'
 155: reduce/reduce conflict  (red'ns 125 and 126) on '*'
 155: reduce/reduce conflict  (red'ns 125 and 126) on '/'
 155: reduce/reduce conflict  (red'ns 125 and 126) on '%'
 155: reduce/reduce conflict  (red'ns 125 and 126) on '&'
 155: reduce/reduce conflict  (red'ns 125 and 126) on '{'
 155: reduce/reduce conflict  (red'ns 125 and 126) on '}'
 155: reduce/reduce conflict  (red'ns 125 and 126) on '('
 155: reduce/reduce conflict  (red'ns 125 and 126) on ')'
 155: reduce/reduce conflict  (red'ns 125 and 126) on ','
 155: reduce/reduce conflict  (red'ns 125 and 126) on ';'
 155: reduce/reduce conflict  (red'ns 125 and 126) on '['
 155: reduce/reduce conflict  (red'ns 125 and 126) on ']'
 155: reduce/reduce conflict  (red'ns 125 and 126) on '.'
 155: reduce/reduce conflict  (red'ns 125 and 126) on '\n'
state 155
	expr_literals:  '-' NUMBER.    (125)
	expr_literals:  NUMBER.    (126)

	.  reduce 125 (src line 824)


156: shift/reduce conflict (shift 86(0), red'n 146(13)) on '('
156: shift/reduce conflict (shift 87(0), red'n 146(13)) on '['
156: shift/reduce conflict (shift 89(0), red'n 146(13)) on '.'
state 156
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_unary:  '-' expr.    (146)
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 146 (src line 934)


157: shift/reduce conflict (shift 86(0), red'n 145(4)) on '('
157: shift/reduce conflict (shift 87(0), red'n 145(4)) on '['
157: shift/reduce conflict (shift 89(0), red'n 145(4)) on '.'
state 157
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_chan:  OPCHAN expr.    (145)
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 145 (src line 929)


158: shift/reduce conflict (shift 86(0), red'n 147(13)) on '('
158: shift/reduce conflict (shift 87(0), red'n 147(13)) on '['
158: shift/reduce conflict (shift 89(0), red'n 147(13)) on '.'
state 158
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_unary:  '!' expr.    (147)
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 147 (src line 940)


159: shift/reduce conflict (shift 86(0), red'n 148(13)) on '('
159: shift/reduce conflict (shift 87(0), red'n 148(13)) on '['
159: shift/reduce conflict (shift 89(0), red'n 148(13)) on '.'
state 159
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_unary:  '^' expr.    (148)
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 148 (src line 945)


160: shift/reduce conflict (shift 86(0), red'n 149(13)) on '('
160: shift/reduce conflict (shift 87(0), red'n 149(13)) on '['
160: shift/reduce conflict (shift 89(0), red'n 149(13)) on '.'
state 160
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_unary:  '&' expr.    (149)
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 149 (src line 950)


161: shift/reduce conflict (shift 86(0), red'n 150(13)) on '('
161: shift/reduce conflict (shift 87(0), red'n 150(13)) on '['
161: shift/reduce conflict (shift 89(0), red'n 150(13)) on '.'
state 161
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_unary:  '*' expr.    (150)
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 150 (src line 955)


state 162
	stmts:  stmts term stmt.    (4)

	.  reduce 4 (src line 136)


163: shift/reduce conflict (shift 5(0), red'n 180(0)) on ';'
163: shift/reduce conflict (shift 8(0), red'n 180(0)) on '\n'
state 163
	stmt:  MODULE IDENT '{'.compstmt '}' 
	opt_term: .    (180)

	';'  shift 5
	'\n'  shift 8
	.  reduce 180 (src line 1144)

	compstmt  goto 244
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	newlines  goto 6
	newline  goto 7

state 164
	stmt:  TRY '{' compstmt.'}' CATCH IDENT '{' compstmt '}' FINALLY '{' compstmt '}' 
	stmt:  TRY '{' compstmt.'}' CATCH '{' compstmt '}' FINALLY '{' compstmt '}' 
	stmt:  TRY '{' compstmt.'}' CATCH IDENT '{' compstmt '}' 
	stmt:  TRY '{' compstmt.'}' CATCH '{' compstmt '}' 

	'}'  shift 245
	.  error


state 165
	stmt:  GO IDENT '('.exprs VARARG ')' 
	stmt:  GO IDENT '('.exprs ')' 
	expr:  IDENT '('.exprs VARARG ')' 
	expr:  IDENT '('.exprs ')' 
	exprs: .    (69)

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  reduce 69 (src line 520)

	exprs  goto 246
	expr  goto 73
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 166
	stmt:  GO expr '('.exprs VARARG ')' 
	stmt:  GO expr '('.exprs ')' 
	expr:  expr '('.exprs VARARG ')' 
	expr:  expr '('.exprs ')' 
	exprs: .    (69)

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  reduce 69 (src line 520)

	exprs  goto 247
	expr  goto 73
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 167
	stmt:  DELETE '(' expr.')' 
	stmt:  DELETE '(' expr.',' expr ')' 
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	')'  shift 248
	','  shift 249
	'['  shift 87
	'.'  shift 89
	.  error


state 168
	stmt:  CLOSE '(' expr.')' 
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	')'  shift 250
	'['  shift 87
	'.'  shift 89
	.  error


state 169
	stmt_if:  stmt_if ELSE IF.expr '{' compstmt '}' 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 251
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

170: shift/reduce conflict (shift 5(0), red'n 180(0)) on ';'
170: shift/reduce conflict (shift 8(0), red'n 180(0)) on '\n'
state 170
	stmt_if:  stmt_if ELSE '{'.compstmt '}' 
	opt_term: .    (180)

	';'  shift 5
	'\n'  shift 8
	.  reduce 180 (src line 1144)

	compstmt  goto 252
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	newlines  goto 6
	newline  goto 7

state 171
	stmt_lets:  expr op_assign expr.    (31)
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 31 (src line 279)


state 172
	stmt_lets:  expr EQOPCHAN expr.    (33)
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 33 (src line 297)


state 173
	expr:  expr.'?' expr ':' expr 
	expr:  expr '?' expr.':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	':'  shift 253
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  error


174: shift/reduce conflict (shift 86(0), red'n 76(5)) on '('
174: shift/reduce conflict (shift 87(0), red'n 76(5)) on '['
174: shift/reduce conflict (shift 89(0), red'n 76(5)) on '.'
state 174
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr NILCOALESCE expr.    (76)
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 76 (src line 558)


state 175
	exprs:  exprs.',' opt_newlines expr 
	exprs:  exprs.',' opt_newlines expr_ident 
	expr:  expr '(' exprs.VARARG ')' 
	expr:  expr '(' exprs.')' 

	VARARG  shift 254
	')'  shift 255
	','  shift 154
	.  error


state 176
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr '[' expr.']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr '[' expr.':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr '[' expr.':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_slice:  expr '[' expr.':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	':'  shift 257
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	']'  shift 256
	'.'  shift 89
	.  error


state 177
	expr_slice:  expr '[' ':'.expr ']' 
	expr_slice:  expr '[' ':'.expr ':' expr ']' 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 258
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

178: shift/reduce conflict (shift 86(0), red'n 98(11)) on '('
178: shift/reduce conflict (shift 87(0), red'n 98(11)) on '['
178: shift/reduce conflict (shift 89(0), red'n 98(11)) on '.'
state 178
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr:  expr IN expr.    (98)
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 98 (src line 673)


state 179
	expr_member:  expr '.' IDENT.    (123)

	.  reduce 123 (src line 810)


180: shift/reduce conflict (shift 86(0), red'n 144(4)) on '('
180: shift/reduce conflict (shift 87(0), red'n 144(4)) on '['
180: shift/reduce conflict (shift 89(0), red'n 144(4)) on '.'
state 180
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_chan:  expr OPCHAN expr.    (144)
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 144 (src line 924)


181: shift/reduce conflict (shift 86(0), red'n 157(2)) on '('
181: shift/reduce conflict (shift 87(0), red'n 157(2)) on '['
181: shift/reduce conflict (shift 89(0), red'n 157(2)) on '.'
state 181
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr PLUSEQ expr.    (157)
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 157 (src line 1000)


182: shift/reduce conflict (shift 86(0), red'n 158(2)) on '('
182: shift/reduce conflict (shift 87(0), red'n 158(2)) on '['
182: shift/reduce conflict (shift 89(0), red'n 158(2)) on '.'
state 182
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr MINUSEQ expr.    (158)
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 158 (src line 1008)


183: shift/reduce conflict (shift 86(0), red'n 159(2)) on '('
183: shift/reduce conflict (shift 87(0), red'n 159(2)) on '['
183: shift/reduce conflict (shift 89(0), red'n 159(2)) on '.'
state 183
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr OREQ expr.    (159)
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 159 (src line 1016)


184: shift/reduce conflict (shift 86(0), red'n 160(2)) on '('
184: shift/reduce conflict (shift 87(0), red'n 160(2)) on '['
184: shift/reduce conflict (shift 89(0), red'n 160(2)) on '.'
state 184
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr MULEQ expr.    (160)
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 160 (src line 1024)


185: shift/reduce conflict (shift 86(0), red'n 161(2)) on '('
185: shift/reduce conflict (shift 87(0), red'n 161(2)) on '['
185: shift/reduce conflict (shift 89(0), red'n 161(2)) on '.'
state 185
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr DIVEQ expr.    (161)
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 161 (src line 1032)


186: shift/reduce conflict (shift 86(0), red'n 162(2)) on '('
186: shift/reduce conflict (shift 87(0), red'n 162(2)) on '['
186: shift/reduce conflict (shift 89(0), red'n 162(2)) on '.'
state 186
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	expr_lets:  expr ANDEQ expr.    (162)
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 162 (src line 1040)


187: shift/reduce conflict (shift 86(0), red'n 163(10)) on '('
187: shift/reduce conflict (shift 87(0), red'n 163(10)) on '['
187: shift/reduce conflict (shift 89(0), red'n 163(10)) on '.'
state 187
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr '*' expr.    (163)
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 163 (src line 1050)


188: shift/reduce conflict (shift 86(0), red'n 164(10)) on '('
188: shift/reduce conflict (shift 87(0), red'n 164(10)) on '['
188: shift/reduce conflict (shift 89(0), red'n 164(10)) on '.'
state 188
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr '/' expr.    (164)
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 164 (src line 1056)


189: shift/reduce conflict (shift 86(0), red'n 165(10)) on '('
189: shift/reduce conflict (shift 87(0), red'n 165(10)) on '['
189: shift/reduce conflict (shift 89(0), red'n 165(10)) on '.'
state 189
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr '%' expr.    (165)
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 165 (src line 1061)


190: shift/reduce conflict (shift 86(0), red'n 166(10)) on '('
190: shift/reduce conflict (shift 87(0), red'n 166(10)) on '['
190: shift/reduce conflict (shift 89(0), red'n 166(10)) on '.'
state 190
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr SHIFTLEFT expr.    (166)
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 166 (src line 1066)


191: shift/reduce conflict (shift 86(0), red'n 167(10)) on '('
191: shift/reduce conflict (shift 87(0), red'n 167(10)) on '['
191: shift/reduce conflict (shift 89(0), red'n 167(10)) on '.'
state 191
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr SHIFTRIGHT expr.    (167)
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 167 (src line 1071)


192: shift/reduce conflict (shift 86(0), red'n 168(10)) on '('
192: shift/reduce conflict (shift 87(0), red'n 168(10)) on '['
192: shift/reduce conflict (shift 89(0), red'n 168(10)) on '.'
state 192
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_multiply:  expr '&' expr.    (168)
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 168 (src line 1076)


193: shift/reduce conflict (shift 86(0), red'n 169(9)) on '('
193: shift/reduce conflict (shift 87(0), red'n 169(9)) on '['
193: shift/reduce conflict (shift 89(0), red'n 169(9)) on '.'
state 193
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr '+' expr.    (169)
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 169 (src line 1082)


194: shift/reduce conflict (shift 86(0), red'n 170(9)) on '('
194: shift/reduce conflict (shift 87(0), red'n 170(9)) on '['
194: shift/reduce conflict (shift 89(0), red'n 170(9)) on '.'
state 194
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr '-' expr.    (170)
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 170 (src line 1088)


195: shift/reduce conflict (shift 86(0), red'n 171(9)) on '('
195: shift/reduce conflict (shift 87(0), red'n 171(9)) on '['
195: shift/reduce conflict (shift 89(0), red'n 171(9)) on '.'
state 195
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_add:  expr '|' expr.    (171)
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 171 (src line 1093)


196: shift/reduce conflict (shift 86(0), red'n 172(8)) on '('
196: shift/reduce conflict (shift 87(0), red'n 172(8)) on '['
196: shift/reduce conflict (shift 89(0), red'n 172(8)) on '.'
state 196
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr EQEQ expr.    (172)
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 172 (src line 1099)


197: shift/reduce conflict (shift 86(0), red'n 173(8)) on '('
197: shift/reduce conflict (shift 87(0), red'n 173(8)) on '['
197: shift/reduce conflict (shift 89(0), red'n 173(8)) on '.'
state 197
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr NEQ expr.    (173)
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 173 (src line 1105)


198: shift/reduce conflict (shift 86(0), red'n 174(8)) on '('
198: shift/reduce conflict (shift 87(0), red'n 174(8)) on '['
198: shift/reduce conflict (shift 89(0), red'n 174(8)) on '.'
state 198
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr '<' expr.    (174)
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 174 (src line 1110)


199: shift/reduce conflict (shift 86(0), red'n 175(8)) on '('
199: shift/reduce conflict (shift 87(0), red'n 175(8)) on '['
199: shift/reduce conflict (shift 89(0), red'n 175(8)) on '.'
state 199
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr LE expr.    (175)
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 175 (src line 1115)


200: shift/reduce conflict (shift 86(0), red'n 176(8)) on '('
200: shift/reduce conflict (shift 87(0), red'n 176(8)) on '['
200: shift/reduce conflict (shift 89(0), red'n 176(8)) on '.'
state 200
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr '>' expr.    (176)
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 176 (src line 1120)


201: shift/reduce conflict (shift 86(0), red'n 177(8)) on '('
201: shift/reduce conflict (shift 87(0), red'n 177(8)) on '['
201: shift/reduce conflict (shift 89(0), red'n 177(8)) on '.'
state 201
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_comparison:  expr GE expr.    (177)
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 177 (src line 1125)


202: shift/reduce conflict (shift 86(0), red'n 178(7)) on '('
202: shift/reduce conflict (shift 87(0), red'n 178(7)) on '['
202: shift/reduce conflict (shift 89(0), red'n 178(7)) on '.'
state 202
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr ANDAND expr.    (178)
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 178 (src line 1131)


203: shift/reduce conflict (shift 86(0), red'n 179(6)) on '('
203: shift/reduce conflict (shift 87(0), red'n 179(6)) on '['
203: shift/reduce conflict (shift 89(0), red'n 179(6)) on '.'
state 203
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 
	op_binary:  expr OROR expr.    (179)

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	ANDAND  shift 114
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 179 (src line 1137)


204: shift/reduce conflict (shift 5(0), red'n 180(0)) on ';'
204: shift/reduce conflict (shift 8(0), red'n 180(0)) on '\n'
state 204
	stmt_if:  IF expr '{'.compstmt '}' 
	opt_term: .    (180)

	';'  shift 5
	'\n'  shift 8
	.  reduce 180 (src line 1144)

	compstmt  goto 259
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	newlines  goto 6
	newline  goto 7

state 205
	stmt_for:  FOR '{' compstmt.'}' 

	'}'  shift 260
	.  error


206: shift/reduce conflict (shift 8(0), red'n 183(0)) on '\n'
 206: reduce/reduce conflict  (red'ns 183 and 186) on IDENT
 206: reduce/reduce conflict  (red'ns 183 and 186) on NUMBER
 206: reduce/reduce conflict  (red'ns 183 and 186) on STRING
 206: reduce/reduce conflict  (red'ns 183 and 186) on FUNC
 206: reduce/reduce conflict  (red'ns 183 and 186) on NEW
 206: reduce/reduce conflict  (red'ns 183 and 186) on TRUE
 206: reduce/reduce conflict  (red'ns 183 and 186) on FALSE
 206: reduce/reduce conflict  (red'ns 183 and 186) on NIL
 206: reduce/reduce conflict  (red'ns 183 and 186) on MAKE
 206: reduce/reduce conflict  (red'ns 183 and 186) on OPCHAN
 206: reduce/reduce conflict  (red'ns 183 and 186) on LEN
 206: reduce/reduce conflict  (red'ns 183 and 186) on MAP
 206: reduce/reduce conflict  (red'ns 183 and 186) on IMPORT
 206: reduce/reduce conflict  (red'ns 183 and 186) on '-'
 206: reduce/reduce conflict  (red'ns 183 and 186) on '^'
 206: reduce/reduce conflict  (red'ns 183 and 186) on '*'
 206: reduce/reduce conflict  (red'ns 183 and 186) on '&'
 206: reduce/reduce conflict  (red'ns 183 and 186) on '{'
 206: reduce/reduce conflict  (red'ns 183 and 186) on '}'
 206: reduce/reduce conflict  (red'ns 183 and 186) on '('
 206: reduce/reduce conflict  (red'ns 183 and 186) on ','
 206: reduce/reduce conflict  (red'ns 183 and 186) on '['
 206: reduce/reduce conflict  (red'ns 183 and 186) on '!'
206: shift/reduce conflict (shift 8(0), red'n 186(0)) on '\n'
state 206
	term:  newlines.    (183)
	opt_newlines:  newlines.    (186)
	newlines:  newlines.newline 

	'\n'  shift 8
	.  reduce 183 (src line 1150)

	newline  goto 71

state 207
	stmt_for:  FOR expr_idents IN.expr '{' compstmt '}' 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 261
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 208
	expr_idents:  expr_idents ','.opt_newlines IDENT 
	opt_newlines: .    (185)

	'\n'  shift 8
	.  reduce 185 (src line 1153)

	opt_newlines  goto 262
	newlines  goto 131
	newline  goto 7

209: shift/reduce conflict (shift 5(0), red'n 180(0)) on ';'
209: shift/reduce conflict (shift 8(0), red'n 180(0)) on '\n'
state 209
	stmt_for:  FOR expr '{'.compstmt '}' 
	opt_term: .    (180)

	';'  shift 5
	'\n'  shift 8
	.  reduce 180 (src line 1144)

	compstmt  goto 263
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	newlines  goto 6
	newline  goto 7

state 210
	stmt_for:  FOR ';' ';'.'{' compstmt '}' 
	stmt_for:  FOR ';' ';'.expr '{' compstmt '}' 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 264
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 265
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 211
	stmt_for:  FOR ';' expr.';' '{' compstmt '}' 
	stmt_for:  FOR ';' expr.';' expr '{' compstmt '}' 
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	';'  shift 266
	'['  shift 87
	'.'  shift 89
	.  error


state 212
	stmt_for:  FOR stmt_var_or_lets ';'.';' '{' compstmt '}' 
	stmt_for:  FOR stmt_var_or_lets ';'.';' expr '{' compstmt '}' 
	stmt_for:  FOR stmt_var_or_lets ';'.expr ';' '{' compstmt '}' 
	stmt_for:  FOR stmt_var_or_lets ';'.expr ';' expr '{' compstmt '}' 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	';'  shift 267
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 268
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

213: shift/reduce conflict (shift 8(0), red'n 185(0)) on '\n'
state 213
	stmt_switch:  SWITCH expr '{'.opt_newlines stmt_switch_cases opt_newlines '}' 
	opt_newlines: .    (185)

	'\n'  shift 8
	.  reduce 185 (src line 1153)

	opt_newlines  goto 269
	newlines  goto 131
	newline  goto 7

214: shift/reduce conflict (shift 274(0), red'n 52(0)) on CASE
214: shift/reduce conflict (shift 273(0), red'n 52(0)) on DEFAULT
state 214
	stmt_select:  SELECT '{' opt_newlines.stmt_select_cases opt_newlines '}' 
	stmt_select_cases: .    (52)

	CASE  shift 274
	DEFAULT  shift 273
	.  reduce 52 (src line 415)

	stmt_select_cases  goto 270
	stmt_select_case  goto 272
	stmt_select_default  goto 271

state 215
	expr:  FUNC '(' expr_idents.')' '{' compstmt '}' 
	expr:  FUNC '(' expr_idents.VARARG ')' '{' compstmt '}' 
	expr_idents:  expr_idents.',' opt_newlines IDENT 

	VARARG  shift 276
	')'  shift 275
	','  shift 208
	.  error


state 216
	expr:  FUNC IDENT '('.expr_idents ')' '{' compstmt '}' 
	expr:  FUNC IDENT '('.expr_idents VARARG ')' '{' compstmt '}' 
	expr_idents: .    (107)

	IDENT  shift 151
	.  reduce 107 (src line 709)

	expr_idents  goto 277

state 217
	slice_count:  '[' ']' slice_count.    (120)

	.  reduce 120 (src line 795)


state 218
	exprs:  exprs.',' opt_newlines expr 
	exprs:  exprs.',' opt_newlines expr_ident 
	expr:  '[' opt_newlines exprs.opt_comma_newlines ']' 
	opt_comma_newlines: .    (190)

	','  shift 278
	'\n'  shift 8
	.  reduce 190 (src line 1163)

	opt_comma_newlines  goto 279
	newlines  goto 280
	newline  goto 7

219: shift/reduce conflict (shift 8(0), red'n 185(0)) on '\n'
state 219
	expr:  slice_count type_data '{'.opt_newlines exprs opt_comma_newlines '}' 
	opt_newlines: .    (185)

	'\n'  shift 8
	.  reduce 185 (src line 1153)

	opt_newlines  goto 281
	newlines  goto 131
	newline  goto 7

state 220
	type_data:  type_data '.'.IDENT 

	IDENT  shift 282
	.  error


221: shift/reduce conflict (shift 220(0), red'n 112(10)) on '.'
state 221
	type_data:  type_data.'.' IDENT 
	type_data:  '*' type_data.    (112)

	'.'  shift 220
	.  reduce 112 (src line 739)


222: shift/reduce conflict (shift 220(0), red'n 113(0)) on '.'
state 222
	type_data:  type_data.'.' IDENT 
	type_data:  slice_count type_data.    (113)

	'.'  shift 220
	.  reduce 113 (src line 748)


state 223
	type_data:  MAP '['.type_data ']' type_data 

	IDENT  shift 133
	CHAN  shift 137
	STRUCT  shift 138
	MAP  shift 136
	'*'  shift 134
	'['  shift 139
	.  error

	type_data  goto 283
	slice_count  goto 135

224: shift/reduce conflict (shift 220(0), red'n 115(0)) on '.'
state 224
	type_data:  type_data.'.' IDENT 
	type_data:  CHAN type_data.    (115)

	'.'  shift 220
	.  reduce 115 (src line 762)


state 225
	type_data:  STRUCT '{'.opt_newlines type_data_struct opt_newlines '}' 
	opt_newlines: .    (185)

	'\n'  shift 8
	.  reduce 185 (src line 1153)

	opt_newlines  goto 284
	newlines  goto 131
	newline  goto 7

226: shift/reduce conflict (shift 139(0), red'n 119(0)) on '['
state 226
	slice_count:  '[' ']'.    (119)
	slice_count:  '[' ']'.slice_count 

	'['  shift 139
	.  reduce 119 (src line 790)

	slice_count  goto 217

state 227
	expr:  '(' expr ')'.    (84)

	.  reduce 84 (src line 598)


state 228
	exprs:  exprs.',' opt_newlines expr 
	exprs:  exprs.',' opt_newlines expr_ident 
	expr:  IDENT '(' exprs.VARARG ')' 
	expr:  IDENT '(' exprs.')' 

	VARARG  shift 285
	')'  shift 286
	','  shift 154
	.  error


state 229
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr_ident '[' expr.']' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr_ident '[' expr.':' expr ']' 
	expr_slice:  expr_ident '[' expr.':' ']' 
	expr_slice:  expr_ident '[' expr.':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	':'  shift 288
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	']'  shift 287
	'.'  shift 89
	.  error


state 230
	expr_slice:  expr_ident '[' ':'.expr ']' 
	expr_slice:  expr_ident '[' ':'.expr ':' expr ']' 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 289
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 231
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  LEN '(' expr.')' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	')'  shift 290
	'['  shift 87
	'.'  shift 89
	.  error


state 232
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  IMPORT '(' expr.')' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	')'  shift 291
	'['  shift 87
	'.'  shift 89
	.  error


state 233
	expr:  NEW '(' type_data.')' 
	type_data:  type_data.'.' IDENT 

	')'  shift 292
	'.'  shift 220
	.  error


state 234
	expr:  MAKE '(' type_data.')' 
	expr:  MAKE '(' type_data.',' expr ')' 
	expr:  MAKE '(' type_data.',' expr ',' expr ')' 
	type_data:  type_data.'.' IDENT 

	')'  shift 293
	','  shift 294
	'.'  shift 220
	.  error


state 235
	expr:  MAKE '(' TYPE.IDENT ',' expr ')' 

	IDENT  shift 295
	.  error


state 236
	expr:  MAP '{' opt_newlines.expr_map opt_comma_newlines '}' 
	expr_map: .    (131)

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  reduce 131 (src line 864)

	expr  goto 239
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_map  goto 296
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 237
	expr:  MAP '[' type_data.']' type_data '{' opt_newlines expr_map opt_comma_newlines '}' 
	type_data:  type_data.'.' IDENT 

	']'  shift 297
	'.'  shift 220
	.  error


state 238
	expr:  '{' opt_newlines expr_map.opt_comma_newlines '}' 
	expr_map:  expr_map.',' opt_newlines expr ':' expr 
	opt_comma_newlines: .    (190)

	','  shift 299
	'\n'  shift 8
	.  reduce 190 (src line 1163)

	opt_comma_newlines  goto 298
	newlines  goto 280
	newline  goto 7

state 239
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_map:  expr.':' expr 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	':'  shift 300
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  error


state 240
	stmt_var:  VAR expr_idents ASSIGN.exprs 
	exprs: .    (69)

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  reduce 69 (src line 520)

	exprs  goto 301
	expr  goto 73
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 241
	stmt_lets:  exprs op_assign exprs.    (32)
	exprs:  exprs.',' opt_newlines expr 
	exprs:  exprs.',' opt_newlines expr_ident 

	','  shift 154
	.  reduce 32 (src line 285)


state 242
	stmt_lets:  exprs EQOPCHAN expr.    (34)
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 34 (src line 302)


state 243
	exprs:  exprs ',' opt_newlines.expr 
	exprs:  exprs ',' opt_newlines.expr_ident 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 302
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 303
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 244
	stmt:  MODULE IDENT '{' compstmt.'}' 

	'}'  shift 304
	.  error


state 245
	stmt:  TRY '{' compstmt '}'.CATCH IDENT '{' compstmt '}' FINALLY '{' compstmt '}' 
	stmt:  TRY '{' compstmt '}'.CATCH '{' compstmt '}' FINALLY '{' compstmt '}' 
	stmt:  TRY '{' compstmt '}'.CATCH IDENT '{' compstmt '}' 
	stmt:  TRY '{' compstmt '}'.CATCH '{' compstmt '}' 

	CATCH  shift 305
	.  error


state 246
	stmt:  GO IDENT '(' exprs.VARARG ')' 
	stmt:  GO IDENT '(' exprs.')' 
	exprs:  exprs.',' opt_newlines expr 
	exprs:  exprs.',' opt_newlines expr_ident 
	expr:  IDENT '(' exprs.VARARG ')' 
	expr:  IDENT '(' exprs.')' 

	VARARG  shift 306
	')'  shift 307
	','  shift 154
	.  error


state 247
	stmt:  GO expr '(' exprs.VARARG ')' 
	stmt:  GO expr '(' exprs.')' 
	exprs:  exprs.',' opt_newlines expr 
	exprs:  exprs.',' opt_newlines expr_ident 
	expr:  expr '(' exprs.VARARG ')' 
	expr:  expr '(' exprs.')' 

	VARARG  shift 308
	')'  shift 309
	','  shift 154
	.  error


state 248
	stmt:  DELETE '(' expr ')'.    (20)

	.  reduce 20 (src line 225)


state 249
	stmt:  DELETE '(' expr ','.expr ')' 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 310
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 250
	stmt:  CLOSE '(' expr ')'.    (22)

	.  reduce 22 (src line 235)


state 251
	stmt_if:  stmt_if ELSE IF expr.'{' compstmt '}' 
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'{'  shift 311
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  error


state 252
	stmt_if:  stmt_if ELSE '{' compstmt.'}' 

	'}'  shift 312
	.  error


state 253
	expr:  expr '?' expr ':'.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 313
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 254
	expr:  expr '(' exprs VARARG.')' 

	')'  shift 314
	.  error


state 255
	expr:  expr '(' exprs ')'.    (88)

	.  reduce 88 (src line 618)


state 256
	expr:  expr '[' expr ']'.    (90)

	.  reduce 90 (src line 628)


state 257
	expr_slice:  expr '[' expr ':'.expr ']' 
	expr_slice:  expr '[' expr ':'.']' 
	expr_slice:  expr '[' expr ':'.expr ':' expr ']' 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	']'  shift 316
	'!'  shift 60
	.  error

	expr  goto 315
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 258
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr '[' ':' expr.']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr '[' ':' expr.':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	':'  shift 318
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	']'  shift 317
	'.'  shift 89
	.  error


state 259
	stmt_if:  IF expr '{' compstmt.'}' 

	'}'  shift 319
	.  error


state 260
	stmt_for:  FOR '{' compstmt '}'.    (40)

	.  reduce 40 (src line 345)


state 261
	stmt_for:  FOR expr_idents IN expr.'{' compstmt '}' 
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'{'  shift 320
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  error


state 262
	expr_idents:  expr_idents ',' opt_newlines.IDENT 

	IDENT  shift 321
	.  error


state 263
	stmt_for:  FOR expr '{' compstmt.'}' 

	'}'  shift 322
	.  error


264: shift/reduce conflict (shift 8(0), red'n 185(0)) on '\n'
 264: reduce/reduce conflict  (red'ns 185 and 180) on IDENT
 264: reduce/reduce conflict  (red'ns 185 and 180) on NUMBER
 264: reduce/reduce conflict  (red'ns 185 and 180) on STRING
 264: reduce/reduce conflict  (red'ns 185 and 180) on FUNC
 264: reduce/reduce conflict  (red'ns 185 and 180) on NEW
 264: reduce/reduce conflict  (red'ns 185 and 180) on TRUE
 264: reduce/reduce conflict  (red'ns 185 and 180) on FALSE
 264: reduce/reduce conflict  (red'ns 185 and 180) on NIL
 264: reduce/reduce conflict  (red'ns 185 and 180) on MAKE
 264: reduce/reduce conflict  (red'ns 185 and 180) on OPCHAN
 264: reduce/reduce conflict  (red'ns 185 and 180) on LEN
 264: reduce/reduce conflict  (red'ns 185 and 180) on MAP
 264: reduce/reduce conflict  (red'ns 185 and 180) on IMPORT
 264: reduce/reduce conflict  (red'ns 185 and 180) on '-'
 264: reduce/reduce conflict  (red'ns 185 and 180) on '^'
 264: reduce/reduce conflict  (red'ns 185 and 180) on '*'
 264: reduce/reduce conflict  (red'ns 185 and 180) on '&'
 264: reduce/reduce conflict  (red'ns 185 and 180) on '{'
 264: reduce/reduce conflict  (red'ns 185 and 180) on '}'
 264: reduce/reduce conflict  (red'ns 185 and 180) on '('
 264: reduce/reduce conflict  (red'ns 185 and 180) on ','
264: shift/reduce conflict (shift 5(0), red'n 180(0)) on ';'
 264: reduce/reduce conflict  (red'ns 185 and 180) on '['
 264: reduce/reduce conflict  (red'ns 185 and 180) on '!'
264: shift/reduce conflict (shift 8(0), red'n 180(0)) on '\n'
state 264
	stmt_for:  FOR ';' ';' '{'.compstmt '}' 
	expr:  '{'.opt_newlines expr_map opt_comma_newlines '}' 
	opt_newlines: .    (185)
	opt_term: .    (180)

	';'  shift 5
	'\n'  shift 8
	.  reduce 180 (src line 1144)

	compstmt  goto 323
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	opt_newlines  goto 149
	newlines  goto 206
	newline  goto 7

state 265
	stmt_for:  FOR ';' ';' expr.'{' compstmt '}' 
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'{'  shift 324
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  error


state 266
	stmt_for:  FOR ';' expr ';'.'{' compstmt '}' 
	stmt_for:  FOR ';' expr ';'.expr '{' compstmt '}' 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 325
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 326
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 267
	stmt_for:  FOR stmt_var_or_lets ';' ';'.'{' compstmt '}' 
	stmt_for:  FOR stmt_var_or_lets ';' ';'.expr '{' compstmt '}' 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 327
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 328
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 268
	stmt_for:  FOR stmt_var_or_lets ';' expr.';' '{' compstmt '}' 
	stmt_for:  FOR stmt_var_or_lets ';' expr.';' expr '{' compstmt '}' 
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	';'  shift 329
	'['  shift 87
	'.'  shift 89
	.  error


269: shift/reduce conflict (shift 334(0), red'n 61(0)) on CASE
269: shift/reduce conflict (shift 333(0), red'n 61(0)) on DEFAULT
state 269
	stmt_switch:  SWITCH expr '{' opt_newlines.stmt_switch_cases opt_newlines '}' 
	stmt_switch_cases: .    (61)

	CASE  shift 334
	DEFAULT  shift 333
	.  reduce 61 (src line 473)

	stmt_switch_cases  goto 330
	stmt_switch_case  goto 332
	stmt_switch_default  goto 331

state 270
	stmt_select:  SELECT '{' opt_newlines stmt_select_cases.opt_newlines '}' 
	stmt_select_cases:  stmt_select_cases.stmt_select_case 
	stmt_select_cases:  stmt_select_cases.stmt_select_default 
	opt_newlines: .    (185)

	CASE  shift 274
	DEFAULT  shift 273
	'\n'  shift 8
	.  reduce 185 (src line 1153)

	stmt_select_case  goto 336
	stmt_select_default  goto 337
	opt_newlines  goto 335
	newlines  goto 131
	newline  goto 7

state 271
	stmt_select_cases:  stmt_select_default.    (53)

	.  reduce 53 (src line 420)


state 272
	stmt_select_cases:  stmt_select_case.    (54)

	.  reduce 54 (src line 424)


state 273
	stmt_select_default:  DEFAULT.':' compstmt 
	stmt_select_default:  DEFAULT.':' 

	':'  shift 338
	.  error


state 274
	stmt_select_case:  CASE.stmt ':' compstmt 
	stmt: .    (5)
	exprs: .    (69)

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	RETURN  shift 13
	VAR  shift 50
	THROW  shift 14
	IF  shift 27
	FOR  shift 28
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MODULE  shift 15
	TRY  shift 16
	BREAK  shift 11
	CONTINUE  shift 12
	SWITCH  shift 29
	SELECT  shift 30
	GO  shift 17
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	DELETE  shift 18
	CLOSE  shift 19
	MAP  shift 43
	IMPORT  shift 40
	':'  reduce 5 (src line 151)
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  reduce 69 (src line 520)

	stmt  goto 339
	stmt_var_or_lets  goto 10
	stmt_var  goto 25
	stmt_lets  goto 26
	stmt_if  goto 20
	stmt_for  goto 21
	stmt_switch  goto 22
	stmt_select  goto 23
	exprs  goto 51
	expr  goto 24
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 275
	expr:  FUNC '(' expr_idents ')'.'{' compstmt '}' 

	'{'  shift 340
	.  error


state 276
	expr:  FUNC '(' expr_idents VARARG.')' '{' compstmt '}' 

	')'  shift 341
	.  error


state 277
	expr:  FUNC IDENT '(' expr_idents.')' '{' compstmt '}' 
	expr:  FUNC IDENT '(' expr_idents.VARARG ')' '{' compstmt '}' 
	expr_idents:  expr_idents.',' opt_newlines IDENT 

	VARARG  shift 343
	')'  shift 342
	','  shift 208
	.  error


state 278
	exprs:  exprs ','.opt_newlines expr 
	exprs:  exprs ','.opt_newlines expr_ident 
	opt_comma_newlines:  ','.newlines 
	opt_comma_newlines:  ','.    (193)
	opt_newlines: .    (185)

	'}'  reduce 193 (src line 1167)
	']'  reduce 193 (src line 1167)
	'\n'  shift 8
	.  reduce 185 (src line 1153)

	opt_newlines  goto 243
	newlines  goto 344
	newline  goto 7

state 279
	expr:  '[' opt_newlines exprs opt_comma_newlines.']' 

	']'  shift 345
	.  error


state 280
	newlines:  newlines.newline 
	opt_comma_newlines:  newlines.    (192)

	'\n'  shift 8
	.  reduce 192 (src line 1166)

	newline  goto 71

state 281
	expr:  slice_count type_data '{' opt_newlines.exprs opt_comma_newlines '}' 
	exprs: .    (69)

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  reduce 69 (src line 520)

	exprs  goto 346
	expr  goto 73
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 282
	type_data:  type_data '.' IDENT.    (111)

	.  reduce 111 (src line 730)


state 283
	type_data:  type_data.'.' IDENT 
	type_data:  MAP '[' type_data.']' type_data 

	']'  shift 347
	'.'  shift 220
	.  error


state 284
	type_data:  STRUCT '{' opt_newlines.type_data_struct opt_newlines '}' 

	IDENT  shift 349
	.  error

	type_data_struct  goto 348

state 285
	expr:  IDENT '(' exprs VARARG.')' 

	')'  shift 350
	.  error


state 286
	expr:  IDENT '(' exprs ')'.    (86)

	.  reduce 86 (src line 608)


state 287
	expr:  expr_ident '[' expr ']'.    (89)

	.  reduce 89 (src line 623)


state 288
	expr_slice:  expr_ident '[' expr ':'.expr ']' 
	expr_slice:  expr_ident '[' expr ':'.']' 
	expr_slice:  expr_ident '[' expr ':'.expr ':' expr ']' 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	']'  shift 352
	'!'  shift 60
	.  error

	expr  goto 351
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 289
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr_ident '[' ':' expr.']' 
	expr_slice:  expr_ident '[' ':' expr.':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	':'  shift 354
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	']'  shift 353
	'.'  shift 89
	.  error


state 290
	expr:  LEN '(' expr ')'.    (91)

	.  reduce 91 (src line 633)


state 291
	expr:  IMPORT '(' expr ')'.    (92)

	.  reduce 92 (src line 638)


state 292
	expr:  NEW '(' type_data ')'.    (93)

	.  reduce 93 (src line 643)


state 293
	expr:  MAKE '(' type_data ')'.    (94)

	.  reduce 94 (src line 653)


state 294
	expr:  MAKE '(' type_data ','.expr ')' 
	expr:  MAKE '(' type_data ','.expr ',' expr ')' 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 355
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 295
	expr:  MAKE '(' TYPE IDENT.',' expr ')' 

	','  shift 356
	.  error


state 296
	expr:  MAP '{' opt_newlines expr_map.opt_comma_newlines '}' 
	expr_map:  expr_map.',' opt_newlines expr ':' expr 
	opt_comma_newlines: .    (190)

	','  shift 299
	'\n'  shift 8
	.  reduce 190 (src line 1163)

	opt_comma_newlines  goto 357
	newlines  goto 280
	newline  goto 7

state 297
	expr:  MAP '[' type_data ']'.type_data '{' opt_newlines expr_map opt_comma_newlines '}' 

	IDENT  shift 133
	CHAN  shift 137
	STRUCT  shift 138
	MAP  shift 136
	'*'  shift 134
	'['  shift 139
	.  error

	type_data  goto 358
	slice_count  goto 135

state 298
	expr:  '{' opt_newlines expr_map opt_comma_newlines.'}' 

	'}'  shift 359
	.  error


state 299
	expr_map:  expr_map ','.opt_newlines expr ':' expr 
	opt_comma_newlines:  ','.newlines 
	opt_comma_newlines:  ','.    (193)
	opt_newlines: .    (185)

	'}'  reduce 193 (src line 1167)
	'\n'  shift 8
	.  reduce 185 (src line 1153)

	opt_newlines  goto 360
	newlines  goto 344
	newline  goto 7

state 300
	expr_map:  expr ':'.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 361
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 301
	stmt_var:  VAR expr_idents ASSIGN exprs.    (30)
	exprs:  exprs.',' opt_newlines expr 
	exprs:  exprs.',' opt_newlines expr_ident 

	','  shift 154
	.  reduce 30 (src line 272)


state 302
	exprs:  exprs ',' opt_newlines expr.    (71)
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 71 (src line 529)


 303: reduce/reduce conflict  (red'ns 72 and 122) on $end
 303: reduce/reduce conflict  (red'ns 72 and 122) on VARARG
 303: reduce/reduce conflict  (red'ns 72 and 122) on CASE
 303: reduce/reduce conflict  (red'ns 72 and 122) on DEFAULT
 303: reduce/reduce conflict  (red'ns 72 and 122) on EQOPCHAN
 303: reduce/reduce conflict  (red'ns 72 and 122) on COLASSIGN
 303: reduce/reduce conflict  (red'ns 72 and 122) on ASSIGN
 303: reduce/reduce conflict  (red'ns 72 and 122) on ':'
 303: reduce/reduce conflict  (red'ns 72 and 122) on '}'
 303: reduce/reduce conflict  (red'ns 72 and 122) on ')'
 303: reduce/reduce conflict  (red'ns 72 and 122) on ','
 303: reduce/reduce conflict  (red'ns 72 and 122) on ';'
303: shift/reduce conflict (shift 142(0), red'n 122(0)) on '['
 303: reduce/reduce conflict  (red'ns 72 and 122) on ']'
 303: reduce/reduce conflict  (red'ns 72 and 122) on '\n'
state 303
	exprs:  exprs ',' opt_newlines expr_ident.    (72)
	expr:  expr_ident.'[' expr ']' 
	expr_member_or_ident:  expr_ident.    (122)
	expr_slice:  expr_ident.'[' expr ':' expr ']' 
	expr_slice:  expr_ident.'[' expr ':' ']' 
	expr_slice:  expr_ident.'[' ':' expr ']' 
	expr_slice:  expr_ident.'[' ':' expr ':' expr ']' 
	expr_slice:  expr_ident.'[' expr ':' expr ':' expr ']' 

	$end  reduce 72 (src line 536)
	VARARG  reduce 72 (src line 536)
	CASE  reduce 72 (src line 536)
	DEFAULT  reduce 72 (src line 536)
	EQOPCHAN  reduce 72 (src line 536)
	COLASSIGN  reduce 72 (src line 536)
	ASSIGN  reduce 72 (src line 536)
	':'  reduce 72 (src line 536)
	'}'  reduce 72 (src line 536)
	')'  reduce 72 (src line 536)
	','  reduce 72 (src line 536)
	';'  reduce 72 (src line 536)
	'['  shift 142
	']'  reduce 72 (src line 536)
	'\n'  reduce 72 (src line 536)
	.  reduce 122 (src line 805)


state 304
	stmt:  MODULE IDENT '{' compstmt '}'.    (11)

	.  reduce 11 (src line 180)


state 305
	stmt:  TRY '{' compstmt '}' CATCH.IDENT '{' compstmt '}' FINALLY '{' compstmt '}' 
	stmt:  TRY '{' compstmt '}' CATCH.'{' compstmt '}' FINALLY '{' compstmt '}' 
	stmt:  TRY '{' compstmt '}' CATCH.IDENT '{' compstmt '}' 
	stmt:  TRY '{' compstmt '}' CATCH.'{' compstmt '}' 

	IDENT  shift 362
	'{'  shift 363
	.  error


state 306
	stmt:  GO IDENT '(' exprs VARARG.')' 
	expr:  IDENT '(' exprs VARARG.')' 

	')'  shift 364
	.  error


state 307
	stmt:  GO IDENT '(' exprs ')'.    (17)
	expr:  IDENT '(' exprs ')'.    (86)

	$end  reduce 17 (src line 210)
	CASE  reduce 17 (src line 210)
	DEFAULT  reduce 17 (src line 210)
	':'  reduce 17 (src line 210)
	'}'  reduce 17 (src line 210)
	';'  reduce 17 (src line 210)
	'\n'  reduce 17 (src line 210)
	.  reduce 86 (src line 608)


state 308
	stmt:  GO expr '(' exprs VARARG.')' 
	expr:  expr '(' exprs VARARG.')' 

	')'  shift 365
	.  error


state 309
	stmt:  GO expr '(' exprs ')'.    (19)
	expr:  expr '(' exprs ')'.    (88)

	$end  reduce 19 (src line 220)
	CASE  reduce 19 (src line 220)
	DEFAULT  reduce 19 (src line 220)
	':'  reduce 19 (src line 220)
	'}'  reduce 19 (src line 220)
	';'  reduce 19 (src line 220)
	'\n'  reduce 19 (src line 220)
	.  reduce 88 (src line 618)


state 310
	stmt:  DELETE '(' expr ',' expr.')' 
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	')'  shift 366
	'['  shift 87
	'.'  shift 89
	.  error


311: shift/reduce conflict (shift 5(0), red'n 180(0)) on ';'
311: shift/reduce conflict (shift 8(0), red'n 180(0)) on '\n'
state 311
	stmt_if:  stmt_if ELSE IF expr '{'.compstmt '}' 
	opt_term: .    (180)

	';'  shift 5
	'\n'  shift 8
	.  reduce 180 (src line 1144)

	compstmt  goto 367
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	newlines  goto 6
	newline  goto 7

state 312
	stmt_if:  stmt_if ELSE '{' compstmt '}'.    (39)

	.  reduce 39 (src line 336)


313: shift/reduce conflict (shift 86(0), red'n 75(3)) on '('
313: shift/reduce conflict (shift 87(0), red'n 75(3)) on '['
313: shift/reduce conflict (shift 89(0), red'n 75(3)) on '.'
state 313
	expr:  expr.'?' expr ':' expr 
	expr:  expr '?' expr ':' expr.    (75)
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 75 (src line 553)


state 314
	expr:  expr '(' exprs VARARG ')'.    (87)

	.  reduce 87 (src line 613)


state 315
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr '[' expr ':' expr.']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_slice:  expr '[' expr ':' expr.':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	':'  shift 369
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	']'  shift 368
	'.'  shift 89
	.  error


state 316
	expr_slice:  expr '[' expr ':' ']'.    (140)

	.  reduce 140 (src line 907)


state 317
	expr_slice:  expr '[' ':' expr ']'.    (141)

	.  reduce 141 (src line 911)


state 318
	expr_slice:  expr '[' ':' expr ':'.expr ']' 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 370
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 319
	stmt_if:  IF expr '{' compstmt '}'.    (37)

	.  reduce 37 (src line 325)


320: shift/reduce conflict (shift 5(0), red'n 180(0)) on ';'
320: shift/reduce conflict (shift 8(0), red'n 180(0)) on '\n'
state 320
	stmt_for:  FOR expr_idents IN expr '{'.compstmt '}' 
	opt_term: .    (180)

	';'  shift 5
	'\n'  shift 8
	.  reduce 180 (src line 1144)

	compstmt  goto 371
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	newlines  goto 6
	newline  goto 7

state 321
	expr_idents:  expr_idents ',' opt_newlines IDENT.    (109)

	.  reduce 109 (src line 717)


state 322
	stmt_for:  FOR expr '{' compstmt '}'.    (42)

	.  reduce 42 (src line 362)


state 323
	stmt_for:  FOR ';' ';' '{' compstmt.'}' 

	'}'  shift 372
	.  error


324: shift/reduce conflict (shift 5(0), red'n 180(0)) on ';'
324: shift/reduce conflict (shift 8(0), red'n 180(0)) on '\n'
state 324
	stmt_for:  FOR ';' ';' expr '{'.compstmt '}' 
	opt_term: .    (180)

	';'  shift 5
	'\n'  shift 8
	.  reduce 180 (src line 1144)

	compstmt  goto 373
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	newlines  goto 6
	newline  goto 7

325: shift/reduce conflict (shift 8(0), red'n 185(0)) on '\n'
 325: reduce/reduce conflict  (red'ns 185 and 180) on IDENT
 325: reduce/reduce conflict  (red'ns 185 and 180) on NUMBER
 325: reduce/reduce conflict  (red'ns 185 and 180) on STRING
 325: reduce/reduce conflict  (red'ns 185 and 180) on FUNC
 325: reduce/reduce conflict  (red'ns 185 and 180) on NEW
 325: reduce/reduce conflict  (red'ns 185 and 180) on TRUE
 325: reduce/reduce conflict  (red'ns 185 and 180) on FALSE
 325: reduce/reduce conflict  (red'ns 185 and 180) on NIL
 325: reduce/reduce conflict  (red'ns 185 and 180) on MAKE
 325: reduce/reduce conflict  (red'ns 185 and 180) on OPCHAN
 325: reduce/reduce conflict  (red'ns 185 and 180) on LEN
 325: reduce/reduce conflict  (red'ns 185 and 180) on MAP
 325: reduce/reduce conflict  (red'ns 185 and 180) on IMPORT
 325: reduce/reduce conflict  (red'ns 185 and 180) on '-'
 325: reduce/reduce conflict  (red'ns 185 and 180) on '^'
 325: reduce/reduce conflict  (red'ns 185 and 180) on '*'
 325: reduce/reduce conflict  (red'ns 185 and 180) on '&'
 325: reduce/reduce conflict  (red'ns 185 and 180) on '{'
 325: reduce/reduce conflict  (red'ns 185 and 180) on '}'
 325: reduce/reduce conflict  (red'ns 185 and 180) on '('
 325: reduce/reduce conflict  (red'ns 185 and 180) on ','
325: shift/reduce conflict (shift 5(0), red'n 180(0)) on ';'
 325: reduce/reduce conflict  (red'ns 185 and 180) on '['
 325: reduce/reduce conflict  (red'ns 185 and 180) on '!'
325: shift/reduce conflict (shift 8(0), red'n 180(0)) on '\n'
state 325
	stmt_for:  FOR ';' expr ';' '{'.compstmt '}' 
	expr:  '{'.opt_newlines expr_map opt_comma_newlines '}' 
	opt_newlines: .    (185)
	opt_term: .    (180)

	';'  shift 5
	'\n'  shift 8
	.  reduce 180 (src line 1144)

	compstmt  goto 374
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	opt_newlines  goto 149
	newlines  goto 206
	newline  goto 7

state 326
	stmt_for:  FOR ';' expr ';' expr.'{' compstmt '}' 
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'{'  shift 375
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  error


327: shift/reduce conflict (shift 8(0), red'n 185(0)) on '\n'
 327: reduce/reduce conflict  (red'ns 185 and 180) on IDENT
 327: reduce/reduce conflict  (red'ns 185 and 180) on NUMBER
 327: reduce/reduce conflict  (red'ns 185 and 180) on STRING
 327: reduce/reduce conflict  (red'ns 185 and 180) on FUNC
 327: reduce/reduce conflict  (red'ns 185 and 180) on NEW
 327: reduce/reduce conflict  (red'ns 185 and 180) on TRUE
 327: reduce/reduce conflict  (red'ns 185 and 180) on FALSE
 327: reduce/reduce conflict  (red'ns 185 and 180) on NIL
 327: reduce/reduce conflict  (red'ns 185 and 180) on MAKE
 327: reduce/reduce conflict  (red'ns 185 and 180) on OPCHAN
 327: reduce/reduce conflict  (red'ns 185 and 180) on LEN
 327: reduce/reduce conflict  (red'ns 185 and 180) on MAP
 327: reduce/reduce conflict  (red'ns 185 and 180) on IMPORT
 327: reduce/reduce conflict  (red'ns 185 and 180) on '-'
 327: reduce/reduce conflict  (red'ns 185 and 180) on '^'
 327: reduce/reduce conflict  (red'ns 185 and 180) on '*'
 327: reduce/reduce conflict  (red'ns 185 and 180) on '&'
 327: reduce/reduce conflict  (red'ns 185 and 180) on '{'
 327: reduce/reduce conflict  (red'ns 185 and 180) on '}'
 327: reduce/reduce conflict  (red'ns 185 and 180) on '('
 327: reduce/reduce conflict  (red'ns 185 and 180) on ','
327: shift/reduce conflict (shift 5(0), red'n 180(0)) on ';'
 327: reduce/reduce conflict  (red'ns 185 and 180) on '['
 327: reduce/reduce conflict  (red'ns 185 and 180) on '!'
327: shift/reduce conflict (shift 8(0), red'n 180(0)) on '\n'
state 327
	stmt_for:  FOR stmt_var_or_lets ';' ';' '{'.compstmt '}' 
	expr:  '{'.opt_newlines expr_map opt_comma_newlines '}' 
	opt_newlines: .    (185)
	opt_term: .    (180)

	';'  shift 5
	'\n'  shift 8
	.  reduce 180 (src line 1144)

	compstmt  goto 376
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	opt_newlines  goto 149
	newlines  goto 206
	newline  goto 7

state 328
	stmt_for:  FOR stmt_var_or_lets ';' ';' expr.'{' compstmt '}' 
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'{'  shift 377
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  error


state 329
	stmt_for:  FOR stmt_var_or_lets ';' expr ';'.'{' compstmt '}' 
	stmt_for:  FOR stmt_var_or_lets ';' expr ';'.expr '{' compstmt '}' 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 378
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 379
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 330
	stmt_switch:  SWITCH expr '{' opt_newlines stmt_switch_cases.opt_newlines '}' 
	stmt_switch_cases:  stmt_switch_cases.stmt_switch_case 
	stmt_switch_cases:  stmt_switch_cases.stmt_switch_default 
	opt_newlines: .    (185)

	CASE  shift 334
	DEFAULT  shift 333
	'\n'  shift 8
	.  reduce 185 (src line 1153)

	stmt_switch_case  goto 381
	stmt_switch_default  goto 382
	opt_newlines  goto 380
	newlines  goto 131
	newline  goto 7

state 331
	stmt_switch_cases:  stmt_switch_default.    (62)

	.  reduce 62 (src line 478)


state 332
	stmt_switch_cases:  stmt_switch_case.    (63)

	.  reduce 63 (src line 482)


state 333
	stmt_switch_default:  DEFAULT.':' compstmt 

	':'  shift 383
	.  error


state 334
	stmt_switch_case:  CASE.expr ':' compstmt 
	stmt_switch_case:  CASE.exprs ':' compstmt 
	exprs: .    (69)

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  reduce 69 (src line 520)

	exprs  goto 385
	expr  goto 384
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 335
	stmt_select:  SELECT '{' opt_newlines stmt_select_cases opt_newlines.'}' 

	'}'  shift 386
	.  error


state 336
	stmt_select_cases:  stmt_select_cases stmt_select_case.    (55)

	.  reduce 55 (src line 428)


state 337
	stmt_select_cases:  stmt_select_cases stmt_select_default.    (56)

	.  reduce 56 (src line 434)


338: shift/reduce conflict (shift 8(0), red'n 59(3)) on '\n'
 338: reduce/reduce conflict  (red'ns 59 and 180) on CASE
 338: reduce/reduce conflict  (red'ns 59 and 180) on DEFAULT
 338: reduce/reduce conflict  (red'ns 59 and 180) on '}'
338: shift/reduce conflict (shift 5(0), red'n 180(0)) on ';'
338: shift/reduce conflict (shift 8(0), red'n 180(0)) on '\n'
state 338
	stmt_select_default:  DEFAULT ':'.compstmt 
	stmt_select_default:  DEFAULT ':'.    (59)
	opt_term: .    (180)

	CASE  reduce 59 (src line 459)
	DEFAULT  reduce 59 (src line 459)
	'}'  reduce 59 (src line 459)
	';'  shift 5
	'\n'  shift 8
	.  reduce 180 (src line 1144)

	compstmt  goto 387
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	newlines  goto 6
	newline  goto 7

state 339
	stmt_select_case:  CASE stmt.':' compstmt 

	':'  shift 388
	.  error


340: shift/reduce conflict (shift 5(0), red'n 180(0)) on ';'
340: shift/reduce conflict (shift 8(0), red'n 180(0)) on '\n'
state 340
	expr:  FUNC '(' expr_idents ')' '{'.compstmt '}' 
	opt_term: .    (180)

	';'  shift 5
	'\n'  shift 8
	.  reduce 180 (src line 1144)

	compstmt  goto 389
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	newlines  goto 6
	newline  goto 7

state 341
	expr:  FUNC '(' expr_idents VARARG ')'.'{' compstmt '}' 

	'{'  shift 390
	.  error


state 342
	expr:  FUNC IDENT '(' expr_idents ')'.'{' compstmt '}' 

	'{'  shift 391
	.  error


state 343
	expr:  FUNC IDENT '(' expr_idents VARARG.')' '{' compstmt '}' 

	')'  shift 392
	.  error


state 344
	opt_newlines:  newlines.    (186)
	newlines:  newlines.newline 
	opt_comma_newlines:  ',' newlines.    (191)

	'}'  reduce 191 (src line 1165)
	']'  reduce 191 (src line 1165)
	'\n'  shift 8
	.  reduce 186 (src line 1155)

	newline  goto 71

state 345
	expr:  '[' opt_newlines exprs opt_comma_newlines ']'.    (82)

	.  reduce 82 (src line 588)


state 346
	exprs:  exprs.',' opt_newlines expr 
	exprs:  exprs.',' opt_newlines expr_ident 
	expr:  slice_count type_data '{' opt_newlines exprs.opt_comma_newlines '}' 
	opt_comma_newlines: .    (190)

	','  shift 278
	'\n'  shift 8
	.  reduce 190 (src line 1163)

	opt_comma_newlines  goto 393
	newlines  goto 280
	newline  goto 7

state 347
	type_data:  MAP '[' type_data ']'.type_data 

	IDENT  shift 133
	CHAN  shift 137
	STRUCT  shift 138
	MAP  shift 136
	'*'  shift 134
	'['  shift 139
	.  error

	type_data  goto 394
	slice_count  goto 135

state 348
	type_data:  STRUCT '{' opt_newlines type_data_struct.opt_newlines '}' 
	type_data_struct:  type_data_struct.',' opt_newlines IDENT type_data 
	opt_newlines: .    (185)

	','  shift 396
	'\n'  shift 8
	.  reduce 185 (src line 1153)

	opt_newlines  goto 395
	newlines  goto 131
	newline  goto 7

state 349
	type_data_struct:  IDENT.type_data 

	IDENT  shift 133
	CHAN  shift 137
	STRUCT  shift 138
	MAP  shift 136
	'*'  shift 134
	'['  shift 139
	.  error

	type_data  goto 397
	slice_count  goto 135

state 350
	expr:  IDENT '(' exprs VARARG ')'.    (85)

	.  reduce 85 (src line 603)


state 351
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr_ident '[' expr ':' expr.']' 
	expr_slice:  expr_ident '[' expr ':' expr.':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	':'  shift 399
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	']'  shift 398
	'.'  shift 89
	.  error


state 352
	expr_slice:  expr_ident '[' expr ':' ']'.    (135)

	.  reduce 135 (src line 887)


state 353
	expr_slice:  expr_ident '[' ':' expr ']'.    (136)

	.  reduce 136 (src line 891)


state 354
	expr_slice:  expr_ident '[' ':' expr ':'.expr ']' 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 400
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 355
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  MAKE '(' type_data ',' expr.')' 
	expr:  MAKE '(' type_data ',' expr.',' expr ')' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	')'  shift 401
	','  shift 402
	'['  shift 87
	'.'  shift 89
	.  error


state 356
	expr:  MAKE '(' TYPE IDENT ','.expr ')' 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 403
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 357
	expr:  MAP '{' opt_newlines expr_map opt_comma_newlines.'}' 

	'}'  shift 404
	.  error


state 358
	expr:  MAP '[' type_data ']' type_data.'{' opt_newlines expr_map opt_comma_newlines '}' 
	type_data:  type_data.'.' IDENT 

	'{'  shift 405
	'.'  shift 220
	.  error


state 359
	expr:  '{' opt_newlines expr_map opt_comma_newlines '}'.    (101)

	.  reduce 101 (src line 690)


state 360
	expr_map:  expr_map ',' opt_newlines.expr ':' expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 406
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 361
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_map:  expr ':' expr.    (132)
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 132 (src line 869)


state 362
	stmt:  TRY '{' compstmt '}' CATCH IDENT.'{' compstmt '}' FINALLY '{' compstmt '}' 
	stmt:  TRY '{' compstmt '}' CATCH IDENT.'{' compstmt '}' 

	'{'  shift 407
	.  error


363: shift/reduce conflict (shift 5(0), red'n 180(0)) on ';'
363: shift/reduce conflict (shift 8(0), red'n 180(0)) on '\n'
state 363
	stmt:  TRY '{' compstmt '}' CATCH '{'.compstmt '}' FINALLY '{' compstmt '}' 
	stmt:  TRY '{' compstmt '}' CATCH '{'.compstmt '}' 
	opt_term: .    (180)

	';'  shift 5
	'\n'  shift 8
	.  reduce 180 (src line 1144)

	compstmt  goto 408
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	newlines  goto 6
	newline  goto 7

state 364
	stmt:  GO IDENT '(' exprs VARARG ')'.    (16)
	expr:  IDENT '(' exprs VARARG ')'.    (85)

	$end  reduce 16 (src line 205)
	CASE  reduce 16 (src line 205)
	DEFAULT  reduce 16 (src line 205)
	':'  reduce 16 (src line 205)
	'}'  reduce 16 (src line 205)
	';'  reduce 16 (src line 205)
	'\n'  reduce 16 (src line 205)
	.  reduce 85 (src line 603)


state 365
	stmt:  GO expr '(' exprs VARARG ')'.    (18)
	expr:  expr '(' exprs VARARG ')'.    (87)

	$end  reduce 18 (src line 215)
	CASE  reduce 18 (src line 215)
	DEFAULT  reduce 18 (src line 215)
	':'  reduce 18 (src line 215)
	'}'  reduce 18 (src line 215)
	';'  reduce 18 (src line 215)
	'\n'  reduce 18 (src line 215)
	.  reduce 87 (src line 613)


state 366
	stmt:  DELETE '(' expr ',' expr ')'.    (21)

	.  reduce 21 (src line 230)


state 367
	stmt_if:  stmt_if ELSE IF expr '{' compstmt.'}' 

	'}'  shift 409
	.  error


state 368
	expr_slice:  expr '[' expr ':' expr ']'.    (139)

	.  reduce 139 (src line 903)


state 369
	expr_slice:  expr '[' expr ':' expr ':'.expr ']' 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 410
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 370
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr '[' ':' expr ':' expr.']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	']'  shift 411
	'.'  shift 89
	.  error


state 371
	stmt_for:  FOR expr_idents IN expr '{' compstmt.'}' 

	'}'  shift 412
	.  error


state 372
	stmt_for:  FOR ';' ';' '{' compstmt '}'.    (43)

	.  reduce 43 (src line 367)


state 373
	stmt_for:  FOR ';' ';' expr '{' compstmt.'}' 

	'}'  shift 413
	.  error


state 374
	stmt_for:  FOR ';' expr ';' '{' compstmt.'}' 

	'}'  shift 414
	.  error


375: shift/reduce conflict (shift 5(0), red'n 180(0)) on ';'
375: shift/reduce conflict (shift 8(0), red'n 180(0)) on '\n'
state 375
	stmt_for:  FOR ';' expr ';' expr '{'.compstmt '}' 
	opt_term: .    (180)

	';'  shift 5
	'\n'  shift 8
	.  reduce 180 (src line 1144)

	compstmt  goto 415
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	newlines  goto 6
	newline  goto 7

state 376
	stmt_for:  FOR stmt_var_or_lets ';' ';' '{' compstmt.'}' 

	'}'  shift 416
	.  error


377: shift/reduce conflict (shift 5(0), red'n 180(0)) on ';'
377: shift/reduce conflict (shift 8(0), red'n 180(0)) on '\n'
state 377
	stmt_for:  FOR stmt_var_or_lets ';' ';' expr '{'.compstmt '}' 
	opt_term: .    (180)

	';'  shift 5
	'\n'  shift 8
	.  reduce 180 (src line 1144)

	compstmt  goto 417
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	newlines  goto 6
	newline  goto 7

378: shift/reduce conflict (shift 8(0), red'n 185(0)) on '\n'
 378: reduce/reduce conflict  (red'ns 185 and 180) on IDENT
 378: reduce/reduce conflict  (red'ns 185 and 180) on NUMBER
 378: reduce/reduce conflict  (red'ns 185 and 180) on STRING
 378: reduce/reduce conflict  (red'ns 185 and 180) on FUNC
 378: reduce/reduce conflict  (red'ns 185 and 180) on NEW
 378: reduce/reduce conflict  (red'ns 185 and 180) on TRUE
 378: reduce/reduce conflict  (red'ns 185 and 180) on FALSE
 378: reduce/reduce conflict  (red'ns 185 and 180) on NIL
 378: reduce/reduce conflict  (red'ns 185 and 180) on MAKE
 378: reduce/reduce conflict  (red'ns 185 and 180) on OPCHAN
 378: reduce/reduce conflict  (red'ns 185 and 180) on LEN
 378: reduce/reduce conflict  (red'ns 185 and 180) on MAP
 378: reduce/reduce conflict  (red'ns 185 and 180) on IMPORT
 378: reduce/reduce conflict  (red'ns 185 and 180) on '-'
 378: reduce/reduce conflict  (red'ns 185 and 180) on '^'
 378: reduce/reduce conflict  (red'ns 185 and 180) on '*'
 378: reduce/reduce conflict  (red'ns 185 and 180) on '&'
 378: reduce/reduce conflict  (red'ns 185 and 180) on '{'
 378: reduce/reduce conflict  (red'ns 185 and 180) on '}'
 378: reduce/reduce conflict  (red'ns 185 and 180) on '('
 378: reduce/reduce conflict  (red'ns 185 and 180) on ','
378: shift/reduce conflict (shift 5(0), red'n 180(0)) on ';'
 378: reduce/reduce conflict  (red'ns 185 and 180) on '['
 378: reduce/reduce conflict  (red'ns 185 and 180) on '!'
378: shift/reduce conflict (shift 8(0), red'n 180(0)) on '\n'
state 378
	stmt_for:  FOR stmt_var_or_lets ';' expr ';' '{'.compstmt '}' 
	expr:  '{'.opt_newlines expr_map opt_comma_newlines '}' 
	opt_newlines: .    (185)
	opt_term: .    (180)

	';'  shift 5
	'\n'  shift 8
	.  reduce 180 (src line 1144)

	compstmt  goto 418
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	opt_newlines  goto 149
	newlines  goto 206
	newline  goto 7

state 379
	stmt_for:  FOR stmt_var_or_lets ';' expr ';' expr.'{' compstmt '}' 
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'{'  shift 419
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  error


state 380
	stmt_switch:  SWITCH expr '{' opt_newlines stmt_switch_cases opt_newlines.'}' 

	'}'  shift 420
	.  error


state 381
	stmt_switch_cases:  stmt_switch_cases stmt_switch_case.    (64)

	.  reduce 64 (src line 486)


state 382
	stmt_switch_cases:  stmt_switch_cases stmt_switch_default.    (65)

	.  reduce 65 (src line 492)


383: shift/reduce conflict (shift 5(0), red'n 180(0)) on ';'
383: shift/reduce conflict (shift 8(0), red'n 180(0)) on '\n'
state 383
	stmt_switch_default:  DEFAULT ':'.compstmt 
	opt_term: .    (180)

	';'  shift 5
	'\n'  shift 8
	.  reduce 180 (src line 1144)

	compstmt  goto 421
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	newlines  goto 6
	newline  goto 7

384: shift/reduce conflict (shift 422(3), red'n 70(0)) on ':'
state 384
	stmt_switch_case:  CASE expr.':' compstmt 
	exprs:  expr.    (70)
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	':'  shift 422
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 70 (src line 525)


state 385
	stmt_switch_case:  CASE exprs.':' compstmt 
	exprs:  exprs.',' opt_newlines expr 
	exprs:  exprs.',' opt_newlines expr_ident 

	':'  shift 423
	','  shift 154
	.  error


state 386
	stmt_select:  SELECT '{' opt_newlines stmt_select_cases opt_newlines '}'.    (51)

	.  reduce 51 (src line 408)


state 387
	stmt_select_default:  DEFAULT ':' compstmt.    (58)

	.  reduce 58 (src line 454)


388: shift/reduce conflict (shift 5(0), red'n 180(0)) on ';'
388: shift/reduce conflict (shift 8(0), red'n 180(0)) on '\n'
state 388
	stmt_select_case:  CASE stmt ':'.compstmt 
	opt_term: .    (180)

	';'  shift 5
	'\n'  shift 8
	.  reduce 180 (src line 1144)

	compstmt  goto 424
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	newlines  goto 6
	newline  goto 7

state 389
	expr:  FUNC '(' expr_idents ')' '{' compstmt.'}' 

	'}'  shift 425
	.  error


390: shift/reduce conflict (shift 5(0), red'n 180(0)) on ';'
390: shift/reduce conflict (shift 8(0), red'n 180(0)) on '\n'
state 390
	expr:  FUNC '(' expr_idents VARARG ')' '{'.compstmt '}' 
	opt_term: .    (180)

	';'  shift 5
	'\n'  shift 8
	.  reduce 180 (src line 1144)

	compstmt  goto 426
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	newlines  goto 6
	newline  goto 7

391: shift/reduce conflict (shift 5(0), red'n 180(0)) on ';'
391: shift/reduce conflict (shift 8(0), red'n 180(0)) on '\n'
state 391
	expr:  FUNC IDENT '(' expr_idents ')' '{'.compstmt '}' 
	opt_term: .    (180)

	';'  shift 5
	'\n'  shift 8
	.  reduce 180 (src line 1144)

	compstmt  goto 427
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	newlines  goto 6
	newline  goto 7

state 392
	expr:  FUNC IDENT '(' expr_idents VARARG ')'.'{' compstmt '}' 

	'{'  shift 428
	.  error


state 393
	expr:  slice_count type_data '{' opt_newlines exprs opt_comma_newlines.'}' 

	'}'  shift 429
	.  error


394: shift/reduce conflict (shift 220(0), red'n 114(0)) on '.'
state 394
	type_data:  type_data.'.' IDENT 
	type_data:  MAP '[' type_data ']' type_data.    (114)

	'.'  shift 220
	.  reduce 114 (src line 758)


state 395
	type_data:  STRUCT '{' opt_newlines type_data_struct opt_newlines.'}' 

	'}'  shift 430
	.  error


state 396
	type_data_struct:  type_data_struct ','.opt_newlines IDENT type_data 
	opt_newlines: .    (185)

	'\n'  shift 8
	.  reduce 185 (src line 1153)

	opt_newlines  goto 431
	newlines  goto 131
	newline  goto 7

state 397
	type_data:  type_data.'.' IDENT 
	type_data_struct:  IDENT type_data.    (117)

	'.'  shift 220
	.  reduce 117 (src line 776)


state 398
	expr_slice:  expr_ident '[' expr ':' expr ']'.    (134)

	.  reduce 134 (src line 882)


state 399
	expr_slice:  expr_ident '[' expr ':' expr ':'.expr ']' 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 432
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 400
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr_ident '[' ':' expr ':' expr.']' 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	']'  shift 433
	'.'  shift 89
	.  error


state 401
	expr:  MAKE '(' type_data ',' expr ')'.    (95)

	.  reduce 95 (src line 658)


state 402
	expr:  MAKE '(' type_data ',' expr ','.expr ')' 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 434
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 403
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  MAKE '(' TYPE IDENT ',' expr.')' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	')'  shift 435
	'['  shift 87
	'.'  shift 89
	.  error


state 404
	expr:  MAP '{' opt_newlines expr_map opt_comma_newlines '}'.    (99)

	.  reduce 99 (src line 678)


405: shift/reduce conflict (shift 8(0), red'n 185(0)) on '\n'
state 405
	expr:  MAP '[' type_data ']' type_data '{'.opt_newlines expr_map opt_comma_newlines '}' 
	opt_newlines: .    (185)

	'\n'  shift 8
	.  reduce 185 (src line 1153)

	opt_newlines  goto 436
	newlines  goto 131
	newline  goto 7

state 406
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_map:  expr_map ',' opt_newlines expr.':' expr 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	':'  shift 437
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  error


407: shift/reduce conflict (shift 5(0), red'n 180(0)) on ';'
407: shift/reduce conflict (shift 8(0), red'n 180(0)) on '\n'
state 407
	stmt:  TRY '{' compstmt '}' CATCH IDENT '{'.compstmt '}' FINALLY '{' compstmt '}' 
	stmt:  TRY '{' compstmt '}' CATCH IDENT '{'.compstmt '}' 
	opt_term: .    (180)

	';'  shift 5
	'\n'  shift 8
	.  reduce 180 (src line 1144)

	compstmt  goto 438
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	newlines  goto 6
	newline  goto 7

state 408
	stmt:  TRY '{' compstmt '}' CATCH '{' compstmt.'}' FINALLY '{' compstmt '}' 
	stmt:  TRY '{' compstmt '}' CATCH '{' compstmt.'}' 

	'}'  shift 439
	.  error


state 409
	stmt_if:  stmt_if ELSE IF expr '{' compstmt '}'.    (38)

	.  reduce 38 (src line 331)


state 410
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_slice:  expr '[' expr ':' expr ':' expr.']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	']'  shift 440
	'.'  shift 89
	.  error


state 411
	expr_slice:  expr '[' ':' expr ':' expr ']'.    (142)

	.  reduce 142 (src line 915)


state 412
	stmt_for:  FOR expr_idents IN expr '{' compstmt '}'.    (41)

	.  reduce 41 (src line 351)


state 413
	stmt_for:  FOR ';' ';' expr '{' compstmt '}'.    (44)

	.  reduce 44 (src line 372)


state 414
	stmt_for:  FOR ';' expr ';' '{' compstmt '}'.    (45)

	.  reduce 45 (src line 377)


state 415
	stmt_for:  FOR ';' expr ';' expr '{' compstmt.'}' 

	'}'  shift 441
	.  error


state 416
	stmt_for:  FOR stmt_var_or_lets ';' ';' '{' compstmt '}'.    (47)

	.  reduce 47 (src line 387)


state 417
	stmt_for:  FOR stmt_var_or_lets ';' ';' expr '{' compstmt.'}' 

	'}'  shift 442
	.  error


state 418
	stmt_for:  FOR stmt_var_or_lets ';' expr ';' '{' compstmt.'}' 

	'}'  shift 443
	.  error


419: shift/reduce conflict (shift 5(0), red'n 180(0)) on ';'
419: shift/reduce conflict (shift 8(0), red'n 180(0)) on '\n'
state 419
	stmt_for:  FOR stmt_var_or_lets ';' expr ';' expr '{'.compstmt '}' 
	opt_term: .    (180)

	';'  shift 5
	'\n'  shift 8
	.  reduce 180 (src line 1144)

	compstmt  goto 444
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	newlines  goto 6
	newline  goto 7

state 420
	stmt_switch:  SWITCH expr '{' opt_newlines stmt_switch_cases opt_newlines '}'.    (60)

	.  reduce 60 (src line 464)


state 421
	stmt_switch_default:  DEFAULT ':' compstmt.    (68)

	.  reduce 68 (src line 513)


422: shift/reduce conflict (shift 5(0), red'n 180(0)) on ';'
422: shift/reduce conflict (shift 8(0), red'n 180(0)) on '\n'
state 422
	stmt_switch_case:  CASE expr ':'.compstmt 
	opt_term: .    (180)

	';'  shift 5
	'\n'  shift 8
	.  reduce 180 (src line 1144)

	compstmt  goto 445
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	newlines  goto 6
	newline  goto 7

423: shift/reduce conflict (shift 5(0), red'n 180(0)) on ';'
423: shift/reduce conflict (shift 8(0), red'n 180(0)) on '\n'
state 423
	stmt_switch_case:  CASE exprs ':'.compstmt 
	opt_term: .    (180)

	';'  shift 5
	'\n'  shift 8
	.  reduce 180 (src line 1144)

	compstmt  goto 446
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	newlines  goto 6
	newline  goto 7

state 424
	stmt_select_case:  CASE stmt ':' compstmt.    (57)

	.  reduce 57 (src line 444)


state 425
	expr:  FUNC '(' expr_idents ')' '{' compstmt '}'.    (77)

	.  reduce 77 (src line 563)


state 426
	expr:  FUNC '(' expr_idents VARARG ')' '{' compstmt.'}' 

	'}'  shift 447
	.  error


state 427
	expr:  FUNC IDENT '(' expr_idents ')' '{' compstmt.'}' 

	'}'  shift 448
	.  error


428: shift/reduce conflict (shift 5(0), red'n 180(0)) on ';'
428: shift/reduce conflict (shift 8(0), red'n 180(0)) on '\n'
state 428
	expr:  FUNC IDENT '(' expr_idents VARARG ')' '{'.compstmt '}' 
	opt_term: .    (180)

	';'  shift 5
	'\n'  shift 8
	.  reduce 180 (src line 1144)

	compstmt  goto 449
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	newlines  goto 6
	newline  goto 7

state 429
	expr:  slice_count type_data '{' opt_newlines exprs opt_comma_newlines '}'.    (83)

	.  reduce 83 (src line 593)


state 430
	type_data:  STRUCT '{' opt_newlines type_data_struct opt_newlines '}'.    (116)

	.  reduce 116 (src line 771)


state 431
	type_data_struct:  type_data_struct ',' opt_newlines.IDENT type_data 

	IDENT  shift 450
	.  error


state 432
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr_ident '[' expr ':' expr ':' expr.']' 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	']'  shift 451
	'.'  shift 89
	.  error


state 433
	expr_slice:  expr_ident '[' ':' expr ':' expr ']'.    (137)

	.  reduce 137 (src line 895)


state 434
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  MAKE '(' type_data ',' expr ',' expr.')' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	')'  shift 452
	'['  shift 87
	'.'  shift 89
	.  error


state 435
	expr:  MAKE '(' TYPE IDENT ',' expr ')'.    (97)

	.  reduce 97 (src line 668)


state 436
	expr:  MAP '[' type_data ']' type_data '{' opt_newlines.expr_map opt_comma_newlines '}' 
	expr_map: .    (131)

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  reduce 131 (src line 864)

	expr  goto 239
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_map  goto 453
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 437
	expr_map:  expr_map ',' opt_newlines expr ':'.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 454
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 438
	stmt:  TRY '{' compstmt '}' CATCH IDENT '{' compstmt.'}' FINALLY '{' compstmt '}' 
	stmt:  TRY '{' compstmt '}' CATCH IDENT '{' compstmt.'}' 

	'}'  shift 455
	.  error


state 439
	stmt:  TRY '{' compstmt '}' CATCH '{' compstmt '}'.FINALLY '{' compstmt '}' 
	stmt:  TRY '{' compstmt '}' CATCH '{' compstmt '}'.    (15)

	FINALLY  shift 456
	.  reduce 15 (src line 200)


state 440
	expr_slice:  expr '[' expr ':' expr ':' expr ']'.    (143)

	.  reduce 143 (src line 919)


state 441
	stmt_for:  FOR ';' expr ';' expr '{' compstmt '}'.    (46)

	.  reduce 46 (src line 382)


state 442
	stmt_for:  FOR stmt_var_or_lets ';' ';' expr '{' compstmt '}'.    (48)

	.  reduce 48 (src line 392)


state 443
	stmt_for:  FOR stmt_var_or_lets ';' expr ';' '{' compstmt '}'.    (49)

	.  reduce 49 (src line 397)


state 444
	stmt_for:  FOR stmt_var_or_lets ';' expr ';' expr '{' compstmt.'}' 

	'}'  shift 457
	.  error


state 445
	stmt_switch_case:  CASE expr ':' compstmt.    (66)

	.  reduce 66 (src line 501)


state 446
	stmt_switch_case:  CASE exprs ':' compstmt.    (67)

	.  reduce 67 (src line 507)


state 447
	expr:  FUNC '(' expr_idents VARARG ')' '{' compstmt '}'.    (78)

	.  reduce 78 (src line 568)


state 448
	expr:  FUNC IDENT '(' expr_idents ')' '{' compstmt '}'.    (79)

	.  reduce 79 (src line 573)


state 449
	expr:  FUNC IDENT '(' expr_idents VARARG ')' '{' compstmt.'}' 

	'}'  shift 458
	.  error


state 450
	type_data_struct:  type_data_struct ',' opt_newlines IDENT.type_data 

	IDENT  shift 133
	CHAN  shift 137
	STRUCT  shift 138
	MAP  shift 136
	'*'  shift 134
	'['  shift 139
	.  error

	type_data  goto 459
	slice_count  goto 135

state 451
	expr_slice:  expr_ident '[' expr ':' expr ':' expr ']'.    (138)

	.  reduce 138 (src line 899)


state 452
	expr:  MAKE '(' type_data ',' expr ',' expr ')'.    (96)

	.  reduce 96 (src line 663)


state 453
	expr:  MAP '[' type_data ']' type_data '{' opt_newlines expr_map.opt_comma_newlines '}' 
	expr_map:  expr_map.',' opt_newlines expr ':' expr 
	opt_comma_newlines: .    (190)

	','  shift 299
	'\n'  shift 8
	.  reduce 190 (src line 1163)

	opt_comma_newlines  goto 460
	newlines  goto 280
	newline  goto 7

state 454
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_map:  expr_map ',' opt_newlines expr ':' expr.    (133)
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 133 (src line 873)


state 455
	stmt:  TRY '{' compstmt '}' CATCH IDENT '{' compstmt '}'.FINALLY '{' compstmt '}' 
	stmt:  TRY '{' compstmt '}' CATCH IDENT '{' compstmt '}'.    (14)

	FINALLY  shift 461
	.  reduce 14 (src line 195)


state 456
	stmt:  TRY '{' compstmt '}' CATCH '{' compstmt '}' FINALLY.'{' compstmt '}' 

	'{'  shift 462
	.  error


state 457
	stmt_for:  FOR stmt_var_or_lets ';' expr ';' expr '{' compstmt '}'.    (50)

	.  reduce 50 (src line 402)


state 458
	expr:  FUNC IDENT '(' expr_idents VARARG ')' '{' compstmt '}'.    (80)

	.  reduce 80 (src line 578)


state 459
	type_data:  type_data.'.' IDENT 
	type_data_struct:  type_data_struct ',' opt_newlines IDENT type_data.    (118)

	'.'  shift 220
	.  reduce 118 (src line 781)


state 460
	expr:  MAP '[' type_data ']' type_data '{' opt_newlines expr_map opt_comma_newlines.'}' 

	'}'  shift 463
	.  error


state 461
	stmt:  TRY '{' compstmt '}' CATCH IDENT '{' compstmt '}' FINALLY.'{' compstmt '}' 

	'{'  shift 464
	.  error


462: shift/reduce conflict (shift 5(0), red'n 180(0)) on ';'
462: shift/reduce conflict (shift 8(0), red'n 180(0)) on '\n'
state 462
	stmt:  TRY '{' compstmt '}' CATCH '{' compstmt '}' FINALLY '{'.compstmt '}' 
	opt_term: .    (180)

	';'  shift 5
	'\n'  shift 8
	.  reduce 180 (src line 1144)

	compstmt  goto 465
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	newlines  goto 6
	newline  goto 7

state 463
	expr:  MAP '[' type_data ']' type_data '{' opt_newlines expr_map opt_comma_newlines '}'.    (100)

	.  reduce 100 (src line 684)


464: shift/reduce conflict (shift 5(0), red'n 180(0)) on ';'
464: shift/reduce conflict (shift 8(0), red'n 180(0)) on '\n'
state 464
	stmt:  TRY '{' compstmt '}' CATCH IDENT '{' compstmt '}' FINALLY '{'.compstmt '}' 
	opt_term: .    (180)

	';'  shift 5
	'\n'  shift 8
	.  reduce 180 (src line 1144)

	compstmt  goto 466
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	newlines  goto 6
	newline  goto 7

state 465
	stmt:  TRY '{' compstmt '}' CATCH '{' compstmt '}' FINALLY '{' compstmt.'}' 

	'}'  shift 467
	.  error


state 466
	stmt:  TRY '{' compstmt '}' CATCH IDENT '{' compstmt '}' FINALLY '{' compstmt.'}' 

	'}'  shift 468
	.  error


state 467
	stmt:  TRY '{' compstmt '}' CATCH '{' compstmt '}' FINALLY '{' compstmt '}'.    (13)

	.  reduce 13 (src line 190)


state 468
	stmt:  TRY '{' compstmt '}' CATCH IDENT '{' compstmt '}' FINALLY '{' compstmt '}'.    (12)

	.  reduce 12 (src line 185)


86 terminals, 44 nonterminals
194 grammar rules, 469/16000 states
203 shift/reduce, 216 reduce/reduce conflicts reported
193 working sets used
memory: parser 2194/240000
419 extra closures
4216 shift entries, 69 exceptions
255 goto entries
1428 entries saved by goto default
Optimizer space used: output 4021/240000
4021 table entries, 1903 zero
maximum spread: 86, maximum offset: 464
