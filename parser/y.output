
0: shift/reduce conflict (shift 5(0), red'n 178(0)) on ';'
0: shift/reduce conflict (shift 8(0), red'n 178(0)) on '\n'
state 0
	$accept: .compstmt $end 
	opt_term: .    (178)

	';'  shift 5
	'\n'  shift 8
	.  reduce 178 (src line 1132)

	compstmt  goto 1
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	newlines  goto 6
	newline  goto 7

state 1
	$accept:  compstmt.$end 

	$end  accept
	.  error


 2: reduce/reduce conflict  (red'ns 1 and 5) on $end
 2: reduce/reduce conflict  (red'ns 1 and 5) on CASE
 2: reduce/reduce conflict  (red'ns 1 and 5) on DEFAULT
 2: reduce/reduce conflict  (red'ns 1 and 5) on '}'
 2: reduce/reduce conflict  (red'ns 1 and 5) on '\n'
state 2
	compstmt:  opt_term.    (1)
	stmts:  opt_term.stmt 
	stmt: .    (5)
	exprs: .    (67)

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	RETURN  shift 13
	VAR  shift 50
	THROW  shift 14
	IF  shift 27
	FOR  shift 28
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MODULE  shift 15
	TRY  shift 16
	BREAK  shift 11
	CONTINUE  shift 12
	SWITCH  shift 29
	SELECT  shift 30
	GO  shift 17
	MAKE  shift 42
	OPCHAN  shift 59
	EQOPCHAN  reduce 67 (src line 508)
	LEN  shift 39
	DELETE  shift 18
	CLOSE  shift 19
	MAP  shift 43
	IMPORT  shift 40
	'='  reduce 67 (src line 508)
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	','  reduce 67 (src line 508)
	';'  reduce 5 (src line 149)
	'['  shift 34
	'!'  shift 60
	.  reduce 1 (src line 114)

	stmt  goto 9
	stmt_var_or_lets  goto 10
	stmt_var  goto 25
	stmt_lets  goto 26
	stmt_if  goto 20
	stmt_for  goto 21
	stmt_switch  goto 22
	stmt_select  goto 23
	exprs  goto 51
	expr  goto 24
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

3: shift/reduce conflict (shift 8(0), red'n 178(0)) on '\n'
state 3
	compstmt:  stmts.opt_term 
	stmts:  stmts.term stmt 
	opt_term: .    (178)

	';'  shift 5
	'\n'  shift 8
	.  reduce 178 (src line 1132)

	opt_term  goto 68
	term  goto 69
	newlines  goto 6
	newline  goto 7

state 4
	opt_term:  term.    (179)

	.  reduce 179 (src line 1134)


5: shift/reduce conflict (shift 8(0), red'n 182(0)) on '\n'
state 5
	term:  ';'.newlines 
	term:  ';'.    (182)

	'\n'  shift 8
	.  reduce 182 (src line 1139)

	newlines  goto 70
	newline  goto 7

6: shift/reduce conflict (shift 8(0), red'n 181(0)) on '\n'
state 6
	term:  newlines.    (181)
	newlines:  newlines.newline 

	'\n'  shift 8
	.  reduce 181 (src line 1138)

	newline  goto 71

state 7
	newlines:  newline.    (185)

	.  reduce 185 (src line 1145)


state 8
	newline:  '\n'.    (187)

	.  reduce 187 (src line 1149)


state 9
	stmts:  opt_term stmt.    (3)

	.  reduce 3 (src line 124)


state 10
	stmt:  stmt_var_or_lets.    (6)

	.  reduce 6 (src line 154)


state 11
	stmt:  BREAK.    (7)

	.  reduce 7 (src line 158)


state 12
	stmt:  CONTINUE.    (8)

	.  reduce 8 (src line 163)


state 13
	stmt:  RETURN.exprs 
	exprs: .    (67)

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  reduce 67 (src line 508)

	exprs  goto 72
	expr  goto 73
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 14
	stmt:  THROW.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 74
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 15
	stmt:  MODULE.IDENT '{' compstmt '}' 

	IDENT  shift 75
	.  error


state 16
	stmt:  TRY.'{' compstmt '}' CATCH IDENT '{' compstmt '}' FINALLY '{' compstmt '}' 
	stmt:  TRY.'{' compstmt '}' CATCH '{' compstmt '}' FINALLY '{' compstmt '}' 
	stmt:  TRY.'{' compstmt '}' CATCH IDENT '{' compstmt '}' 
	stmt:  TRY.'{' compstmt '}' CATCH '{' compstmt '}' 

	'{'  shift 76
	.  error


state 17
	stmt:  GO.IDENT '(' exprs VARARG ')' 
	stmt:  GO.IDENT '(' exprs ')' 
	stmt:  GO.expr '(' exprs VARARG ')' 
	stmt:  GO.expr '(' exprs ')' 

	IDENT  shift 77
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 78
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 18
	stmt:  DELETE.'(' expr ')' 
	stmt:  DELETE.'(' expr ',' expr ')' 

	'('  shift 79
	.  error


state 19
	stmt:  CLOSE.'(' expr ')' 

	'('  shift 80
	.  error


state 20
	stmt:  stmt_if.    (23)
	stmt_if:  stmt_if.ELSE IF expr '{' compstmt '}' 
	stmt_if:  stmt_if.ELSE '{' compstmt '}' 

	ELSE  shift 81
	.  reduce 23 (src line 238)


state 21
	stmt:  stmt_for.    (24)

	.  reduce 24 (src line 242)


state 22
	stmt:  stmt_switch.    (25)

	.  reduce 25 (src line 246)


state 23
	stmt:  stmt_select.    (26)

	.  reduce 26 (src line 250)


24: shift/reduce conflict (shift 83(2), red'n 68(0)) on EQOPCHAN
24: shift/reduce conflict (shift 82(2), red'n 68(0)) on '='
state 24
	stmt:  expr.    (27)
	stmt_lets:  expr.'=' expr 
	stmt_lets:  expr.EQOPCHAN expr 
	exprs:  expr.    (68)
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	EQOPCHAN  shift 83
	'='  shift 82
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	','  reduce 68 (src line 513)
	'['  shift 87
	'.'  shift 89
	.  reduce 27 (src line 254)


state 25
	stmt_var_or_lets:  stmt_var.    (28)

	.  reduce 28 (src line 260)


state 26
	stmt_var_or_lets:  stmt_lets.    (29)

	.  reduce 29 (src line 265)


state 27
	stmt_if:  IF.expr '{' compstmt '}' 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 116
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

 28: reduce/reduce conflict  (red'ns 105 and 67) on ','
state 28
	stmt_for:  FOR.'{' compstmt '}' 
	stmt_for:  FOR.expr_idents IN expr '{' compstmt '}' 
	stmt_for:  FOR.expr '{' compstmt '}' 
	stmt_for:  FOR.';' ';' '{' compstmt '}' 
	stmt_for:  FOR.';' ';' expr '{' compstmt '}' 
	stmt_for:  FOR.';' expr ';' '{' compstmt '}' 
	stmt_for:  FOR.';' expr ';' expr '{' compstmt '}' 
	stmt_for:  FOR.stmt_var_or_lets ';' ';' '{' compstmt '}' 
	stmt_for:  FOR.stmt_var_or_lets ';' ';' expr '{' compstmt '}' 
	stmt_for:  FOR.stmt_var_or_lets ';' expr ';' '{' compstmt '}' 
	stmt_for:  FOR.stmt_var_or_lets ';' expr ';' expr '{' compstmt '}' 
	expr_idents: .    (105)
	exprs: .    (67)

	IDENT  shift 122
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	VAR  shift 50
	IN  reduce 105 (src line 697)
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 117
	'('  shift 36
	';'  shift 120
	'['  shift 34
	'!'  shift 60
	.  reduce 67 (src line 508)

	stmt_var_or_lets  goto 121
	stmt_var  goto 25
	stmt_lets  goto 26
	exprs  goto 51
	expr  goto 119
	expr_idents  goto 118
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 29
	stmt_switch:  SWITCH.expr '{' opt_newlines stmt_switch_cases opt_newlines '}' 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 123
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 30
	stmt_select:  SELECT.'{' opt_newlines stmt_select_cases opt_newlines '}' 

	'{'  shift 124
	.  error


state 31
	expr:  expr_member_or_ident.    (71)

	.  reduce 71 (src line 532)


state 32
	expr:  expr_literals.    (72)

	.  reduce 72 (src line 537)


state 33
	expr:  FUNC.'(' expr_idents ')' '{' compstmt '}' 
	expr:  FUNC.'(' expr_idents VARARG ')' '{' compstmt '}' 
	expr:  FUNC.IDENT '(' expr_idents ')' '{' compstmt '}' 
	expr:  FUNC.IDENT '(' expr_idents VARARG ')' '{' compstmt '}' 

	IDENT  shift 126
	'('  shift 125
	.  error


34: shift/reduce conflict (shift 127(0), red'n 183(0)) on ']'
34: shift/reduce conflict (shift 8(0), red'n 183(0)) on '\n'
state 34
	expr:  '['.']' 
	expr:  '['.opt_newlines exprs opt_comma_newlines ']' 
	slice_count:  '['.']' 
	slice_count:  '['.']' slice_count 
	opt_newlines: .    (183)

	']'  shift 127
	'\n'  shift 8
	.  reduce 183 (src line 1141)

	opt_newlines  goto 128
	newlines  goto 129
	newline  goto 7

state 35
	expr:  slice_count.type_data '{' opt_newlines exprs opt_comma_newlines '}' 

	IDENT  shift 131
	CHAN  shift 135
	STRUCT  shift 136
	MAP  shift 134
	'*'  shift 132
	'['  shift 137
	.  error

	type_data  goto 130
	slice_count  goto 133

state 36
	expr:  '('.expr ')' 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 138
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

37: shift/reduce conflict (shift 139(0), red'n 122(0)) on '('
state 37
	expr:  IDENT.'(' exprs VARARG ')' 
	expr:  IDENT.'(' exprs ')' 
	expr_ident:  IDENT.    (122)

	'('  shift 139
	.  reduce 122 (src line 805)


38: shift/reduce conflict (shift 140(0), red'n 120(0)) on '['
state 38
	expr:  expr_ident.'[' expr ']' 
	expr_member_or_ident:  expr_ident.    (120)
	expr_slice:  expr_ident.'[' expr ':' expr ']' 
	expr_slice:  expr_ident.'[' expr ':' ']' 
	expr_slice:  expr_ident.'[' ':' expr ']' 
	expr_slice:  expr_ident.'[' ':' expr ':' expr ']' 
	expr_slice:  expr_ident.'[' expr ':' expr ':' expr ']' 

	'['  shift 140
	.  reduce 120 (src line 793)


state 39
	expr:  LEN.'(' expr ')' 

	'('  shift 141
	.  error


state 40
	expr:  IMPORT.'(' expr ')' 

	'('  shift 142
	.  error


state 41
	expr:  NEW.'(' type_data ')' 

	'('  shift 143
	.  error


state 42
	expr:  MAKE.'(' type_data ')' 
	expr:  MAKE.'(' type_data ',' expr ')' 
	expr:  MAKE.'(' type_data ',' expr ',' expr ')' 
	expr:  MAKE.'(' TYPE IDENT ',' expr ')' 

	'('  shift 144
	.  error


state 43
	expr:  MAP.'{' opt_newlines expr_map opt_comma_newlines '}' 
	expr:  MAP.'[' type_data ']' type_data '{' opt_newlines expr_map opt_comma_newlines '}' 

	'{'  shift 145
	'['  shift 146
	.  error


44: shift/reduce conflict (shift 8(0), red'n 183(0)) on '\n'
state 44
	expr:  '{'.opt_newlines expr_map opt_comma_newlines '}' 
	opt_newlines: .    (183)

	'\n'  shift 8
	.  reduce 183 (src line 1141)

	opt_newlines  goto 147
	newlines  goto 129
	newline  goto 7

state 45
	expr:  expr_slice.    (100)

	.  reduce 100 (src line 683)


state 46
	expr:  expr_chan.    (101)

	.  reduce 101 (src line 688)


state 47
	expr:  expr_unary.    (102)

	.  reduce 102 (src line 693)


state 48
	expr:  expr_binary.    (103)

	.  reduce 103 (src line 694)


state 49
	expr:  expr_lets.    (104)

	.  reduce 104 (src line 695)


state 50
	stmt_var:  VAR.expr_idents '=' exprs 
	expr_idents: .    (105)

	IDENT  shift 149
	.  reduce 105 (src line 697)

	expr_idents  goto 148

state 51
	stmt_lets:  exprs.'=' exprs 
	stmt_lets:  exprs.EQOPCHAN expr 
	exprs:  exprs.',' opt_newlines expr 
	exprs:  exprs.',' opt_newlines expr_ident 

	EQOPCHAN  shift 151
	'='  shift 150
	','  shift 152
	.  error


state 52
	expr_member_or_ident:  expr_member.    (119)

	.  reduce 119 (src line 788)


state 53
	expr_literals:  '-'.NUMBER 
	expr_unary:  '-'.expr 

	IDENT  shift 37
	NUMBER  shift 153
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 154
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 54
	expr_literals:  NUMBER.    (124)

	.  reduce 124 (src line 822)


state 55
	expr_literals:  STRING.    (125)

	.  reduce 125 (src line 831)


state 56
	expr_literals:  TRUE.    (126)

	.  reduce 126 (src line 836)


state 57
	expr_literals:  FALSE.    (127)

	.  reduce 127 (src line 841)


state 58
	expr_literals:  NIL.    (128)

	.  reduce 128 (src line 846)


state 59
	expr_chan:  OPCHAN.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 155
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 60
	expr_unary:  '!'.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 156
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 61
	expr_unary:  '^'.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 157
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 62
	expr_unary:  '&'.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 158
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 63
	expr_unary:  '*'.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 159
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 64
	expr_binary:  op_multiply.    (149)

	.  reduce 149 (src line 949)


state 65
	expr_binary:  op_add.    (150)

	.  reduce 150 (src line 955)


state 66
	expr_binary:  op_comparison.    (151)

	.  reduce 151 (src line 960)


state 67
	expr_binary:  op_binary.    (152)

	.  reduce 152 (src line 965)


state 68
	compstmt:  stmts opt_term.    (2)

	.  reduce 2 (src line 119)


 69: reduce/reduce conflict  (red'ns 179 and 5) on $end
 69: reduce/reduce conflict  (red'ns 179 and 5) on CASE
 69: reduce/reduce conflict  (red'ns 179 and 5) on DEFAULT
 69: reduce/reduce conflict  (red'ns 179 and 5) on '}'
 69: reduce/reduce conflict  (red'ns 179 and 5) on '\n'
state 69
	stmts:  stmts term.stmt 
	opt_term:  term.    (179)
	stmt: .    (5)
	exprs: .    (67)

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	RETURN  shift 13
	VAR  shift 50
	THROW  shift 14
	IF  shift 27
	FOR  shift 28
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MODULE  shift 15
	TRY  shift 16
	BREAK  shift 11
	CONTINUE  shift 12
	SWITCH  shift 29
	SELECT  shift 30
	GO  shift 17
	MAKE  shift 42
	OPCHAN  shift 59
	EQOPCHAN  reduce 67 (src line 508)
	LEN  shift 39
	DELETE  shift 18
	CLOSE  shift 19
	MAP  shift 43
	IMPORT  shift 40
	'='  reduce 67 (src line 508)
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	','  reduce 67 (src line 508)
	'['  shift 34
	'!'  shift 60
	.  reduce 5 (src line 149)

	stmt  goto 160
	stmt_var_or_lets  goto 10
	stmt_var  goto 25
	stmt_lets  goto 26
	stmt_if  goto 20
	stmt_for  goto 21
	stmt_switch  goto 22
	stmt_select  goto 23
	exprs  goto 51
	expr  goto 24
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

70: shift/reduce conflict (shift 8(0), red'n 180(0)) on '\n'
state 70
	term:  ';' newlines.    (180)
	newlines:  newlines.newline 

	'\n'  shift 8
	.  reduce 180 (src line 1136)

	newline  goto 71

state 71
	newlines:  newlines newline.    (186)

	.  reduce 186 (src line 1147)


state 72
	stmt:  RETURN exprs.    (9)
	exprs:  exprs.',' opt_newlines expr 
	exprs:  exprs.',' opt_newlines expr_ident 

	','  shift 152
	.  reduce 9 (src line 168)


state 73
	exprs:  expr.    (68)
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 68 (src line 513)


state 74
	stmt:  THROW expr.    (10)
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 10 (src line 173)


state 75
	stmt:  MODULE IDENT.'{' compstmt '}' 

	'{'  shift 161
	.  error


76: shift/reduce conflict (shift 5(0), red'n 178(0)) on ';'
76: shift/reduce conflict (shift 8(0), red'n 178(0)) on '\n'
state 76
	stmt:  TRY '{'.compstmt '}' CATCH IDENT '{' compstmt '}' FINALLY '{' compstmt '}' 
	stmt:  TRY '{'.compstmt '}' CATCH '{' compstmt '}' FINALLY '{' compstmt '}' 
	stmt:  TRY '{'.compstmt '}' CATCH IDENT '{' compstmt '}' 
	stmt:  TRY '{'.compstmt '}' CATCH '{' compstmt '}' 
	opt_term: .    (178)

	';'  shift 5
	'\n'  shift 8
	.  reduce 178 (src line 1132)

	compstmt  goto 162
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	newlines  goto 6
	newline  goto 7

77: shift/reduce conflict (shift 163(0), red'n 122(0)) on '('
state 77
	stmt:  GO IDENT.'(' exprs VARARG ')' 
	stmt:  GO IDENT.'(' exprs ')' 
	expr:  IDENT.'(' exprs VARARG ')' 
	expr:  IDENT.'(' exprs ')' 
	expr_ident:  IDENT.    (122)

	'('  shift 163
	.  reduce 122 (src line 805)


state 78
	stmt:  GO expr.'(' exprs VARARG ')' 
	stmt:  GO expr.'(' exprs ')' 
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 164
	'['  shift 87
	'.'  shift 89
	.  error


state 79
	stmt:  DELETE '('.expr ')' 
	stmt:  DELETE '('.expr ',' expr ')' 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 165
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 80
	stmt:  CLOSE '('.expr ')' 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 166
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 81
	stmt_if:  stmt_if ELSE.IF expr '{' compstmt '}' 
	stmt_if:  stmt_if ELSE.'{' compstmt '}' 

	IF  shift 167
	'{'  shift 168
	.  error


state 82
	stmt_lets:  expr '='.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 169
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 83
	stmt_lets:  expr EQOPCHAN.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 170
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 84
	expr:  expr '?'.expr ':' expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 171
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 85
	expr:  expr NILCOALESCE.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 172
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 86
	expr:  expr '('.exprs VARARG ')' 
	expr:  expr '('.exprs ')' 
	exprs: .    (67)

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  reduce 67 (src line 508)

	exprs  goto 173
	expr  goto 73
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 87
	expr:  expr '['.expr ']' 
	expr_slice:  expr '['.expr ':' expr ']' 
	expr_slice:  expr '['.expr ':' ']' 
	expr_slice:  expr '['.':' expr ']' 
	expr_slice:  expr '['.':' expr ':' expr ']' 
	expr_slice:  expr '['.expr ':' expr ':' expr ']' 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	':'  shift 175
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 174
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 88
	expr:  expr IN.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 176
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 89
	expr_member:  expr '.'.IDENT 

	IDENT  shift 177
	.  error


state 90
	expr_chan:  expr OPCHAN.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 178
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 91
	expr_lets:  expr PLUSPLUS.    (153)

	.  reduce 153 (src line 971)


state 92
	expr_lets:  expr MINUSMINUS.    (154)

	.  reduce 154 (src line 980)


state 93
	expr_lets:  expr PLUSEQ.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 179
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 94
	expr_lets:  expr MINUSEQ.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 180
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 95
	expr_lets:  expr OREQ.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 181
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 96
	expr_lets:  expr MULEQ.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 182
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 97
	expr_lets:  expr DIVEQ.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 183
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 98
	expr_lets:  expr ANDEQ.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 184
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 99
	op_multiply:  expr '*'.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 185
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 100
	op_multiply:  expr '/'.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 186
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 101
	op_multiply:  expr '%'.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 187
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 102
	op_multiply:  expr SHIFTLEFT.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 188
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 103
	op_multiply:  expr SHIFTRIGHT.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 189
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 104
	op_multiply:  expr '&'.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 190
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 105
	op_add:  expr '+'.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 191
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 106
	op_add:  expr '-'.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 192
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 107
	op_add:  expr '|'.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 193
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 108
	op_comparison:  expr EQEQ.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 194
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 109
	op_comparison:  expr NEQ.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 195
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 110
	op_comparison:  expr '<'.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 196
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 111
	op_comparison:  expr LE.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 197
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 112
	op_comparison:  expr '>'.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 198
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 113
	op_comparison:  expr GE.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 199
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 114
	op_binary:  expr ANDAND.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 200
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 115
	op_binary:  expr OROR.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 201
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 116
	stmt_if:  IF expr.'{' compstmt '}' 
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'{'  shift 202
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  error


117: shift/reduce conflict (shift 8(0), red'n 183(0)) on '\n'
 117: reduce/reduce conflict  (red'ns 183 and 178) on IDENT
 117: reduce/reduce conflict  (red'ns 183 and 178) on NUMBER
 117: reduce/reduce conflict  (red'ns 183 and 178) on STRING
 117: reduce/reduce conflict  (red'ns 183 and 178) on FUNC
 117: reduce/reduce conflict  (red'ns 183 and 178) on NEW
 117: reduce/reduce conflict  (red'ns 183 and 178) on TRUE
 117: reduce/reduce conflict  (red'ns 183 and 178) on FALSE
 117: reduce/reduce conflict  (red'ns 183 and 178) on NIL
 117: reduce/reduce conflict  (red'ns 183 and 178) on MAKE
 117: reduce/reduce conflict  (red'ns 183 and 178) on OPCHAN
 117: reduce/reduce conflict  (red'ns 183 and 178) on LEN
 117: reduce/reduce conflict  (red'ns 183 and 178) on MAP
 117: reduce/reduce conflict  (red'ns 183 and 178) on IMPORT
 117: reduce/reduce conflict  (red'ns 183 and 178) on '-'
 117: reduce/reduce conflict  (red'ns 183 and 178) on '^'
 117: reduce/reduce conflict  (red'ns 183 and 178) on '*'
 117: reduce/reduce conflict  (red'ns 183 and 178) on '&'
 117: reduce/reduce conflict  (red'ns 183 and 178) on '{'
 117: reduce/reduce conflict  (red'ns 183 and 178) on '}'
 117: reduce/reduce conflict  (red'ns 183 and 178) on '('
 117: reduce/reduce conflict  (red'ns 183 and 178) on ','
117: shift/reduce conflict (shift 5(0), red'n 178(0)) on ';'
 117: reduce/reduce conflict  (red'ns 183 and 178) on '['
 117: reduce/reduce conflict  (red'ns 183 and 178) on '!'
117: shift/reduce conflict (shift 8(0), red'n 178(0)) on '\n'
state 117
	stmt_for:  FOR '{'.compstmt '}' 
	expr:  '{'.opt_newlines expr_map opt_comma_newlines '}' 
	opt_newlines: .    (183)
	opt_term: .    (178)

	';'  shift 5
	'\n'  shift 8
	.  reduce 178 (src line 1132)

	compstmt  goto 203
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	opt_newlines  goto 147
	newlines  goto 204
	newline  goto 7

state 118
	stmt_for:  FOR expr_idents.IN expr '{' compstmt '}' 
	expr_idents:  expr_idents.',' opt_newlines IDENT 

	IN  shift 205
	','  shift 206
	.  error


119: shift/reduce conflict (shift 83(2), red'n 68(0)) on EQOPCHAN
119: shift/reduce conflict (shift 82(2), red'n 68(0)) on '='
state 119
	stmt_lets:  expr.'=' expr 
	stmt_lets:  expr.EQOPCHAN expr 
	stmt_for:  FOR expr.'{' compstmt '}' 
	exprs:  expr.    (68)
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	EQOPCHAN  shift 83
	'='  shift 82
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'{'  shift 207
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 68 (src line 513)


state 120
	stmt_for:  FOR ';'.';' '{' compstmt '}' 
	stmt_for:  FOR ';'.';' expr '{' compstmt '}' 
	stmt_for:  FOR ';'.expr ';' '{' compstmt '}' 
	stmt_for:  FOR ';'.expr ';' expr '{' compstmt '}' 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	';'  shift 208
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 209
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 121
	stmt_for:  FOR stmt_var_or_lets.';' ';' '{' compstmt '}' 
	stmt_for:  FOR stmt_var_or_lets.';' ';' expr '{' compstmt '}' 
	stmt_for:  FOR stmt_var_or_lets.';' expr ';' '{' compstmt '}' 
	stmt_for:  FOR stmt_var_or_lets.';' expr ';' expr '{' compstmt '}' 

	';'  shift 210
	.  error


 122: reduce/reduce conflict  (red'ns 106 and 122) on IN
122: shift/reduce conflict (shift 139(0), red'n 122(0)) on '('
 122: reduce/reduce conflict  (red'ns 106 and 122) on ','
state 122
	expr:  IDENT.'(' exprs VARARG ')' 
	expr:  IDENT.'(' exprs ')' 
	expr_idents:  IDENT.    (106)
	expr_ident:  IDENT.    (122)

	IN  reduce 106 (src line 701)
	'('  shift 139
	','  reduce 106 (src line 701)
	.  reduce 122 (src line 805)


state 123
	stmt_switch:  SWITCH expr.'{' opt_newlines stmt_switch_cases opt_newlines '}' 
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'{'  shift 211
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  error


124: shift/reduce conflict (shift 8(0), red'n 183(0)) on '\n'
state 124
	stmt_select:  SELECT '{'.opt_newlines stmt_select_cases opt_newlines '}' 
	opt_newlines: .    (183)

	'\n'  shift 8
	.  reduce 183 (src line 1141)

	opt_newlines  goto 212
	newlines  goto 129
	newline  goto 7

state 125
	expr:  FUNC '('.expr_idents ')' '{' compstmt '}' 
	expr:  FUNC '('.expr_idents VARARG ')' '{' compstmt '}' 
	expr_idents: .    (105)

	IDENT  shift 149
	.  reduce 105 (src line 697)

	expr_idents  goto 213

state 126
	expr:  FUNC IDENT.'(' expr_idents ')' '{' compstmt '}' 
	expr:  FUNC IDENT.'(' expr_idents VARARG ')' '{' compstmt '}' 

	'('  shift 214
	.  error


127: shift/reduce conflict (shift 137(0), red'n 79(0)) on '['
 127: reduce/reduce conflict  (red'ns 79 and 117) on '*'
127: shift/reduce conflict (shift 137(0), red'n 117(0)) on '['
state 127
	expr:  '[' ']'.    (79)
	slice_count:  '[' ']'.    (117)
	slice_count:  '[' ']'.slice_count 

	IDENT  reduce 117 (src line 778)
	CHAN  reduce 117 (src line 778)
	STRUCT  reduce 117 (src line 778)
	MAP  reduce 117 (src line 778)
	'['  shift 137
	.  reduce 79 (src line 571)

	slice_count  goto 215

state 128
	expr:  '[' opt_newlines.exprs opt_comma_newlines ']' 
	exprs: .    (67)

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  reduce 67 (src line 508)

	exprs  goto 216
	expr  goto 73
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

129: shift/reduce conflict (shift 8(0), red'n 184(0)) on '\n'
state 129
	opt_newlines:  newlines.    (184)
	newlines:  newlines.newline 

	'\n'  shift 8
	.  reduce 184 (src line 1143)

	newline  goto 71

state 130
	expr:  slice_count type_data.'{' opt_newlines exprs opt_comma_newlines '}' 
	type_data:  type_data.'.' IDENT 

	'{'  shift 217
	'.'  shift 218
	.  error


state 131
	type_data:  IDENT.    (108)

	.  reduce 108 (src line 713)


state 132
	type_data:  '*'.type_data 

	IDENT  shift 131
	CHAN  shift 135
	STRUCT  shift 136
	MAP  shift 134
	'*'  shift 132
	'['  shift 137
	.  error

	type_data  goto 219
	slice_count  goto 133

state 133
	type_data:  slice_count.type_data 

	IDENT  shift 131
	CHAN  shift 135
	STRUCT  shift 136
	MAP  shift 134
	'*'  shift 132
	'['  shift 137
	.  error

	type_data  goto 220
	slice_count  goto 133

state 134
	type_data:  MAP.'[' type_data ']' type_data 

	'['  shift 221
	.  error


state 135
	type_data:  CHAN.type_data 

	IDENT  shift 131
	CHAN  shift 135
	STRUCT  shift 136
	MAP  shift 134
	'*'  shift 132
	'['  shift 137
	.  error

	type_data  goto 222
	slice_count  goto 133

state 136
	type_data:  STRUCT.'{' opt_newlines type_data_struct opt_newlines '}' 

	'{'  shift 223
	.  error


state 137
	slice_count:  '['.']' 
	slice_count:  '['.']' slice_count 

	']'  shift 224
	.  error


state 138
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  '(' expr.')' 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	')'  shift 225
	'['  shift 87
	'.'  shift 89
	.  error


state 139
	expr:  IDENT '('.exprs VARARG ')' 
	expr:  IDENT '('.exprs ')' 
	exprs: .    (67)

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  reduce 67 (src line 508)

	exprs  goto 226
	expr  goto 73
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 140
	expr:  expr_ident '['.expr ']' 
	expr_slice:  expr_ident '['.expr ':' expr ']' 
	expr_slice:  expr_ident '['.expr ':' ']' 
	expr_slice:  expr_ident '['.':' expr ']' 
	expr_slice:  expr_ident '['.':' expr ':' expr ']' 
	expr_slice:  expr_ident '['.expr ':' expr ':' expr ']' 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	':'  shift 228
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 227
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 141
	expr:  LEN '('.expr ')' 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 229
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 142
	expr:  IMPORT '('.expr ')' 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 230
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 143
	expr:  NEW '('.type_data ')' 

	IDENT  shift 131
	CHAN  shift 135
	STRUCT  shift 136
	MAP  shift 134
	'*'  shift 132
	'['  shift 137
	.  error

	type_data  goto 231
	slice_count  goto 133

state 144
	expr:  MAKE '('.type_data ')' 
	expr:  MAKE '('.type_data ',' expr ')' 
	expr:  MAKE '('.type_data ',' expr ',' expr ')' 
	expr:  MAKE '('.TYPE IDENT ',' expr ')' 

	IDENT  shift 131
	CHAN  shift 135
	STRUCT  shift 136
	TYPE  shift 233
	MAP  shift 134
	'*'  shift 132
	'['  shift 137
	.  error

	type_data  goto 232
	slice_count  goto 133

145: shift/reduce conflict (shift 8(0), red'n 183(0)) on '\n'
state 145
	expr:  MAP '{'.opt_newlines expr_map opt_comma_newlines '}' 
	opt_newlines: .    (183)

	'\n'  shift 8
	.  reduce 183 (src line 1141)

	opt_newlines  goto 234
	newlines  goto 129
	newline  goto 7

state 146
	expr:  MAP '['.type_data ']' type_data '{' opt_newlines expr_map opt_comma_newlines '}' 

	IDENT  shift 131
	CHAN  shift 135
	STRUCT  shift 136
	MAP  shift 134
	'*'  shift 132
	'['  shift 137
	.  error

	type_data  goto 235
	slice_count  goto 133

state 147
	expr:  '{' opt_newlines.expr_map opt_comma_newlines '}' 
	expr_map: .    (129)

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  reduce 129 (src line 852)

	expr  goto 237
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_map  goto 236
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 148
	stmt_var:  VAR expr_idents.'=' exprs 
	expr_idents:  expr_idents.',' opt_newlines IDENT 

	'='  shift 238
	','  shift 206
	.  error


state 149
	expr_idents:  IDENT.    (106)

	.  reduce 106 (src line 701)


state 150
	stmt_lets:  exprs '='.exprs 
	exprs: .    (67)

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  reduce 67 (src line 508)

	exprs  goto 239
	expr  goto 73
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 151
	stmt_lets:  exprs EQOPCHAN.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 240
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 152
	exprs:  exprs ','.opt_newlines expr 
	exprs:  exprs ','.opt_newlines expr_ident 
	opt_newlines: .    (183)

	'\n'  shift 8
	.  reduce 183 (src line 1141)

	opt_newlines  goto 241
	newlines  goto 129
	newline  goto 7

 153: reduce/reduce conflict  (red'ns 123 and 124) on $end
 153: reduce/reduce conflict  (red'ns 123 and 124) on VARARG
 153: reduce/reduce conflict  (red'ns 123 and 124) on IN
 153: reduce/reduce conflict  (red'ns 123 and 124) on EQEQ
 153: reduce/reduce conflict  (red'ns 123 and 124) on NEQ
 153: reduce/reduce conflict  (red'ns 123 and 124) on GE
 153: reduce/reduce conflict  (red'ns 123 and 124) on LE
 153: reduce/reduce conflict  (red'ns 123 and 124) on OROR
 153: reduce/reduce conflict  (red'ns 123 and 124) on ANDAND
 153: reduce/reduce conflict  (red'ns 123 and 124) on NILCOALESCE
 153: reduce/reduce conflict  (red'ns 123 and 124) on PLUSEQ
 153: reduce/reduce conflict  (red'ns 123 and 124) on MINUSEQ
 153: reduce/reduce conflict  (red'ns 123 and 124) on MULEQ
 153: reduce/reduce conflict  (red'ns 123 and 124) on DIVEQ
 153: reduce/reduce conflict  (red'ns 123 and 124) on ANDEQ
 153: reduce/reduce conflict  (red'ns 123 and 124) on OREQ
 153: reduce/reduce conflict  (red'ns 123 and 124) on PLUSPLUS
 153: reduce/reduce conflict  (red'ns 123 and 124) on MINUSMINUS
 153: reduce/reduce conflict  (red'ns 123 and 124) on SHIFTLEFT
 153: reduce/reduce conflict  (red'ns 123 and 124) on SHIFTRIGHT
 153: reduce/reduce conflict  (red'ns 123 and 124) on CASE
 153: reduce/reduce conflict  (red'ns 123 and 124) on DEFAULT
 153: reduce/reduce conflict  (red'ns 123 and 124) on OPCHAN
 153: reduce/reduce conflict  (red'ns 123 and 124) on EQOPCHAN
 153: reduce/reduce conflict  (red'ns 123 and 124) on '='
 153: reduce/reduce conflict  (red'ns 123 and 124) on ':'
 153: reduce/reduce conflict  (red'ns 123 and 124) on '?'
 153: reduce/reduce conflict  (red'ns 123 and 124) on '<'
 153: reduce/reduce conflict  (red'ns 123 and 124) on '>'
 153: reduce/reduce conflict  (red'ns 123 and 124) on '+'
 153: reduce/reduce conflict  (red'ns 123 and 124) on '-'
 153: reduce/reduce conflict  (red'ns 123 and 124) on '|'
 153: reduce/reduce conflict  (red'ns 123 and 124) on '*'
 153: reduce/reduce conflict  (red'ns 123 and 124) on '/'
 153: reduce/reduce conflict  (red'ns 123 and 124) on '%'
 153: reduce/reduce conflict  (red'ns 123 and 124) on '&'
 153: reduce/reduce conflict  (red'ns 123 and 124) on '{'
 153: reduce/reduce conflict  (red'ns 123 and 124) on '}'
 153: reduce/reduce conflict  (red'ns 123 and 124) on '('
 153: reduce/reduce conflict  (red'ns 123 and 124) on ')'
 153: reduce/reduce conflict  (red'ns 123 and 124) on ','
 153: reduce/reduce conflict  (red'ns 123 and 124) on ';'
 153: reduce/reduce conflict  (red'ns 123 and 124) on '['
 153: reduce/reduce conflict  (red'ns 123 and 124) on ']'
 153: reduce/reduce conflict  (red'ns 123 and 124) on '.'
 153: reduce/reduce conflict  (red'ns 123 and 124) on '\n'
state 153
	expr_literals:  '-' NUMBER.    (123)
	expr_literals:  NUMBER.    (124)

	.  reduce 123 (src line 812)


154: shift/reduce conflict (shift 86(0), red'n 144(13)) on '('
154: shift/reduce conflict (shift 87(0), red'n 144(13)) on '['
154: shift/reduce conflict (shift 89(0), red'n 144(13)) on '.'
state 154
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_unary:  '-' expr.    (144)
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 144 (src line 922)


155: shift/reduce conflict (shift 86(0), red'n 143(4)) on '('
155: shift/reduce conflict (shift 87(0), red'n 143(4)) on '['
155: shift/reduce conflict (shift 89(0), red'n 143(4)) on '.'
state 155
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_chan:  OPCHAN expr.    (143)
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 143 (src line 917)


156: shift/reduce conflict (shift 86(0), red'n 145(13)) on '('
156: shift/reduce conflict (shift 87(0), red'n 145(13)) on '['
156: shift/reduce conflict (shift 89(0), red'n 145(13)) on '.'
state 156
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_unary:  '!' expr.    (145)
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 145 (src line 928)


157: shift/reduce conflict (shift 86(0), red'n 146(13)) on '('
157: shift/reduce conflict (shift 87(0), red'n 146(13)) on '['
157: shift/reduce conflict (shift 89(0), red'n 146(13)) on '.'
state 157
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_unary:  '^' expr.    (146)
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 146 (src line 933)


158: shift/reduce conflict (shift 86(0), red'n 147(13)) on '('
158: shift/reduce conflict (shift 87(0), red'n 147(13)) on '['
158: shift/reduce conflict (shift 89(0), red'n 147(13)) on '.'
state 158
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_unary:  '&' expr.    (147)
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 147 (src line 938)


159: shift/reduce conflict (shift 86(0), red'n 148(13)) on '('
159: shift/reduce conflict (shift 87(0), red'n 148(13)) on '['
159: shift/reduce conflict (shift 89(0), red'n 148(13)) on '.'
state 159
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_unary:  '*' expr.    (148)
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 148 (src line 943)


state 160
	stmts:  stmts term stmt.    (4)

	.  reduce 4 (src line 134)


161: shift/reduce conflict (shift 5(0), red'n 178(0)) on ';'
161: shift/reduce conflict (shift 8(0), red'n 178(0)) on '\n'
state 161
	stmt:  MODULE IDENT '{'.compstmt '}' 
	opt_term: .    (178)

	';'  shift 5
	'\n'  shift 8
	.  reduce 178 (src line 1132)

	compstmt  goto 242
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	newlines  goto 6
	newline  goto 7

state 162
	stmt:  TRY '{' compstmt.'}' CATCH IDENT '{' compstmt '}' FINALLY '{' compstmt '}' 
	stmt:  TRY '{' compstmt.'}' CATCH '{' compstmt '}' FINALLY '{' compstmt '}' 
	stmt:  TRY '{' compstmt.'}' CATCH IDENT '{' compstmt '}' 
	stmt:  TRY '{' compstmt.'}' CATCH '{' compstmt '}' 

	'}'  shift 243
	.  error


state 163
	stmt:  GO IDENT '('.exprs VARARG ')' 
	stmt:  GO IDENT '('.exprs ')' 
	expr:  IDENT '('.exprs VARARG ')' 
	expr:  IDENT '('.exprs ')' 
	exprs: .    (67)

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  reduce 67 (src line 508)

	exprs  goto 244
	expr  goto 73
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 164
	stmt:  GO expr '('.exprs VARARG ')' 
	stmt:  GO expr '('.exprs ')' 
	expr:  expr '('.exprs VARARG ')' 
	expr:  expr '('.exprs ')' 
	exprs: .    (67)

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  reduce 67 (src line 508)

	exprs  goto 245
	expr  goto 73
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 165
	stmt:  DELETE '(' expr.')' 
	stmt:  DELETE '(' expr.',' expr ')' 
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	')'  shift 246
	','  shift 247
	'['  shift 87
	'.'  shift 89
	.  error


state 166
	stmt:  CLOSE '(' expr.')' 
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	')'  shift 248
	'['  shift 87
	'.'  shift 89
	.  error


state 167
	stmt_if:  stmt_if ELSE IF.expr '{' compstmt '}' 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 249
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

168: shift/reduce conflict (shift 5(0), red'n 178(0)) on ';'
168: shift/reduce conflict (shift 8(0), red'n 178(0)) on '\n'
state 168
	stmt_if:  stmt_if ELSE '{'.compstmt '}' 
	opt_term: .    (178)

	';'  shift 5
	'\n'  shift 8
	.  reduce 178 (src line 1132)

	compstmt  goto 250
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	newlines  goto 6
	newline  goto 7

state 169
	stmt_lets:  expr '=' expr.    (31)
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 31 (src line 277)


state 170
	stmt_lets:  expr EQOPCHAN expr.    (33)
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 33 (src line 295)


state 171
	expr:  expr.'?' expr ':' expr 
	expr:  expr '?' expr.':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	':'  shift 251
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  error


172: shift/reduce conflict (shift 86(0), red'n 74(5)) on '('
172: shift/reduce conflict (shift 87(0), red'n 74(5)) on '['
172: shift/reduce conflict (shift 89(0), red'n 74(5)) on '.'
state 172
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr NILCOALESCE expr.    (74)
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 74 (src line 546)


state 173
	exprs:  exprs.',' opt_newlines expr 
	exprs:  exprs.',' opt_newlines expr_ident 
	expr:  expr '(' exprs.VARARG ')' 
	expr:  expr '(' exprs.')' 

	VARARG  shift 252
	')'  shift 253
	','  shift 152
	.  error


state 174
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr '[' expr.']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr '[' expr.':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr '[' expr.':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_slice:  expr '[' expr.':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	':'  shift 255
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	']'  shift 254
	'.'  shift 89
	.  error


state 175
	expr_slice:  expr '[' ':'.expr ']' 
	expr_slice:  expr '[' ':'.expr ':' expr ']' 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 256
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

176: shift/reduce conflict (shift 86(0), red'n 96(11)) on '('
176: shift/reduce conflict (shift 87(0), red'n 96(11)) on '['
176: shift/reduce conflict (shift 89(0), red'n 96(11)) on '.'
state 176
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr:  expr IN expr.    (96)
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 96 (src line 661)


state 177
	expr_member:  expr '.' IDENT.    (121)

	.  reduce 121 (src line 798)


178: shift/reduce conflict (shift 86(0), red'n 142(4)) on '('
178: shift/reduce conflict (shift 87(0), red'n 142(4)) on '['
178: shift/reduce conflict (shift 89(0), red'n 142(4)) on '.'
state 178
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_chan:  expr OPCHAN expr.    (142)
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 142 (src line 912)


179: shift/reduce conflict (shift 86(0), red'n 155(2)) on '('
179: shift/reduce conflict (shift 87(0), red'n 155(2)) on '['
179: shift/reduce conflict (shift 89(0), red'n 155(2)) on '.'
state 179
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr PLUSEQ expr.    (155)
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 155 (src line 988)


180: shift/reduce conflict (shift 86(0), red'n 156(2)) on '('
180: shift/reduce conflict (shift 87(0), red'n 156(2)) on '['
180: shift/reduce conflict (shift 89(0), red'n 156(2)) on '.'
state 180
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr MINUSEQ expr.    (156)
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 156 (src line 996)


181: shift/reduce conflict (shift 86(0), red'n 157(2)) on '('
181: shift/reduce conflict (shift 87(0), red'n 157(2)) on '['
181: shift/reduce conflict (shift 89(0), red'n 157(2)) on '.'
state 181
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr OREQ expr.    (157)
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 157 (src line 1004)


182: shift/reduce conflict (shift 86(0), red'n 158(2)) on '('
182: shift/reduce conflict (shift 87(0), red'n 158(2)) on '['
182: shift/reduce conflict (shift 89(0), red'n 158(2)) on '.'
state 182
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr MULEQ expr.    (158)
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 158 (src line 1012)


183: shift/reduce conflict (shift 86(0), red'n 159(2)) on '('
183: shift/reduce conflict (shift 87(0), red'n 159(2)) on '['
183: shift/reduce conflict (shift 89(0), red'n 159(2)) on '.'
state 183
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr DIVEQ expr.    (159)
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 159 (src line 1020)


184: shift/reduce conflict (shift 86(0), red'n 160(2)) on '('
184: shift/reduce conflict (shift 87(0), red'n 160(2)) on '['
184: shift/reduce conflict (shift 89(0), red'n 160(2)) on '.'
state 184
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	expr_lets:  expr ANDEQ expr.    (160)
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 160 (src line 1028)


185: shift/reduce conflict (shift 86(0), red'n 161(10)) on '('
185: shift/reduce conflict (shift 87(0), red'n 161(10)) on '['
185: shift/reduce conflict (shift 89(0), red'n 161(10)) on '.'
state 185
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr '*' expr.    (161)
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 161 (src line 1038)


186: shift/reduce conflict (shift 86(0), red'n 162(10)) on '('
186: shift/reduce conflict (shift 87(0), red'n 162(10)) on '['
186: shift/reduce conflict (shift 89(0), red'n 162(10)) on '.'
state 186
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr '/' expr.    (162)
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 162 (src line 1044)


187: shift/reduce conflict (shift 86(0), red'n 163(10)) on '('
187: shift/reduce conflict (shift 87(0), red'n 163(10)) on '['
187: shift/reduce conflict (shift 89(0), red'n 163(10)) on '.'
state 187
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr '%' expr.    (163)
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 163 (src line 1049)


188: shift/reduce conflict (shift 86(0), red'n 164(10)) on '('
188: shift/reduce conflict (shift 87(0), red'n 164(10)) on '['
188: shift/reduce conflict (shift 89(0), red'n 164(10)) on '.'
state 188
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr SHIFTLEFT expr.    (164)
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 164 (src line 1054)


189: shift/reduce conflict (shift 86(0), red'n 165(10)) on '('
189: shift/reduce conflict (shift 87(0), red'n 165(10)) on '['
189: shift/reduce conflict (shift 89(0), red'n 165(10)) on '.'
state 189
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr SHIFTRIGHT expr.    (165)
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 165 (src line 1059)


190: shift/reduce conflict (shift 86(0), red'n 166(10)) on '('
190: shift/reduce conflict (shift 87(0), red'n 166(10)) on '['
190: shift/reduce conflict (shift 89(0), red'n 166(10)) on '.'
state 190
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_multiply:  expr '&' expr.    (166)
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 166 (src line 1064)


191: shift/reduce conflict (shift 86(0), red'n 167(9)) on '('
191: shift/reduce conflict (shift 87(0), red'n 167(9)) on '['
191: shift/reduce conflict (shift 89(0), red'n 167(9)) on '.'
state 191
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr '+' expr.    (167)
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 167 (src line 1070)


192: shift/reduce conflict (shift 86(0), red'n 168(9)) on '('
192: shift/reduce conflict (shift 87(0), red'n 168(9)) on '['
192: shift/reduce conflict (shift 89(0), red'n 168(9)) on '.'
state 192
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr '-' expr.    (168)
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 168 (src line 1076)


193: shift/reduce conflict (shift 86(0), red'n 169(9)) on '('
193: shift/reduce conflict (shift 87(0), red'n 169(9)) on '['
193: shift/reduce conflict (shift 89(0), red'n 169(9)) on '.'
state 193
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_add:  expr '|' expr.    (169)
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 169 (src line 1081)


194: shift/reduce conflict (shift 86(0), red'n 170(8)) on '('
194: shift/reduce conflict (shift 87(0), red'n 170(8)) on '['
194: shift/reduce conflict (shift 89(0), red'n 170(8)) on '.'
state 194
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr EQEQ expr.    (170)
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 170 (src line 1087)


195: shift/reduce conflict (shift 86(0), red'n 171(8)) on '('
195: shift/reduce conflict (shift 87(0), red'n 171(8)) on '['
195: shift/reduce conflict (shift 89(0), red'n 171(8)) on '.'
state 195
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr NEQ expr.    (171)
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 171 (src line 1093)


196: shift/reduce conflict (shift 86(0), red'n 172(8)) on '('
196: shift/reduce conflict (shift 87(0), red'n 172(8)) on '['
196: shift/reduce conflict (shift 89(0), red'n 172(8)) on '.'
state 196
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr '<' expr.    (172)
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 172 (src line 1098)


197: shift/reduce conflict (shift 86(0), red'n 173(8)) on '('
197: shift/reduce conflict (shift 87(0), red'n 173(8)) on '['
197: shift/reduce conflict (shift 89(0), red'n 173(8)) on '.'
state 197
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr LE expr.    (173)
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 173 (src line 1103)


198: shift/reduce conflict (shift 86(0), red'n 174(8)) on '('
198: shift/reduce conflict (shift 87(0), red'n 174(8)) on '['
198: shift/reduce conflict (shift 89(0), red'n 174(8)) on '.'
state 198
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr '>' expr.    (174)
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 174 (src line 1108)


199: shift/reduce conflict (shift 86(0), red'n 175(8)) on '('
199: shift/reduce conflict (shift 87(0), red'n 175(8)) on '['
199: shift/reduce conflict (shift 89(0), red'n 175(8)) on '.'
state 199
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_comparison:  expr GE expr.    (175)
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 175 (src line 1113)


200: shift/reduce conflict (shift 86(0), red'n 176(7)) on '('
200: shift/reduce conflict (shift 87(0), red'n 176(7)) on '['
200: shift/reduce conflict (shift 89(0), red'n 176(7)) on '.'
state 200
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr ANDAND expr.    (176)
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 176 (src line 1119)


201: shift/reduce conflict (shift 86(0), red'n 177(6)) on '('
201: shift/reduce conflict (shift 87(0), red'n 177(6)) on '['
201: shift/reduce conflict (shift 89(0), red'n 177(6)) on '.'
state 201
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 
	op_binary:  expr OROR expr.    (177)

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	ANDAND  shift 114
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 177 (src line 1125)


202: shift/reduce conflict (shift 5(0), red'n 178(0)) on ';'
202: shift/reduce conflict (shift 8(0), red'n 178(0)) on '\n'
state 202
	stmt_if:  IF expr '{'.compstmt '}' 
	opt_term: .    (178)

	';'  shift 5
	'\n'  shift 8
	.  reduce 178 (src line 1132)

	compstmt  goto 257
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	newlines  goto 6
	newline  goto 7

state 203
	stmt_for:  FOR '{' compstmt.'}' 

	'}'  shift 258
	.  error


204: shift/reduce conflict (shift 8(0), red'n 181(0)) on '\n'
 204: reduce/reduce conflict  (red'ns 181 and 184) on IDENT
 204: reduce/reduce conflict  (red'ns 181 and 184) on NUMBER
 204: reduce/reduce conflict  (red'ns 181 and 184) on STRING
 204: reduce/reduce conflict  (red'ns 181 and 184) on FUNC
 204: reduce/reduce conflict  (red'ns 181 and 184) on NEW
 204: reduce/reduce conflict  (red'ns 181 and 184) on TRUE
 204: reduce/reduce conflict  (red'ns 181 and 184) on FALSE
 204: reduce/reduce conflict  (red'ns 181 and 184) on NIL
 204: reduce/reduce conflict  (red'ns 181 and 184) on MAKE
 204: reduce/reduce conflict  (red'ns 181 and 184) on OPCHAN
 204: reduce/reduce conflict  (red'ns 181 and 184) on LEN
 204: reduce/reduce conflict  (red'ns 181 and 184) on MAP
 204: reduce/reduce conflict  (red'ns 181 and 184) on IMPORT
 204: reduce/reduce conflict  (red'ns 181 and 184) on '-'
 204: reduce/reduce conflict  (red'ns 181 and 184) on '^'
 204: reduce/reduce conflict  (red'ns 181 and 184) on '*'
 204: reduce/reduce conflict  (red'ns 181 and 184) on '&'
 204: reduce/reduce conflict  (red'ns 181 and 184) on '{'
 204: reduce/reduce conflict  (red'ns 181 and 184) on '}'
 204: reduce/reduce conflict  (red'ns 181 and 184) on '('
 204: reduce/reduce conflict  (red'ns 181 and 184) on ','
 204: reduce/reduce conflict  (red'ns 181 and 184) on '['
 204: reduce/reduce conflict  (red'ns 181 and 184) on '!'
204: shift/reduce conflict (shift 8(0), red'n 184(0)) on '\n'
state 204
	term:  newlines.    (181)
	opt_newlines:  newlines.    (184)
	newlines:  newlines.newline 

	'\n'  shift 8
	.  reduce 181 (src line 1138)

	newline  goto 71

state 205
	stmt_for:  FOR expr_idents IN.expr '{' compstmt '}' 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 259
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 206
	expr_idents:  expr_idents ','.opt_newlines IDENT 
	opt_newlines: .    (183)

	'\n'  shift 8
	.  reduce 183 (src line 1141)

	opt_newlines  goto 260
	newlines  goto 129
	newline  goto 7

207: shift/reduce conflict (shift 5(0), red'n 178(0)) on ';'
207: shift/reduce conflict (shift 8(0), red'n 178(0)) on '\n'
state 207
	stmt_for:  FOR expr '{'.compstmt '}' 
	opt_term: .    (178)

	';'  shift 5
	'\n'  shift 8
	.  reduce 178 (src line 1132)

	compstmt  goto 261
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	newlines  goto 6
	newline  goto 7

state 208
	stmt_for:  FOR ';' ';'.'{' compstmt '}' 
	stmt_for:  FOR ';' ';'.expr '{' compstmt '}' 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 262
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 263
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 209
	stmt_for:  FOR ';' expr.';' '{' compstmt '}' 
	stmt_for:  FOR ';' expr.';' expr '{' compstmt '}' 
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	';'  shift 264
	'['  shift 87
	'.'  shift 89
	.  error


state 210
	stmt_for:  FOR stmt_var_or_lets ';'.';' '{' compstmt '}' 
	stmt_for:  FOR stmt_var_or_lets ';'.';' expr '{' compstmt '}' 
	stmt_for:  FOR stmt_var_or_lets ';'.expr ';' '{' compstmt '}' 
	stmt_for:  FOR stmt_var_or_lets ';'.expr ';' expr '{' compstmt '}' 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	';'  shift 265
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 266
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

211: shift/reduce conflict (shift 8(0), red'n 183(0)) on '\n'
state 211
	stmt_switch:  SWITCH expr '{'.opt_newlines stmt_switch_cases opt_newlines '}' 
	opt_newlines: .    (183)

	'\n'  shift 8
	.  reduce 183 (src line 1141)

	opt_newlines  goto 267
	newlines  goto 129
	newline  goto 7

212: shift/reduce conflict (shift 272(0), red'n 50(0)) on CASE
212: shift/reduce conflict (shift 271(0), red'n 50(0)) on DEFAULT
state 212
	stmt_select:  SELECT '{' opt_newlines.stmt_select_cases opt_newlines '}' 
	stmt_select_cases: .    (50)

	CASE  shift 272
	DEFAULT  shift 271
	.  reduce 50 (src line 403)

	stmt_select_cases  goto 268
	stmt_select_case  goto 270
	stmt_select_default  goto 269

state 213
	expr:  FUNC '(' expr_idents.')' '{' compstmt '}' 
	expr:  FUNC '(' expr_idents.VARARG ')' '{' compstmt '}' 
	expr_idents:  expr_idents.',' opt_newlines IDENT 

	VARARG  shift 274
	')'  shift 273
	','  shift 206
	.  error


state 214
	expr:  FUNC IDENT '('.expr_idents ')' '{' compstmt '}' 
	expr:  FUNC IDENT '('.expr_idents VARARG ')' '{' compstmt '}' 
	expr_idents: .    (105)

	IDENT  shift 149
	.  reduce 105 (src line 697)

	expr_idents  goto 275

state 215
	slice_count:  '[' ']' slice_count.    (118)

	.  reduce 118 (src line 783)


state 216
	exprs:  exprs.',' opt_newlines expr 
	exprs:  exprs.',' opt_newlines expr_ident 
	expr:  '[' opt_newlines exprs.opt_comma_newlines ']' 
	opt_comma_newlines: .    (188)

	','  shift 276
	'\n'  shift 8
	.  reduce 188 (src line 1151)

	opt_comma_newlines  goto 277
	newlines  goto 278
	newline  goto 7

217: shift/reduce conflict (shift 8(0), red'n 183(0)) on '\n'
state 217
	expr:  slice_count type_data '{'.opt_newlines exprs opt_comma_newlines '}' 
	opt_newlines: .    (183)

	'\n'  shift 8
	.  reduce 183 (src line 1141)

	opt_newlines  goto 279
	newlines  goto 129
	newline  goto 7

state 218
	type_data:  type_data '.'.IDENT 

	IDENT  shift 280
	.  error


219: shift/reduce conflict (shift 218(0), red'n 110(10)) on '.'
state 219
	type_data:  type_data.'.' IDENT 
	type_data:  '*' type_data.    (110)

	'.'  shift 218
	.  reduce 110 (src line 727)


220: shift/reduce conflict (shift 218(0), red'n 111(0)) on '.'
state 220
	type_data:  type_data.'.' IDENT 
	type_data:  slice_count type_data.    (111)

	'.'  shift 218
	.  reduce 111 (src line 736)


state 221
	type_data:  MAP '['.type_data ']' type_data 

	IDENT  shift 131
	CHAN  shift 135
	STRUCT  shift 136
	MAP  shift 134
	'*'  shift 132
	'['  shift 137
	.  error

	type_data  goto 281
	slice_count  goto 133

222: shift/reduce conflict (shift 218(0), red'n 113(0)) on '.'
state 222
	type_data:  type_data.'.' IDENT 
	type_data:  CHAN type_data.    (113)

	'.'  shift 218
	.  reduce 113 (src line 750)


state 223
	type_data:  STRUCT '{'.opt_newlines type_data_struct opt_newlines '}' 
	opt_newlines: .    (183)

	'\n'  shift 8
	.  reduce 183 (src line 1141)

	opt_newlines  goto 282
	newlines  goto 129
	newline  goto 7

224: shift/reduce conflict (shift 137(0), red'n 117(0)) on '['
state 224
	slice_count:  '[' ']'.    (117)
	slice_count:  '[' ']'.slice_count 

	'['  shift 137
	.  reduce 117 (src line 778)

	slice_count  goto 215

state 225
	expr:  '(' expr ')'.    (82)

	.  reduce 82 (src line 586)


state 226
	exprs:  exprs.',' opt_newlines expr 
	exprs:  exprs.',' opt_newlines expr_ident 
	expr:  IDENT '(' exprs.VARARG ')' 
	expr:  IDENT '(' exprs.')' 

	VARARG  shift 283
	')'  shift 284
	','  shift 152
	.  error


state 227
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr_ident '[' expr.']' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr_ident '[' expr.':' expr ']' 
	expr_slice:  expr_ident '[' expr.':' ']' 
	expr_slice:  expr_ident '[' expr.':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	':'  shift 286
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	']'  shift 285
	'.'  shift 89
	.  error


state 228
	expr_slice:  expr_ident '[' ':'.expr ']' 
	expr_slice:  expr_ident '[' ':'.expr ':' expr ']' 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 287
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 229
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  LEN '(' expr.')' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	')'  shift 288
	'['  shift 87
	'.'  shift 89
	.  error


state 230
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  IMPORT '(' expr.')' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	')'  shift 289
	'['  shift 87
	'.'  shift 89
	.  error


state 231
	expr:  NEW '(' type_data.')' 
	type_data:  type_data.'.' IDENT 

	')'  shift 290
	'.'  shift 218
	.  error


state 232
	expr:  MAKE '(' type_data.')' 
	expr:  MAKE '(' type_data.',' expr ')' 
	expr:  MAKE '(' type_data.',' expr ',' expr ')' 
	type_data:  type_data.'.' IDENT 

	')'  shift 291
	','  shift 292
	'.'  shift 218
	.  error


state 233
	expr:  MAKE '(' TYPE.IDENT ',' expr ')' 

	IDENT  shift 293
	.  error


state 234
	expr:  MAP '{' opt_newlines.expr_map opt_comma_newlines '}' 
	expr_map: .    (129)

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  reduce 129 (src line 852)

	expr  goto 237
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_map  goto 294
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 235
	expr:  MAP '[' type_data.']' type_data '{' opt_newlines expr_map opt_comma_newlines '}' 
	type_data:  type_data.'.' IDENT 

	']'  shift 295
	'.'  shift 218
	.  error


state 236
	expr:  '{' opt_newlines expr_map.opt_comma_newlines '}' 
	expr_map:  expr_map.',' opt_newlines expr ':' expr 
	opt_comma_newlines: .    (188)

	','  shift 297
	'\n'  shift 8
	.  reduce 188 (src line 1151)

	opt_comma_newlines  goto 296
	newlines  goto 278
	newline  goto 7

state 237
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_map:  expr.':' expr 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	':'  shift 298
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  error


state 238
	stmt_var:  VAR expr_idents '='.exprs 
	exprs: .    (67)

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  reduce 67 (src line 508)

	exprs  goto 299
	expr  goto 73
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 239
	stmt_lets:  exprs '=' exprs.    (32)
	exprs:  exprs.',' opt_newlines expr 
	exprs:  exprs.',' opt_newlines expr_ident 

	','  shift 152
	.  reduce 32 (src line 283)


state 240
	stmt_lets:  exprs EQOPCHAN expr.    (34)
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 34 (src line 300)


state 241
	exprs:  exprs ',' opt_newlines.expr 
	exprs:  exprs ',' opt_newlines.expr_ident 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 300
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 301
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 242
	stmt:  MODULE IDENT '{' compstmt.'}' 

	'}'  shift 302
	.  error


state 243
	stmt:  TRY '{' compstmt '}'.CATCH IDENT '{' compstmt '}' FINALLY '{' compstmt '}' 
	stmt:  TRY '{' compstmt '}'.CATCH '{' compstmt '}' FINALLY '{' compstmt '}' 
	stmt:  TRY '{' compstmt '}'.CATCH IDENT '{' compstmt '}' 
	stmt:  TRY '{' compstmt '}'.CATCH '{' compstmt '}' 

	CATCH  shift 303
	.  error


state 244
	stmt:  GO IDENT '(' exprs.VARARG ')' 
	stmt:  GO IDENT '(' exprs.')' 
	exprs:  exprs.',' opt_newlines expr 
	exprs:  exprs.',' opt_newlines expr_ident 
	expr:  IDENT '(' exprs.VARARG ')' 
	expr:  IDENT '(' exprs.')' 

	VARARG  shift 304
	')'  shift 305
	','  shift 152
	.  error


state 245
	stmt:  GO expr '(' exprs.VARARG ')' 
	stmt:  GO expr '(' exprs.')' 
	exprs:  exprs.',' opt_newlines expr 
	exprs:  exprs.',' opt_newlines expr_ident 
	expr:  expr '(' exprs.VARARG ')' 
	expr:  expr '(' exprs.')' 

	VARARG  shift 306
	')'  shift 307
	','  shift 152
	.  error


state 246
	stmt:  DELETE '(' expr ')'.    (20)

	.  reduce 20 (src line 223)


state 247
	stmt:  DELETE '(' expr ','.expr ')' 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 308
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 248
	stmt:  CLOSE '(' expr ')'.    (22)

	.  reduce 22 (src line 233)


state 249
	stmt_if:  stmt_if ELSE IF expr.'{' compstmt '}' 
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'{'  shift 309
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  error


state 250
	stmt_if:  stmt_if ELSE '{' compstmt.'}' 

	'}'  shift 310
	.  error


state 251
	expr:  expr '?' expr ':'.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 311
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 252
	expr:  expr '(' exprs VARARG.')' 

	')'  shift 312
	.  error


state 253
	expr:  expr '(' exprs ')'.    (86)

	.  reduce 86 (src line 606)


state 254
	expr:  expr '[' expr ']'.    (88)

	.  reduce 88 (src line 616)


state 255
	expr_slice:  expr '[' expr ':'.expr ']' 
	expr_slice:  expr '[' expr ':'.']' 
	expr_slice:  expr '[' expr ':'.expr ':' expr ']' 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	']'  shift 314
	'!'  shift 60
	.  error

	expr  goto 313
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 256
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr '[' ':' expr.']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr '[' ':' expr.':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	':'  shift 316
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	']'  shift 315
	'.'  shift 89
	.  error


state 257
	stmt_if:  IF expr '{' compstmt.'}' 

	'}'  shift 317
	.  error


state 258
	stmt_for:  FOR '{' compstmt '}'.    (38)

	.  reduce 38 (src line 333)


state 259
	stmt_for:  FOR expr_idents IN expr.'{' compstmt '}' 
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'{'  shift 318
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  error


state 260
	expr_idents:  expr_idents ',' opt_newlines.IDENT 

	IDENT  shift 319
	.  error


state 261
	stmt_for:  FOR expr '{' compstmt.'}' 

	'}'  shift 320
	.  error


262: shift/reduce conflict (shift 8(0), red'n 183(0)) on '\n'
 262: reduce/reduce conflict  (red'ns 183 and 178) on IDENT
 262: reduce/reduce conflict  (red'ns 183 and 178) on NUMBER
 262: reduce/reduce conflict  (red'ns 183 and 178) on STRING
 262: reduce/reduce conflict  (red'ns 183 and 178) on FUNC
 262: reduce/reduce conflict  (red'ns 183 and 178) on NEW
 262: reduce/reduce conflict  (red'ns 183 and 178) on TRUE
 262: reduce/reduce conflict  (red'ns 183 and 178) on FALSE
 262: reduce/reduce conflict  (red'ns 183 and 178) on NIL
 262: reduce/reduce conflict  (red'ns 183 and 178) on MAKE
 262: reduce/reduce conflict  (red'ns 183 and 178) on OPCHAN
 262: reduce/reduce conflict  (red'ns 183 and 178) on LEN
 262: reduce/reduce conflict  (red'ns 183 and 178) on MAP
 262: reduce/reduce conflict  (red'ns 183 and 178) on IMPORT
 262: reduce/reduce conflict  (red'ns 183 and 178) on '-'
 262: reduce/reduce conflict  (red'ns 183 and 178) on '^'
 262: reduce/reduce conflict  (red'ns 183 and 178) on '*'
 262: reduce/reduce conflict  (red'ns 183 and 178) on '&'
 262: reduce/reduce conflict  (red'ns 183 and 178) on '{'
 262: reduce/reduce conflict  (red'ns 183 and 178) on '}'
 262: reduce/reduce conflict  (red'ns 183 and 178) on '('
 262: reduce/reduce conflict  (red'ns 183 and 178) on ','
262: shift/reduce conflict (shift 5(0), red'n 178(0)) on ';'
 262: reduce/reduce conflict  (red'ns 183 and 178) on '['
 262: reduce/reduce conflict  (red'ns 183 and 178) on '!'
262: shift/reduce conflict (shift 8(0), red'n 178(0)) on '\n'
state 262
	stmt_for:  FOR ';' ';' '{'.compstmt '}' 
	expr:  '{'.opt_newlines expr_map opt_comma_newlines '}' 
	opt_newlines: .    (183)
	opt_term: .    (178)

	';'  shift 5
	'\n'  shift 8
	.  reduce 178 (src line 1132)

	compstmt  goto 321
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	opt_newlines  goto 147
	newlines  goto 204
	newline  goto 7

state 263
	stmt_for:  FOR ';' ';' expr.'{' compstmt '}' 
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'{'  shift 322
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  error


state 264
	stmt_for:  FOR ';' expr ';'.'{' compstmt '}' 
	stmt_for:  FOR ';' expr ';'.expr '{' compstmt '}' 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 323
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 324
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 265
	stmt_for:  FOR stmt_var_or_lets ';' ';'.'{' compstmt '}' 
	stmt_for:  FOR stmt_var_or_lets ';' ';'.expr '{' compstmt '}' 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 325
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 326
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 266
	stmt_for:  FOR stmt_var_or_lets ';' expr.';' '{' compstmt '}' 
	stmt_for:  FOR stmt_var_or_lets ';' expr.';' expr '{' compstmt '}' 
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	';'  shift 327
	'['  shift 87
	'.'  shift 89
	.  error


267: shift/reduce conflict (shift 332(0), red'n 59(0)) on CASE
267: shift/reduce conflict (shift 331(0), red'n 59(0)) on DEFAULT
state 267
	stmt_switch:  SWITCH expr '{' opt_newlines.stmt_switch_cases opt_newlines '}' 
	stmt_switch_cases: .    (59)

	CASE  shift 332
	DEFAULT  shift 331
	.  reduce 59 (src line 461)

	stmt_switch_cases  goto 328
	stmt_switch_case  goto 330
	stmt_switch_default  goto 329

state 268
	stmt_select:  SELECT '{' opt_newlines stmt_select_cases.opt_newlines '}' 
	stmt_select_cases:  stmt_select_cases.stmt_select_case 
	stmt_select_cases:  stmt_select_cases.stmt_select_default 
	opt_newlines: .    (183)

	CASE  shift 272
	DEFAULT  shift 271
	'\n'  shift 8
	.  reduce 183 (src line 1141)

	stmt_select_case  goto 334
	stmt_select_default  goto 335
	opt_newlines  goto 333
	newlines  goto 129
	newline  goto 7

state 269
	stmt_select_cases:  stmt_select_default.    (51)

	.  reduce 51 (src line 408)


state 270
	stmt_select_cases:  stmt_select_case.    (52)

	.  reduce 52 (src line 412)


state 271
	stmt_select_default:  DEFAULT.':' compstmt 
	stmt_select_default:  DEFAULT.':' 

	':'  shift 336
	.  error


state 272
	stmt_select_case:  CASE.stmt ':' compstmt 
	stmt: .    (5)
	exprs: .    (67)

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	RETURN  shift 13
	VAR  shift 50
	THROW  shift 14
	IF  shift 27
	FOR  shift 28
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MODULE  shift 15
	TRY  shift 16
	BREAK  shift 11
	CONTINUE  shift 12
	SWITCH  shift 29
	SELECT  shift 30
	GO  shift 17
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	DELETE  shift 18
	CLOSE  shift 19
	MAP  shift 43
	IMPORT  shift 40
	':'  reduce 5 (src line 149)
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  reduce 67 (src line 508)

	stmt  goto 337
	stmt_var_or_lets  goto 10
	stmt_var  goto 25
	stmt_lets  goto 26
	stmt_if  goto 20
	stmt_for  goto 21
	stmt_switch  goto 22
	stmt_select  goto 23
	exprs  goto 51
	expr  goto 24
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 273
	expr:  FUNC '(' expr_idents ')'.'{' compstmt '}' 

	'{'  shift 338
	.  error


state 274
	expr:  FUNC '(' expr_idents VARARG.')' '{' compstmt '}' 

	')'  shift 339
	.  error


state 275
	expr:  FUNC IDENT '(' expr_idents.')' '{' compstmt '}' 
	expr:  FUNC IDENT '(' expr_idents.VARARG ')' '{' compstmt '}' 
	expr_idents:  expr_idents.',' opt_newlines IDENT 

	VARARG  shift 341
	')'  shift 340
	','  shift 206
	.  error


state 276
	exprs:  exprs ','.opt_newlines expr 
	exprs:  exprs ','.opt_newlines expr_ident 
	opt_comma_newlines:  ','.newlines 
	opt_comma_newlines:  ','.    (191)
	opt_newlines: .    (183)

	'}'  reduce 191 (src line 1155)
	']'  reduce 191 (src line 1155)
	'\n'  shift 8
	.  reduce 183 (src line 1141)

	opt_newlines  goto 241
	newlines  goto 342
	newline  goto 7

state 277
	expr:  '[' opt_newlines exprs opt_comma_newlines.']' 

	']'  shift 343
	.  error


state 278
	newlines:  newlines.newline 
	opt_comma_newlines:  newlines.    (190)

	'\n'  shift 8
	.  reduce 190 (src line 1154)

	newline  goto 71

state 279
	expr:  slice_count type_data '{' opt_newlines.exprs opt_comma_newlines '}' 
	exprs: .    (67)

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  reduce 67 (src line 508)

	exprs  goto 344
	expr  goto 73
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 280
	type_data:  type_data '.' IDENT.    (109)

	.  reduce 109 (src line 718)


state 281
	type_data:  type_data.'.' IDENT 
	type_data:  MAP '[' type_data.']' type_data 

	']'  shift 345
	'.'  shift 218
	.  error


state 282
	type_data:  STRUCT '{' opt_newlines.type_data_struct opt_newlines '}' 

	IDENT  shift 347
	.  error

	type_data_struct  goto 346

state 283
	expr:  IDENT '(' exprs VARARG.')' 

	')'  shift 348
	.  error


state 284
	expr:  IDENT '(' exprs ')'.    (84)

	.  reduce 84 (src line 596)


state 285
	expr:  expr_ident '[' expr ']'.    (87)

	.  reduce 87 (src line 611)


state 286
	expr_slice:  expr_ident '[' expr ':'.expr ']' 
	expr_slice:  expr_ident '[' expr ':'.']' 
	expr_slice:  expr_ident '[' expr ':'.expr ':' expr ']' 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	']'  shift 350
	'!'  shift 60
	.  error

	expr  goto 349
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 287
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr_ident '[' ':' expr.']' 
	expr_slice:  expr_ident '[' ':' expr.':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	':'  shift 352
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	']'  shift 351
	'.'  shift 89
	.  error


state 288
	expr:  LEN '(' expr ')'.    (89)

	.  reduce 89 (src line 621)


state 289
	expr:  IMPORT '(' expr ')'.    (90)

	.  reduce 90 (src line 626)


state 290
	expr:  NEW '(' type_data ')'.    (91)

	.  reduce 91 (src line 631)


state 291
	expr:  MAKE '(' type_data ')'.    (92)

	.  reduce 92 (src line 641)


state 292
	expr:  MAKE '(' type_data ','.expr ')' 
	expr:  MAKE '(' type_data ','.expr ',' expr ')' 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 353
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 293
	expr:  MAKE '(' TYPE IDENT.',' expr ')' 

	','  shift 354
	.  error


state 294
	expr:  MAP '{' opt_newlines expr_map.opt_comma_newlines '}' 
	expr_map:  expr_map.',' opt_newlines expr ':' expr 
	opt_comma_newlines: .    (188)

	','  shift 297
	'\n'  shift 8
	.  reduce 188 (src line 1151)

	opt_comma_newlines  goto 355
	newlines  goto 278
	newline  goto 7

state 295
	expr:  MAP '[' type_data ']'.type_data '{' opt_newlines expr_map opt_comma_newlines '}' 

	IDENT  shift 131
	CHAN  shift 135
	STRUCT  shift 136
	MAP  shift 134
	'*'  shift 132
	'['  shift 137
	.  error

	type_data  goto 356
	slice_count  goto 133

state 296
	expr:  '{' opt_newlines expr_map opt_comma_newlines.'}' 

	'}'  shift 357
	.  error


state 297
	expr_map:  expr_map ','.opt_newlines expr ':' expr 
	opt_comma_newlines:  ','.newlines 
	opt_comma_newlines:  ','.    (191)
	opt_newlines: .    (183)

	'}'  reduce 191 (src line 1155)
	'\n'  shift 8
	.  reduce 183 (src line 1141)

	opt_newlines  goto 358
	newlines  goto 342
	newline  goto 7

state 298
	expr_map:  expr ':'.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 359
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 299
	stmt_var:  VAR expr_idents '=' exprs.    (30)
	exprs:  exprs.',' opt_newlines expr 
	exprs:  exprs.',' opt_newlines expr_ident 

	','  shift 152
	.  reduce 30 (src line 270)


state 300
	exprs:  exprs ',' opt_newlines expr.    (69)
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 69 (src line 517)


 301: reduce/reduce conflict  (red'ns 70 and 120) on $end
 301: reduce/reduce conflict  (red'ns 70 and 120) on VARARG
 301: reduce/reduce conflict  (red'ns 70 and 120) on CASE
 301: reduce/reduce conflict  (red'ns 70 and 120) on DEFAULT
 301: reduce/reduce conflict  (red'ns 70 and 120) on EQOPCHAN
 301: reduce/reduce conflict  (red'ns 70 and 120) on '='
 301: reduce/reduce conflict  (red'ns 70 and 120) on ':'
 301: reduce/reduce conflict  (red'ns 70 and 120) on '}'
 301: reduce/reduce conflict  (red'ns 70 and 120) on ')'
 301: reduce/reduce conflict  (red'ns 70 and 120) on ','
 301: reduce/reduce conflict  (red'ns 70 and 120) on ';'
301: shift/reduce conflict (shift 140(0), red'n 120(0)) on '['
 301: reduce/reduce conflict  (red'ns 70 and 120) on ']'
 301: reduce/reduce conflict  (red'ns 70 and 120) on '\n'
state 301
	exprs:  exprs ',' opt_newlines expr_ident.    (70)
	expr:  expr_ident.'[' expr ']' 
	expr_member_or_ident:  expr_ident.    (120)
	expr_slice:  expr_ident.'[' expr ':' expr ']' 
	expr_slice:  expr_ident.'[' expr ':' ']' 
	expr_slice:  expr_ident.'[' ':' expr ']' 
	expr_slice:  expr_ident.'[' ':' expr ':' expr ']' 
	expr_slice:  expr_ident.'[' expr ':' expr ':' expr ']' 

	$end  reduce 70 (src line 524)
	VARARG  reduce 70 (src line 524)
	CASE  reduce 70 (src line 524)
	DEFAULT  reduce 70 (src line 524)
	EQOPCHAN  reduce 70 (src line 524)
	'='  reduce 70 (src line 524)
	':'  reduce 70 (src line 524)
	'}'  reduce 70 (src line 524)
	')'  reduce 70 (src line 524)
	','  reduce 70 (src line 524)
	';'  reduce 70 (src line 524)
	'['  shift 140
	']'  reduce 70 (src line 524)
	'\n'  reduce 70 (src line 524)
	.  reduce 120 (src line 793)


state 302
	stmt:  MODULE IDENT '{' compstmt '}'.    (11)

	.  reduce 11 (src line 178)


state 303
	stmt:  TRY '{' compstmt '}' CATCH.IDENT '{' compstmt '}' FINALLY '{' compstmt '}' 
	stmt:  TRY '{' compstmt '}' CATCH.'{' compstmt '}' FINALLY '{' compstmt '}' 
	stmt:  TRY '{' compstmt '}' CATCH.IDENT '{' compstmt '}' 
	stmt:  TRY '{' compstmt '}' CATCH.'{' compstmt '}' 

	IDENT  shift 360
	'{'  shift 361
	.  error


state 304
	stmt:  GO IDENT '(' exprs VARARG.')' 
	expr:  IDENT '(' exprs VARARG.')' 

	')'  shift 362
	.  error


state 305
	stmt:  GO IDENT '(' exprs ')'.    (17)
	expr:  IDENT '(' exprs ')'.    (84)

	$end  reduce 17 (src line 208)
	CASE  reduce 17 (src line 208)
	DEFAULT  reduce 17 (src line 208)
	':'  reduce 17 (src line 208)
	'}'  reduce 17 (src line 208)
	';'  reduce 17 (src line 208)
	'\n'  reduce 17 (src line 208)
	.  reduce 84 (src line 596)


state 306
	stmt:  GO expr '(' exprs VARARG.')' 
	expr:  expr '(' exprs VARARG.')' 

	')'  shift 363
	.  error


state 307
	stmt:  GO expr '(' exprs ')'.    (19)
	expr:  expr '(' exprs ')'.    (86)

	$end  reduce 19 (src line 218)
	CASE  reduce 19 (src line 218)
	DEFAULT  reduce 19 (src line 218)
	':'  reduce 19 (src line 218)
	'}'  reduce 19 (src line 218)
	';'  reduce 19 (src line 218)
	'\n'  reduce 19 (src line 218)
	.  reduce 86 (src line 606)


state 308
	stmt:  DELETE '(' expr ',' expr.')' 
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	')'  shift 364
	'['  shift 87
	'.'  shift 89
	.  error


309: shift/reduce conflict (shift 5(0), red'n 178(0)) on ';'
309: shift/reduce conflict (shift 8(0), red'n 178(0)) on '\n'
state 309
	stmt_if:  stmt_if ELSE IF expr '{'.compstmt '}' 
	opt_term: .    (178)

	';'  shift 5
	'\n'  shift 8
	.  reduce 178 (src line 1132)

	compstmt  goto 365
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	newlines  goto 6
	newline  goto 7

state 310
	stmt_if:  stmt_if ELSE '{' compstmt '}'.    (37)

	.  reduce 37 (src line 324)


311: shift/reduce conflict (shift 86(0), red'n 73(3)) on '('
311: shift/reduce conflict (shift 87(0), red'n 73(3)) on '['
311: shift/reduce conflict (shift 89(0), red'n 73(3)) on '.'
state 311
	expr:  expr.'?' expr ':' expr 
	expr:  expr '?' expr ':' expr.    (73)
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 73 (src line 541)


state 312
	expr:  expr '(' exprs VARARG ')'.    (85)

	.  reduce 85 (src line 601)


state 313
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr '[' expr ':' expr.']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_slice:  expr '[' expr ':' expr.':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	':'  shift 367
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	']'  shift 366
	'.'  shift 89
	.  error


state 314
	expr_slice:  expr '[' expr ':' ']'.    (138)

	.  reduce 138 (src line 895)


state 315
	expr_slice:  expr '[' ':' expr ']'.    (139)

	.  reduce 139 (src line 899)


state 316
	expr_slice:  expr '[' ':' expr ':'.expr ']' 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 368
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 317
	stmt_if:  IF expr '{' compstmt '}'.    (35)

	.  reduce 35 (src line 313)


318: shift/reduce conflict (shift 5(0), red'n 178(0)) on ';'
318: shift/reduce conflict (shift 8(0), red'n 178(0)) on '\n'
state 318
	stmt_for:  FOR expr_idents IN expr '{'.compstmt '}' 
	opt_term: .    (178)

	';'  shift 5
	'\n'  shift 8
	.  reduce 178 (src line 1132)

	compstmt  goto 369
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	newlines  goto 6
	newline  goto 7

state 319
	expr_idents:  expr_idents ',' opt_newlines IDENT.    (107)

	.  reduce 107 (src line 705)


state 320
	stmt_for:  FOR expr '{' compstmt '}'.    (40)

	.  reduce 40 (src line 350)


state 321
	stmt_for:  FOR ';' ';' '{' compstmt.'}' 

	'}'  shift 370
	.  error


322: shift/reduce conflict (shift 5(0), red'n 178(0)) on ';'
322: shift/reduce conflict (shift 8(0), red'n 178(0)) on '\n'
state 322
	stmt_for:  FOR ';' ';' expr '{'.compstmt '}' 
	opt_term: .    (178)

	';'  shift 5
	'\n'  shift 8
	.  reduce 178 (src line 1132)

	compstmt  goto 371
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	newlines  goto 6
	newline  goto 7

323: shift/reduce conflict (shift 8(0), red'n 183(0)) on '\n'
 323: reduce/reduce conflict  (red'ns 183 and 178) on IDENT
 323: reduce/reduce conflict  (red'ns 183 and 178) on NUMBER
 323: reduce/reduce conflict  (red'ns 183 and 178) on STRING
 323: reduce/reduce conflict  (red'ns 183 and 178) on FUNC
 323: reduce/reduce conflict  (red'ns 183 and 178) on NEW
 323: reduce/reduce conflict  (red'ns 183 and 178) on TRUE
 323: reduce/reduce conflict  (red'ns 183 and 178) on FALSE
 323: reduce/reduce conflict  (red'ns 183 and 178) on NIL
 323: reduce/reduce conflict  (red'ns 183 and 178) on MAKE
 323: reduce/reduce conflict  (red'ns 183 and 178) on OPCHAN
 323: reduce/reduce conflict  (red'ns 183 and 178) on LEN
 323: reduce/reduce conflict  (red'ns 183 and 178) on MAP
 323: reduce/reduce conflict  (red'ns 183 and 178) on IMPORT
 323: reduce/reduce conflict  (red'ns 183 and 178) on '-'
 323: reduce/reduce conflict  (red'ns 183 and 178) on '^'
 323: reduce/reduce conflict  (red'ns 183 and 178) on '*'
 323: reduce/reduce conflict  (red'ns 183 and 178) on '&'
 323: reduce/reduce conflict  (red'ns 183 and 178) on '{'
 323: reduce/reduce conflict  (red'ns 183 and 178) on '}'
 323: reduce/reduce conflict  (red'ns 183 and 178) on '('
 323: reduce/reduce conflict  (red'ns 183 and 178) on ','
323: shift/reduce conflict (shift 5(0), red'n 178(0)) on ';'
 323: reduce/reduce conflict  (red'ns 183 and 178) on '['
 323: reduce/reduce conflict  (red'ns 183 and 178) on '!'
323: shift/reduce conflict (shift 8(0), red'n 178(0)) on '\n'
state 323
	stmt_for:  FOR ';' expr ';' '{'.compstmt '}' 
	expr:  '{'.opt_newlines expr_map opt_comma_newlines '}' 
	opt_newlines: .    (183)
	opt_term: .    (178)

	';'  shift 5
	'\n'  shift 8
	.  reduce 178 (src line 1132)

	compstmt  goto 372
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	opt_newlines  goto 147
	newlines  goto 204
	newline  goto 7

state 324
	stmt_for:  FOR ';' expr ';' expr.'{' compstmt '}' 
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'{'  shift 373
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  error


325: shift/reduce conflict (shift 8(0), red'n 183(0)) on '\n'
 325: reduce/reduce conflict  (red'ns 183 and 178) on IDENT
 325: reduce/reduce conflict  (red'ns 183 and 178) on NUMBER
 325: reduce/reduce conflict  (red'ns 183 and 178) on STRING
 325: reduce/reduce conflict  (red'ns 183 and 178) on FUNC
 325: reduce/reduce conflict  (red'ns 183 and 178) on NEW
 325: reduce/reduce conflict  (red'ns 183 and 178) on TRUE
 325: reduce/reduce conflict  (red'ns 183 and 178) on FALSE
 325: reduce/reduce conflict  (red'ns 183 and 178) on NIL
 325: reduce/reduce conflict  (red'ns 183 and 178) on MAKE
 325: reduce/reduce conflict  (red'ns 183 and 178) on OPCHAN
 325: reduce/reduce conflict  (red'ns 183 and 178) on LEN
 325: reduce/reduce conflict  (red'ns 183 and 178) on MAP
 325: reduce/reduce conflict  (red'ns 183 and 178) on IMPORT
 325: reduce/reduce conflict  (red'ns 183 and 178) on '-'
 325: reduce/reduce conflict  (red'ns 183 and 178) on '^'
 325: reduce/reduce conflict  (red'ns 183 and 178) on '*'
 325: reduce/reduce conflict  (red'ns 183 and 178) on '&'
 325: reduce/reduce conflict  (red'ns 183 and 178) on '{'
 325: reduce/reduce conflict  (red'ns 183 and 178) on '}'
 325: reduce/reduce conflict  (red'ns 183 and 178) on '('
 325: reduce/reduce conflict  (red'ns 183 and 178) on ','
325: shift/reduce conflict (shift 5(0), red'n 178(0)) on ';'
 325: reduce/reduce conflict  (red'ns 183 and 178) on '['
 325: reduce/reduce conflict  (red'ns 183 and 178) on '!'
325: shift/reduce conflict (shift 8(0), red'n 178(0)) on '\n'
state 325
	stmt_for:  FOR stmt_var_or_lets ';' ';' '{'.compstmt '}' 
	expr:  '{'.opt_newlines expr_map opt_comma_newlines '}' 
	opt_newlines: .    (183)
	opt_term: .    (178)

	';'  shift 5
	'\n'  shift 8
	.  reduce 178 (src line 1132)

	compstmt  goto 374
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	opt_newlines  goto 147
	newlines  goto 204
	newline  goto 7

state 326
	stmt_for:  FOR stmt_var_or_lets ';' ';' expr.'{' compstmt '}' 
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'{'  shift 375
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  error


state 327
	stmt_for:  FOR stmt_var_or_lets ';' expr ';'.'{' compstmt '}' 
	stmt_for:  FOR stmt_var_or_lets ';' expr ';'.expr '{' compstmt '}' 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 376
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 377
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 328
	stmt_switch:  SWITCH expr '{' opt_newlines stmt_switch_cases.opt_newlines '}' 
	stmt_switch_cases:  stmt_switch_cases.stmt_switch_case 
	stmt_switch_cases:  stmt_switch_cases.stmt_switch_default 
	opt_newlines: .    (183)

	CASE  shift 332
	DEFAULT  shift 331
	'\n'  shift 8
	.  reduce 183 (src line 1141)

	stmt_switch_case  goto 379
	stmt_switch_default  goto 380
	opt_newlines  goto 378
	newlines  goto 129
	newline  goto 7

state 329
	stmt_switch_cases:  stmt_switch_default.    (60)

	.  reduce 60 (src line 466)


state 330
	stmt_switch_cases:  stmt_switch_case.    (61)

	.  reduce 61 (src line 470)


state 331
	stmt_switch_default:  DEFAULT.':' compstmt 

	':'  shift 381
	.  error


state 332
	stmt_switch_case:  CASE.expr ':' compstmt 
	stmt_switch_case:  CASE.exprs ':' compstmt 
	exprs: .    (67)

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  reduce 67 (src line 508)

	exprs  goto 383
	expr  goto 382
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 333
	stmt_select:  SELECT '{' opt_newlines stmt_select_cases opt_newlines.'}' 

	'}'  shift 384
	.  error


state 334
	stmt_select_cases:  stmt_select_cases stmt_select_case.    (53)

	.  reduce 53 (src line 416)


state 335
	stmt_select_cases:  stmt_select_cases stmt_select_default.    (54)

	.  reduce 54 (src line 422)


336: shift/reduce conflict (shift 8(0), red'n 57(3)) on '\n'
 336: reduce/reduce conflict  (red'ns 57 and 178) on CASE
 336: reduce/reduce conflict  (red'ns 57 and 178) on DEFAULT
 336: reduce/reduce conflict  (red'ns 57 and 178) on '}'
336: shift/reduce conflict (shift 5(0), red'n 178(0)) on ';'
336: shift/reduce conflict (shift 8(0), red'n 178(0)) on '\n'
state 336
	stmt_select_default:  DEFAULT ':'.compstmt 
	stmt_select_default:  DEFAULT ':'.    (57)
	opt_term: .    (178)

	CASE  reduce 57 (src line 447)
	DEFAULT  reduce 57 (src line 447)
	'}'  reduce 57 (src line 447)
	';'  shift 5
	'\n'  shift 8
	.  reduce 178 (src line 1132)

	compstmt  goto 385
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	newlines  goto 6
	newline  goto 7

state 337
	stmt_select_case:  CASE stmt.':' compstmt 

	':'  shift 386
	.  error


338: shift/reduce conflict (shift 5(0), red'n 178(0)) on ';'
338: shift/reduce conflict (shift 8(0), red'n 178(0)) on '\n'
state 338
	expr:  FUNC '(' expr_idents ')' '{'.compstmt '}' 
	opt_term: .    (178)

	';'  shift 5
	'\n'  shift 8
	.  reduce 178 (src line 1132)

	compstmt  goto 387
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	newlines  goto 6
	newline  goto 7

state 339
	expr:  FUNC '(' expr_idents VARARG ')'.'{' compstmt '}' 

	'{'  shift 388
	.  error


state 340
	expr:  FUNC IDENT '(' expr_idents ')'.'{' compstmt '}' 

	'{'  shift 389
	.  error


state 341
	expr:  FUNC IDENT '(' expr_idents VARARG.')' '{' compstmt '}' 

	')'  shift 390
	.  error


state 342
	opt_newlines:  newlines.    (184)
	newlines:  newlines.newline 
	opt_comma_newlines:  ',' newlines.    (189)

	'}'  reduce 189 (src line 1153)
	']'  reduce 189 (src line 1153)
	'\n'  shift 8
	.  reduce 184 (src line 1143)

	newline  goto 71

state 343
	expr:  '[' opt_newlines exprs opt_comma_newlines ']'.    (80)

	.  reduce 80 (src line 576)


state 344
	exprs:  exprs.',' opt_newlines expr 
	exprs:  exprs.',' opt_newlines expr_ident 
	expr:  slice_count type_data '{' opt_newlines exprs.opt_comma_newlines '}' 
	opt_comma_newlines: .    (188)

	','  shift 276
	'\n'  shift 8
	.  reduce 188 (src line 1151)

	opt_comma_newlines  goto 391
	newlines  goto 278
	newline  goto 7

state 345
	type_data:  MAP '[' type_data ']'.type_data 

	IDENT  shift 131
	CHAN  shift 135
	STRUCT  shift 136
	MAP  shift 134
	'*'  shift 132
	'['  shift 137
	.  error

	type_data  goto 392
	slice_count  goto 133

state 346
	type_data:  STRUCT '{' opt_newlines type_data_struct.opt_newlines '}' 
	type_data_struct:  type_data_struct.',' opt_newlines IDENT type_data 
	opt_newlines: .    (183)

	','  shift 394
	'\n'  shift 8
	.  reduce 183 (src line 1141)

	opt_newlines  goto 393
	newlines  goto 129
	newline  goto 7

state 347
	type_data_struct:  IDENT.type_data 

	IDENT  shift 131
	CHAN  shift 135
	STRUCT  shift 136
	MAP  shift 134
	'*'  shift 132
	'['  shift 137
	.  error

	type_data  goto 395
	slice_count  goto 133

state 348
	expr:  IDENT '(' exprs VARARG ')'.    (83)

	.  reduce 83 (src line 591)


state 349
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr_ident '[' expr ':' expr.']' 
	expr_slice:  expr_ident '[' expr ':' expr.':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	':'  shift 397
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	']'  shift 396
	'.'  shift 89
	.  error


state 350
	expr_slice:  expr_ident '[' expr ':' ']'.    (133)

	.  reduce 133 (src line 875)


state 351
	expr_slice:  expr_ident '[' ':' expr ']'.    (134)

	.  reduce 134 (src line 879)


state 352
	expr_slice:  expr_ident '[' ':' expr ':'.expr ']' 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 398
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 353
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  MAKE '(' type_data ',' expr.')' 
	expr:  MAKE '(' type_data ',' expr.',' expr ')' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	')'  shift 399
	','  shift 400
	'['  shift 87
	'.'  shift 89
	.  error


state 354
	expr:  MAKE '(' TYPE IDENT ','.expr ')' 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 401
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 355
	expr:  MAP '{' opt_newlines expr_map opt_comma_newlines.'}' 

	'}'  shift 402
	.  error


state 356
	expr:  MAP '[' type_data ']' type_data.'{' opt_newlines expr_map opt_comma_newlines '}' 
	type_data:  type_data.'.' IDENT 

	'{'  shift 403
	'.'  shift 218
	.  error


state 357
	expr:  '{' opt_newlines expr_map opt_comma_newlines '}'.    (99)

	.  reduce 99 (src line 678)


state 358
	expr_map:  expr_map ',' opt_newlines.expr ':' expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 404
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 359
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_map:  expr ':' expr.    (130)
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 130 (src line 857)


state 360
	stmt:  TRY '{' compstmt '}' CATCH IDENT.'{' compstmt '}' FINALLY '{' compstmt '}' 
	stmt:  TRY '{' compstmt '}' CATCH IDENT.'{' compstmt '}' 

	'{'  shift 405
	.  error


361: shift/reduce conflict (shift 5(0), red'n 178(0)) on ';'
361: shift/reduce conflict (shift 8(0), red'n 178(0)) on '\n'
state 361
	stmt:  TRY '{' compstmt '}' CATCH '{'.compstmt '}' FINALLY '{' compstmt '}' 
	stmt:  TRY '{' compstmt '}' CATCH '{'.compstmt '}' 
	opt_term: .    (178)

	';'  shift 5
	'\n'  shift 8
	.  reduce 178 (src line 1132)

	compstmt  goto 406
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	newlines  goto 6
	newline  goto 7

state 362
	stmt:  GO IDENT '(' exprs VARARG ')'.    (16)
	expr:  IDENT '(' exprs VARARG ')'.    (83)

	$end  reduce 16 (src line 203)
	CASE  reduce 16 (src line 203)
	DEFAULT  reduce 16 (src line 203)
	':'  reduce 16 (src line 203)
	'}'  reduce 16 (src line 203)
	';'  reduce 16 (src line 203)
	'\n'  reduce 16 (src line 203)
	.  reduce 83 (src line 591)


state 363
	stmt:  GO expr '(' exprs VARARG ')'.    (18)
	expr:  expr '(' exprs VARARG ')'.    (85)

	$end  reduce 18 (src line 213)
	CASE  reduce 18 (src line 213)
	DEFAULT  reduce 18 (src line 213)
	':'  reduce 18 (src line 213)
	'}'  reduce 18 (src line 213)
	';'  reduce 18 (src line 213)
	'\n'  reduce 18 (src line 213)
	.  reduce 85 (src line 601)


state 364
	stmt:  DELETE '(' expr ',' expr ')'.    (21)

	.  reduce 21 (src line 228)


state 365
	stmt_if:  stmt_if ELSE IF expr '{' compstmt.'}' 

	'}'  shift 407
	.  error


state 366
	expr_slice:  expr '[' expr ':' expr ']'.    (137)

	.  reduce 137 (src line 891)


state 367
	expr_slice:  expr '[' expr ':' expr ':'.expr ']' 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 408
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 368
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr '[' ':' expr ':' expr.']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	']'  shift 409
	'.'  shift 89
	.  error


state 369
	stmt_for:  FOR expr_idents IN expr '{' compstmt.'}' 

	'}'  shift 410
	.  error


state 370
	stmt_for:  FOR ';' ';' '{' compstmt '}'.    (41)

	.  reduce 41 (src line 355)


state 371
	stmt_for:  FOR ';' ';' expr '{' compstmt.'}' 

	'}'  shift 411
	.  error


state 372
	stmt_for:  FOR ';' expr ';' '{' compstmt.'}' 

	'}'  shift 412
	.  error


373: shift/reduce conflict (shift 5(0), red'n 178(0)) on ';'
373: shift/reduce conflict (shift 8(0), red'n 178(0)) on '\n'
state 373
	stmt_for:  FOR ';' expr ';' expr '{'.compstmt '}' 
	opt_term: .    (178)

	';'  shift 5
	'\n'  shift 8
	.  reduce 178 (src line 1132)

	compstmt  goto 413
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	newlines  goto 6
	newline  goto 7

state 374
	stmt_for:  FOR stmt_var_or_lets ';' ';' '{' compstmt.'}' 

	'}'  shift 414
	.  error


375: shift/reduce conflict (shift 5(0), red'n 178(0)) on ';'
375: shift/reduce conflict (shift 8(0), red'n 178(0)) on '\n'
state 375
	stmt_for:  FOR stmt_var_or_lets ';' ';' expr '{'.compstmt '}' 
	opt_term: .    (178)

	';'  shift 5
	'\n'  shift 8
	.  reduce 178 (src line 1132)

	compstmt  goto 415
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	newlines  goto 6
	newline  goto 7

376: shift/reduce conflict (shift 8(0), red'n 183(0)) on '\n'
 376: reduce/reduce conflict  (red'ns 183 and 178) on IDENT
 376: reduce/reduce conflict  (red'ns 183 and 178) on NUMBER
 376: reduce/reduce conflict  (red'ns 183 and 178) on STRING
 376: reduce/reduce conflict  (red'ns 183 and 178) on FUNC
 376: reduce/reduce conflict  (red'ns 183 and 178) on NEW
 376: reduce/reduce conflict  (red'ns 183 and 178) on TRUE
 376: reduce/reduce conflict  (red'ns 183 and 178) on FALSE
 376: reduce/reduce conflict  (red'ns 183 and 178) on NIL
 376: reduce/reduce conflict  (red'ns 183 and 178) on MAKE
 376: reduce/reduce conflict  (red'ns 183 and 178) on OPCHAN
 376: reduce/reduce conflict  (red'ns 183 and 178) on LEN
 376: reduce/reduce conflict  (red'ns 183 and 178) on MAP
 376: reduce/reduce conflict  (red'ns 183 and 178) on IMPORT
 376: reduce/reduce conflict  (red'ns 183 and 178) on '-'
 376: reduce/reduce conflict  (red'ns 183 and 178) on '^'
 376: reduce/reduce conflict  (red'ns 183 and 178) on '*'
 376: reduce/reduce conflict  (red'ns 183 and 178) on '&'
 376: reduce/reduce conflict  (red'ns 183 and 178) on '{'
 376: reduce/reduce conflict  (red'ns 183 and 178) on '}'
 376: reduce/reduce conflict  (red'ns 183 and 178) on '('
 376: reduce/reduce conflict  (red'ns 183 and 178) on ','
376: shift/reduce conflict (shift 5(0), red'n 178(0)) on ';'
 376: reduce/reduce conflict  (red'ns 183 and 178) on '['
 376: reduce/reduce conflict  (red'ns 183 and 178) on '!'
376: shift/reduce conflict (shift 8(0), red'n 178(0)) on '\n'
state 376
	stmt_for:  FOR stmt_var_or_lets ';' expr ';' '{'.compstmt '}' 
	expr:  '{'.opt_newlines expr_map opt_comma_newlines '}' 
	opt_newlines: .    (183)
	opt_term: .    (178)

	';'  shift 5
	'\n'  shift 8
	.  reduce 178 (src line 1132)

	compstmt  goto 416
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	opt_newlines  goto 147
	newlines  goto 204
	newline  goto 7

state 377
	stmt_for:  FOR stmt_var_or_lets ';' expr ';' expr.'{' compstmt '}' 
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'{'  shift 417
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  error


state 378
	stmt_switch:  SWITCH expr '{' opt_newlines stmt_switch_cases opt_newlines.'}' 

	'}'  shift 418
	.  error


state 379
	stmt_switch_cases:  stmt_switch_cases stmt_switch_case.    (62)

	.  reduce 62 (src line 474)


state 380
	stmt_switch_cases:  stmt_switch_cases stmt_switch_default.    (63)

	.  reduce 63 (src line 480)


381: shift/reduce conflict (shift 5(0), red'n 178(0)) on ';'
381: shift/reduce conflict (shift 8(0), red'n 178(0)) on '\n'
state 381
	stmt_switch_default:  DEFAULT ':'.compstmt 
	opt_term: .    (178)

	';'  shift 5
	'\n'  shift 8
	.  reduce 178 (src line 1132)

	compstmt  goto 419
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	newlines  goto 6
	newline  goto 7

382: shift/reduce conflict (shift 420(3), red'n 68(0)) on ':'
state 382
	stmt_switch_case:  CASE expr.':' compstmt 
	exprs:  expr.    (68)
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	':'  shift 420
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 68 (src line 513)


state 383
	stmt_switch_case:  CASE exprs.':' compstmt 
	exprs:  exprs.',' opt_newlines expr 
	exprs:  exprs.',' opt_newlines expr_ident 

	':'  shift 421
	','  shift 152
	.  error


state 384
	stmt_select:  SELECT '{' opt_newlines stmt_select_cases opt_newlines '}'.    (49)

	.  reduce 49 (src line 396)


state 385
	stmt_select_default:  DEFAULT ':' compstmt.    (56)

	.  reduce 56 (src line 442)


386: shift/reduce conflict (shift 5(0), red'n 178(0)) on ';'
386: shift/reduce conflict (shift 8(0), red'n 178(0)) on '\n'
state 386
	stmt_select_case:  CASE stmt ':'.compstmt 
	opt_term: .    (178)

	';'  shift 5
	'\n'  shift 8
	.  reduce 178 (src line 1132)

	compstmt  goto 422
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	newlines  goto 6
	newline  goto 7

state 387
	expr:  FUNC '(' expr_idents ')' '{' compstmt.'}' 

	'}'  shift 423
	.  error


388: shift/reduce conflict (shift 5(0), red'n 178(0)) on ';'
388: shift/reduce conflict (shift 8(0), red'n 178(0)) on '\n'
state 388
	expr:  FUNC '(' expr_idents VARARG ')' '{'.compstmt '}' 
	opt_term: .    (178)

	';'  shift 5
	'\n'  shift 8
	.  reduce 178 (src line 1132)

	compstmt  goto 424
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	newlines  goto 6
	newline  goto 7

389: shift/reduce conflict (shift 5(0), red'n 178(0)) on ';'
389: shift/reduce conflict (shift 8(0), red'n 178(0)) on '\n'
state 389
	expr:  FUNC IDENT '(' expr_idents ')' '{'.compstmt '}' 
	opt_term: .    (178)

	';'  shift 5
	'\n'  shift 8
	.  reduce 178 (src line 1132)

	compstmt  goto 425
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	newlines  goto 6
	newline  goto 7

state 390
	expr:  FUNC IDENT '(' expr_idents VARARG ')'.'{' compstmt '}' 

	'{'  shift 426
	.  error


state 391
	expr:  slice_count type_data '{' opt_newlines exprs opt_comma_newlines.'}' 

	'}'  shift 427
	.  error


392: shift/reduce conflict (shift 218(0), red'n 112(0)) on '.'
state 392
	type_data:  type_data.'.' IDENT 
	type_data:  MAP '[' type_data ']' type_data.    (112)

	'.'  shift 218
	.  reduce 112 (src line 746)


state 393
	type_data:  STRUCT '{' opt_newlines type_data_struct opt_newlines.'}' 

	'}'  shift 428
	.  error


state 394
	type_data_struct:  type_data_struct ','.opt_newlines IDENT type_data 
	opt_newlines: .    (183)

	'\n'  shift 8
	.  reduce 183 (src line 1141)

	opt_newlines  goto 429
	newlines  goto 129
	newline  goto 7

state 395
	type_data:  type_data.'.' IDENT 
	type_data_struct:  IDENT type_data.    (115)

	'.'  shift 218
	.  reduce 115 (src line 764)


state 396
	expr_slice:  expr_ident '[' expr ':' expr ']'.    (132)

	.  reduce 132 (src line 870)


state 397
	expr_slice:  expr_ident '[' expr ':' expr ':'.expr ']' 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 430
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 398
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr_ident '[' ':' expr ':' expr.']' 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	']'  shift 431
	'.'  shift 89
	.  error


state 399
	expr:  MAKE '(' type_data ',' expr ')'.    (93)

	.  reduce 93 (src line 646)


state 400
	expr:  MAKE '(' type_data ',' expr ','.expr ')' 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 432
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 401
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  MAKE '(' TYPE IDENT ',' expr.')' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	')'  shift 433
	'['  shift 87
	'.'  shift 89
	.  error


state 402
	expr:  MAP '{' opt_newlines expr_map opt_comma_newlines '}'.    (97)

	.  reduce 97 (src line 666)


403: shift/reduce conflict (shift 8(0), red'n 183(0)) on '\n'
state 403
	expr:  MAP '[' type_data ']' type_data '{'.opt_newlines expr_map opt_comma_newlines '}' 
	opt_newlines: .    (183)

	'\n'  shift 8
	.  reduce 183 (src line 1141)

	opt_newlines  goto 434
	newlines  goto 129
	newline  goto 7

state 404
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_map:  expr_map ',' opt_newlines expr.':' expr 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	':'  shift 435
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  error


405: shift/reduce conflict (shift 5(0), red'n 178(0)) on ';'
405: shift/reduce conflict (shift 8(0), red'n 178(0)) on '\n'
state 405
	stmt:  TRY '{' compstmt '}' CATCH IDENT '{'.compstmt '}' FINALLY '{' compstmt '}' 
	stmt:  TRY '{' compstmt '}' CATCH IDENT '{'.compstmt '}' 
	opt_term: .    (178)

	';'  shift 5
	'\n'  shift 8
	.  reduce 178 (src line 1132)

	compstmt  goto 436
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	newlines  goto 6
	newline  goto 7

state 406
	stmt:  TRY '{' compstmt '}' CATCH '{' compstmt.'}' FINALLY '{' compstmt '}' 
	stmt:  TRY '{' compstmt '}' CATCH '{' compstmt.'}' 

	'}'  shift 437
	.  error


state 407
	stmt_if:  stmt_if ELSE IF expr '{' compstmt '}'.    (36)

	.  reduce 36 (src line 319)


state 408
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_slice:  expr '[' expr ':' expr ':' expr.']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	']'  shift 438
	'.'  shift 89
	.  error


state 409
	expr_slice:  expr '[' ':' expr ':' expr ']'.    (140)

	.  reduce 140 (src line 903)


state 410
	stmt_for:  FOR expr_idents IN expr '{' compstmt '}'.    (39)

	.  reduce 39 (src line 339)


state 411
	stmt_for:  FOR ';' ';' expr '{' compstmt '}'.    (42)

	.  reduce 42 (src line 360)


state 412
	stmt_for:  FOR ';' expr ';' '{' compstmt '}'.    (43)

	.  reduce 43 (src line 365)


state 413
	stmt_for:  FOR ';' expr ';' expr '{' compstmt.'}' 

	'}'  shift 439
	.  error


state 414
	stmt_for:  FOR stmt_var_or_lets ';' ';' '{' compstmt '}'.    (45)

	.  reduce 45 (src line 375)


state 415
	stmt_for:  FOR stmt_var_or_lets ';' ';' expr '{' compstmt.'}' 

	'}'  shift 440
	.  error


state 416
	stmt_for:  FOR stmt_var_or_lets ';' expr ';' '{' compstmt.'}' 

	'}'  shift 441
	.  error


417: shift/reduce conflict (shift 5(0), red'n 178(0)) on ';'
417: shift/reduce conflict (shift 8(0), red'n 178(0)) on '\n'
state 417
	stmt_for:  FOR stmt_var_or_lets ';' expr ';' expr '{'.compstmt '}' 
	opt_term: .    (178)

	';'  shift 5
	'\n'  shift 8
	.  reduce 178 (src line 1132)

	compstmt  goto 442
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	newlines  goto 6
	newline  goto 7

state 418
	stmt_switch:  SWITCH expr '{' opt_newlines stmt_switch_cases opt_newlines '}'.    (58)

	.  reduce 58 (src line 452)


state 419
	stmt_switch_default:  DEFAULT ':' compstmt.    (66)

	.  reduce 66 (src line 501)


420: shift/reduce conflict (shift 5(0), red'n 178(0)) on ';'
420: shift/reduce conflict (shift 8(0), red'n 178(0)) on '\n'
state 420
	stmt_switch_case:  CASE expr ':'.compstmt 
	opt_term: .    (178)

	';'  shift 5
	'\n'  shift 8
	.  reduce 178 (src line 1132)

	compstmt  goto 443
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	newlines  goto 6
	newline  goto 7

421: shift/reduce conflict (shift 5(0), red'n 178(0)) on ';'
421: shift/reduce conflict (shift 8(0), red'n 178(0)) on '\n'
state 421
	stmt_switch_case:  CASE exprs ':'.compstmt 
	opt_term: .    (178)

	';'  shift 5
	'\n'  shift 8
	.  reduce 178 (src line 1132)

	compstmt  goto 444
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	newlines  goto 6
	newline  goto 7

state 422
	stmt_select_case:  CASE stmt ':' compstmt.    (55)

	.  reduce 55 (src line 432)


state 423
	expr:  FUNC '(' expr_idents ')' '{' compstmt '}'.    (75)

	.  reduce 75 (src line 551)


state 424
	expr:  FUNC '(' expr_idents VARARG ')' '{' compstmt.'}' 

	'}'  shift 445
	.  error


state 425
	expr:  FUNC IDENT '(' expr_idents ')' '{' compstmt.'}' 

	'}'  shift 446
	.  error


426: shift/reduce conflict (shift 5(0), red'n 178(0)) on ';'
426: shift/reduce conflict (shift 8(0), red'n 178(0)) on '\n'
state 426
	expr:  FUNC IDENT '(' expr_idents VARARG ')' '{'.compstmt '}' 
	opt_term: .    (178)

	';'  shift 5
	'\n'  shift 8
	.  reduce 178 (src line 1132)

	compstmt  goto 447
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	newlines  goto 6
	newline  goto 7

state 427
	expr:  slice_count type_data '{' opt_newlines exprs opt_comma_newlines '}'.    (81)

	.  reduce 81 (src line 581)


state 428
	type_data:  STRUCT '{' opt_newlines type_data_struct opt_newlines '}'.    (114)

	.  reduce 114 (src line 759)


state 429
	type_data_struct:  type_data_struct ',' opt_newlines.IDENT type_data 

	IDENT  shift 448
	.  error


state 430
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr_ident '[' expr ':' expr ':' expr.']' 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	']'  shift 449
	'.'  shift 89
	.  error


state 431
	expr_slice:  expr_ident '[' ':' expr ':' expr ']'.    (135)

	.  reduce 135 (src line 883)


state 432
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  MAKE '(' type_data ',' expr ',' expr.')' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	')'  shift 450
	'['  shift 87
	'.'  shift 89
	.  error


state 433
	expr:  MAKE '(' TYPE IDENT ',' expr ')'.    (95)

	.  reduce 95 (src line 656)


state 434
	expr:  MAP '[' type_data ']' type_data '{' opt_newlines.expr_map opt_comma_newlines '}' 
	expr_map: .    (129)

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  reduce 129 (src line 852)

	expr  goto 237
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_map  goto 451
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 435
	expr_map:  expr_map ',' opt_newlines expr ':'.expr 

	IDENT  shift 37
	NUMBER  shift 54
	STRING  shift 55
	FUNC  shift 33
	NEW  shift 41
	TRUE  shift 56
	FALSE  shift 57
	NIL  shift 58
	MAKE  shift 42
	OPCHAN  shift 59
	LEN  shift 39
	MAP  shift 43
	IMPORT  shift 40
	'-'  shift 53
	'^'  shift 61
	'*'  shift 63
	'&'  shift 62
	'{'  shift 44
	'('  shift 36
	'['  shift 34
	'!'  shift 60
	.  error

	expr  goto 452
	slice_count  goto 35
	expr_member_or_ident  goto 31
	expr_member  goto 52
	expr_ident  goto 38
	expr_literals  goto 32
	expr_slice  goto 45
	expr_chan  goto 46
	expr_unary  goto 47
	expr_binary  goto 48
	expr_lets  goto 49
	op_binary  goto 67
	op_comparison  goto 66
	op_add  goto 65
	op_multiply  goto 64

state 436
	stmt:  TRY '{' compstmt '}' CATCH IDENT '{' compstmt.'}' FINALLY '{' compstmt '}' 
	stmt:  TRY '{' compstmt '}' CATCH IDENT '{' compstmt.'}' 

	'}'  shift 453
	.  error


state 437
	stmt:  TRY '{' compstmt '}' CATCH '{' compstmt '}'.FINALLY '{' compstmt '}' 
	stmt:  TRY '{' compstmt '}' CATCH '{' compstmt '}'.    (15)

	FINALLY  shift 454
	.  reduce 15 (src line 198)


state 438
	expr_slice:  expr '[' expr ':' expr ':' expr ']'.    (141)

	.  reduce 141 (src line 907)


state 439
	stmt_for:  FOR ';' expr ';' expr '{' compstmt '}'.    (44)

	.  reduce 44 (src line 370)


state 440
	stmt_for:  FOR stmt_var_or_lets ';' ';' expr '{' compstmt '}'.    (46)

	.  reduce 46 (src line 380)


state 441
	stmt_for:  FOR stmt_var_or_lets ';' expr ';' '{' compstmt '}'.    (47)

	.  reduce 47 (src line 385)


state 442
	stmt_for:  FOR stmt_var_or_lets ';' expr ';' expr '{' compstmt.'}' 

	'}'  shift 455
	.  error


state 443
	stmt_switch_case:  CASE expr ':' compstmt.    (64)

	.  reduce 64 (src line 489)


state 444
	stmt_switch_case:  CASE exprs ':' compstmt.    (65)

	.  reduce 65 (src line 495)


state 445
	expr:  FUNC '(' expr_idents VARARG ')' '{' compstmt '}'.    (76)

	.  reduce 76 (src line 556)


state 446
	expr:  FUNC IDENT '(' expr_idents ')' '{' compstmt '}'.    (77)

	.  reduce 77 (src line 561)


state 447
	expr:  FUNC IDENT '(' expr_idents VARARG ')' '{' compstmt.'}' 

	'}'  shift 456
	.  error


state 448
	type_data_struct:  type_data_struct ',' opt_newlines IDENT.type_data 

	IDENT  shift 131
	CHAN  shift 135
	STRUCT  shift 136
	MAP  shift 134
	'*'  shift 132
	'['  shift 137
	.  error

	type_data  goto 457
	slice_count  goto 133

state 449
	expr_slice:  expr_ident '[' expr ':' expr ':' expr ']'.    (136)

	.  reduce 136 (src line 887)


state 450
	expr:  MAKE '(' type_data ',' expr ',' expr ')'.    (94)

	.  reduce 94 (src line 651)


state 451
	expr:  MAP '[' type_data ']' type_data '{' opt_newlines expr_map.opt_comma_newlines '}' 
	expr_map:  expr_map.',' opt_newlines expr ':' expr 
	opt_comma_newlines: .    (188)

	','  shift 297
	'\n'  shift 8
	.  reduce 188 (src line 1151)

	opt_comma_newlines  goto 458
	newlines  goto 278
	newline  goto 7

state 452
	expr:  expr.'?' expr ':' expr 
	expr:  expr.NILCOALESCE expr 
	expr:  expr.'(' exprs VARARG ')' 
	expr:  expr.'(' exprs ')' 
	expr:  expr.'[' expr ']' 
	expr:  expr.IN expr 
	expr_member:  expr.'.' IDENT 
	expr_map:  expr_map ',' opt_newlines expr ':' expr.    (131)
	expr_slice:  expr.'[' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' ']' 
	expr_slice:  expr.'[' ':' expr ']' 
	expr_slice:  expr.'[' ':' expr ':' expr ']' 
	expr_slice:  expr.'[' expr ':' expr ':' expr ']' 
	expr_chan:  expr.OPCHAN expr 
	expr_lets:  expr.PLUSPLUS 
	expr_lets:  expr.MINUSMINUS 
	expr_lets:  expr.PLUSEQ expr 
	expr_lets:  expr.MINUSEQ expr 
	expr_lets:  expr.OREQ expr 
	expr_lets:  expr.MULEQ expr 
	expr_lets:  expr.DIVEQ expr 
	expr_lets:  expr.ANDEQ expr 
	op_multiply:  expr.'*' expr 
	op_multiply:  expr.'/' expr 
	op_multiply:  expr.'%' expr 
	op_multiply:  expr.SHIFTLEFT expr 
	op_multiply:  expr.SHIFTRIGHT expr 
	op_multiply:  expr.'&' expr 
	op_add:  expr.'+' expr 
	op_add:  expr.'-' expr 
	op_add:  expr.'|' expr 
	op_comparison:  expr.EQEQ expr 
	op_comparison:  expr.NEQ expr 
	op_comparison:  expr.'<' expr 
	op_comparison:  expr.LE expr 
	op_comparison:  expr.'>' expr 
	op_comparison:  expr.GE expr 
	op_binary:  expr.ANDAND expr 
	op_binary:  expr.OROR expr 

	IN  shift 88
	EQEQ  shift 108
	NEQ  shift 109
	GE  shift 113
	LE  shift 111
	OROR  shift 115
	ANDAND  shift 114
	NILCOALESCE  shift 85
	PLUSEQ  shift 93
	MINUSEQ  shift 94
	MULEQ  shift 96
	DIVEQ  shift 97
	ANDEQ  shift 98
	OREQ  shift 95
	PLUSPLUS  shift 91
	MINUSMINUS  shift 92
	SHIFTLEFT  shift 102
	SHIFTRIGHT  shift 103
	OPCHAN  shift 90
	'?'  shift 84
	'<'  shift 110
	'>'  shift 112
	'+'  shift 105
	'-'  shift 106
	'|'  shift 107
	'*'  shift 99
	'/'  shift 100
	'%'  shift 101
	'&'  shift 104
	'('  shift 86
	'['  shift 87
	'.'  shift 89
	.  reduce 131 (src line 861)


state 453
	stmt:  TRY '{' compstmt '}' CATCH IDENT '{' compstmt '}'.FINALLY '{' compstmt '}' 
	stmt:  TRY '{' compstmt '}' CATCH IDENT '{' compstmt '}'.    (14)

	FINALLY  shift 459
	.  reduce 14 (src line 193)


state 454
	stmt:  TRY '{' compstmt '}' CATCH '{' compstmt '}' FINALLY.'{' compstmt '}' 

	'{'  shift 460
	.  error


state 455
	stmt_for:  FOR stmt_var_or_lets ';' expr ';' expr '{' compstmt '}'.    (48)

	.  reduce 48 (src line 390)


state 456
	expr:  FUNC IDENT '(' expr_idents VARARG ')' '{' compstmt '}'.    (78)

	.  reduce 78 (src line 566)


state 457
	type_data:  type_data.'.' IDENT 
	type_data_struct:  type_data_struct ',' opt_newlines IDENT type_data.    (116)

	'.'  shift 218
	.  reduce 116 (src line 769)


state 458
	expr:  MAP '[' type_data ']' type_data '{' opt_newlines expr_map opt_comma_newlines.'}' 

	'}'  shift 461
	.  error


state 459
	stmt:  TRY '{' compstmt '}' CATCH IDENT '{' compstmt '}' FINALLY.'{' compstmt '}' 

	'{'  shift 462
	.  error


460: shift/reduce conflict (shift 5(0), red'n 178(0)) on ';'
460: shift/reduce conflict (shift 8(0), red'n 178(0)) on '\n'
state 460
	stmt:  TRY '{' compstmt '}' CATCH '{' compstmt '}' FINALLY '{'.compstmt '}' 
	opt_term: .    (178)

	';'  shift 5
	'\n'  shift 8
	.  reduce 178 (src line 1132)

	compstmt  goto 463
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	newlines  goto 6
	newline  goto 7

state 461
	expr:  MAP '[' type_data ']' type_data '{' opt_newlines expr_map opt_comma_newlines '}'.    (98)

	.  reduce 98 (src line 672)


462: shift/reduce conflict (shift 5(0), red'n 178(0)) on ';'
462: shift/reduce conflict (shift 8(0), red'n 178(0)) on '\n'
state 462
	stmt:  TRY '{' compstmt '}' CATCH IDENT '{' compstmt '}' FINALLY '{'.compstmt '}' 
	opt_term: .    (178)

	';'  shift 5
	'\n'  shift 8
	.  reduce 178 (src line 1132)

	compstmt  goto 464
	stmts  goto 3
	opt_term  goto 2
	term  goto 4
	newlines  goto 6
	newline  goto 7

state 463
	stmt:  TRY '{' compstmt '}' CATCH '{' compstmt '}' FINALLY '{' compstmt.'}' 

	'}'  shift 465
	.  error


state 464
	stmt:  TRY '{' compstmt '}' CATCH IDENT '{' compstmt '}' FINALLY '{' compstmt.'}' 

	'}'  shift 466
	.  error


state 465
	stmt:  TRY '{' compstmt '}' CATCH '{' compstmt '}' FINALLY '{' compstmt '}'.    (13)

	.  reduce 13 (src line 188)


state 466
	stmt:  TRY '{' compstmt '}' CATCH IDENT '{' compstmt '}' FINALLY '{' compstmt '}'.    (12)

	.  reduce 12 (src line 183)


84 terminals, 43 nonterminals
192 grammar rules, 467/16000 states
201 shift/reduce, 214 reduce/reduce conflicts reported
192 working sets used
memory: parser 2040/240000
417 extra closures
4213 shift entries, 66 exceptions
253 goto entries
1427 entries saved by goto default
Optimizer space used: output 4030/240000
4030 table entries, 1917 zero
maximum spread: 84, maximum offset: 462
